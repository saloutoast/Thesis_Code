
IRComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000314  00000000  00000000  00000193  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011d  00000000  00000000  000004a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000211  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000007d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000161  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f0  00000000  00000000  00000959  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000c0  00000000  00000000  00000a49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
static volatile int sending = 0;
static volatile int pausing = 0;

int main(void) {

	DDRB=0;
  80:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
  82:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
  84:	87 e0       	ldi	r24, 0x07	; 7
  86:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7);
  88:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
  8a:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
  8c:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
  8e:	2f 98       	cbi	0x05, 7	; 5

	//PORTB |= (1<<PORTB0);
	//PORTB |= (1<<PORTB1); // turn on middle LED
	//PORTB |= (1<<PORTB2);

	DDRC=0;
  90:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
  92:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
  94:	88 e0       	ldi	r24, 0x08	; 8
  96:	87 b9       	out	0x07, r24	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  98:	60 ef       	ldi	r22, 0xF0	; 240
  9a:	70 e0       	ldi	r23, 0x00	; 0
	int ii=0;
	while(1) {
		// loop
		
		//switch E.P.M. direction 1 
		PORTB |= (1<<PORTB1); // set middle LED
  9c:	48 ec       	ldi	r20, 0xC8	; 200
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	29 9a       	sbi	0x05, 1	; 5
		PORTB |= (1<<6);//activate E.P.M direction 1
  a2:	2e 9a       	sbi	0x05, 6	; 5
  a4:	cb 01       	movw	r24, r22
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x26>
		_delay_us(120);//leave on for 80us
		PORTB &=~(1<<6);//deactivate E.P.M
  aa:	2e 98       	cbi	0x05, 6	; 5
		PORTB &=~(1<<7);//deactivate E.P.M
  ac:	2f 98       	cbi	0x05, 7	; 5
		PORTB &= ~(1<<PORTB1); //clear middle LED
  ae:	29 98       	cbi	0x05, 1	; 5
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	0a c0       	rjmp	.+20     	; 0xca <main+0x4a>
  b6:	fa 01       	movw	r30, r20
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <main+0x36>
		ii = 0;
		while (ii<5) {
			_delay_ms(100);//delay 1s
			ii++;
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
		_delay_us(120);//leave on for 80us
		PORTB &=~(1<<6);//deactivate E.P.M
		PORTB &=~(1<<7);//deactivate E.P.M
		PORTB &= ~(1<<PORTB1); //clear middle LED
		ii = 0;
		while (ii<5) {
  c4:	25 30       	cpi	r18, 0x05	; 5
  c6:	31 05       	cpc	r19, r1
  c8:	19 f0       	breq	.+6      	; 0xd0 <main+0x50>
  ca:	88 ee       	ldi	r24, 0xE8	; 232
  cc:	93 e0       	ldi	r25, 0x03	; 3
  ce:	f3 cf       	rjmp	.-26     	; 0xb6 <main+0x36>
			_delay_ms(100);//delay 1s
			ii++;
		}		
		
		//switch E.P.M. direction 2
		PORTB |= (1<<PORTB2); // clear outer LED
  d0:	2a 9a       	sbi	0x05, 2	; 5
		PORTB |= (1<<7);//activate E.P.M direction 2
  d2:	2f 9a       	sbi	0x05, 7	; 5
  d4:	cb 01       	movw	r24, r22
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x56>
		_delay_us(120);//leave on for 80us
		PORTB &=~(1<<6);//deactivate E.P.M
  da:	2e 98       	cbi	0x05, 6	; 5
		PORTB &=~(1<<7);//deactivate E.P.M
  dc:	2f 98       	cbi	0x05, 7	; 5
		PORTB &= ~(1<<PORTB2); // set outer LED
  de:	2a 98       	cbi	0x05, 2	; 5
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	0a c0       	rjmp	.+20     	; 0xfa <main+0x7a>
  e6:	fa 01       	movw	r30, r20
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x66>
		ii = 0;
		while (ii<5) {
			_delay_ms(100);//delay 1s
			ii++;
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
		_delay_us(120);//leave on for 80us
		PORTB &=~(1<<6);//deactivate E.P.M
		PORTB &=~(1<<7);//deactivate E.P.M
		PORTB &= ~(1<<PORTB2); // set outer LED
		ii = 0;
		while (ii<5) {
  f4:	25 30       	cpi	r18, 0x05	; 5
  f6:	31 05       	cpc	r19, r1
  f8:	99 f2       	breq	.-90     	; 0xa0 <main+0x20>
  fa:	88 ee       	ldi	r24, 0xE8	; 232
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	f3 cf       	rjmp	.-26     	; 0xe6 <main+0x66>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
