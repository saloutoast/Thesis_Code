
IRComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000224  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000042  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000357  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000019f  00000000  00000000  000005dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ef  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000186  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000116  00000000  00000000  00000c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_23>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 83 00 	call	0x106	; 0x106 <main>
  88:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_23>:
		}
	}

}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <__vector_23+0xe>

	// follow pulse train
	while(ACSR & (1<<ACO)) {
		PORTB |= (1<<PORTB2);
  9c:	2a 9a       	sbi	0x05, 2	; 5
}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine

	// follow pulse train
	while(ACSR & (1<<ACO)) {
  9e:	00 b6       	in	r0, 0x30	; 48
  a0:	05 fc       	sbrc	r0, 5
  a2:	fc cf       	rjmp	.-8      	; 0x9c <__vector_23+0xc>
		PORTB |= (1<<PORTB2);
	}
	PORTB &= ~(1<<PORTB2);
  a4:	2a 98       	cbi	0x05, 2	; 5
	rcv_sx = 0;

	_delay_ms(10);
	PORTB &= ~( (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0) ); */

} 
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <send_msg>:

void send_msg(char msg) { // timing values/delays are calibrated with other 
  b0:	47 e0       	ldi	r20, 0x07	; 7
  b2:	50 e0       	ldi	r21, 0x00	; 0
		}
	} */

	while(bits_sent<8) { // send first 8-bit messages
		new_bit = (msg & (1<<(7-bits_sent))) >> (7-bits_sent);
		if(new_bit==1) { // turn on LEDs
  b4:	a1 e0       	ldi	r26, 0x01	; 1
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	68 2f       	mov	r22, r24
  ba:	70 e0       	ldi	r23, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	e8 ec       	ldi	r30, 0xC8	; 200
  be:	f0 e0       	ldi	r31, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  c0:	35 ef       	ldi	r19, 0xF5	; 245
  c2:	cd 01       	movw	r24, r26
  c4:	04 2e       	mov	r0, r20
  c6:	02 c0       	rjmp	.+4      	; 0xcc <send_msg+0x1c>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <send_msg+0x18>
  d0:	86 23       	and	r24, r22
  d2:	97 23       	and	r25, r23
  d4:	04 2e       	mov	r0, r20
  d6:	02 c0       	rjmp	.+4      	; 0xdc <send_msg+0x2c>
  d8:	95 95       	asr	r25
  da:	87 95       	ror	r24
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <send_msg+0x28>
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	11 f4       	brne	.+4      	; 0xe8 <send_msg+0x38>
			PORTC |= (1<<PORTC3);
  e4:	43 9a       	sbi	0x08, 3	; 8
			PORTB |= (1<<PORTB2);
  e6:	2a 9a       	sbi	0x05, 2	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e8:	cf 01       	movw	r24, r30
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <send_msg+0x3a>
			_delay_us(100);
		} else { // turn off LEDs
			_delay_us(100);
		}
		PORTC &= ~(1<<PORTC3);
  ee:	43 98       	cbi	0x08, 3	; 8
		PORTB &= ~(1<<PORTB2);
  f0:	2a 98       	cbi	0x05, 2	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  f2:	83 2f       	mov	r24, r19
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <send_msg+0x44>
  f8:	41 50       	subi	r20, 0x01	; 1
  fa:	50 40       	sbci	r21, 0x00	; 0
			PORTC &= ~(1<<PORTC3);
			PORTB &= ~(1<<PORTB2);
		}
	} */

	while(bits_sent<8) { // send first 8-bit messages
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	4f 3f       	cpi	r20, 0xFF	; 255
 100:	58 07       	cpc	r21, r24
 102:	f9 f6       	brne	.-66     	; 0xc2 <send_msg+0x12>
		PORTB &= ~(1<<PORTB2);
		bits_sent+=1;
		_delay_us(95); // wait one bit
	}*/
	
}
 104:	08 95       	ret

00000106 <main>:
static volatile char toRcv1 = 0xDB;
static volatile char toRcv2 = 0xA5;

enum states state = IDLE;

int main(void) {
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29

	DDRB=0;
 10e:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
 110:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	84 b9       	out	0x04, r24	; 4

	DDRB |= (1<<7); // enable EPM control pins
 116:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
 118:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
 11a:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
 11c:	2f 98       	cbi	0x05, 7	; 5

	DDRC=0; // enable IR LED
 11e:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
 120:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
 122:	88 e0       	ldi	r24, 0x08	; 8
 124:	87 b9       	out	0x07, r24	; 7

	cli(); // disable interrupts
 126:	f8 94       	cli

	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
 12e:	8b e0       	ldi	r24, 0x0B	; 11
 130:	80 bf       	out	0x30, r24	; 48

	// Initialize timer0 for timing (1/8 prescaler, 8-bit timer rolls over at ~120 Hz)
	TCCR0B |= (0<<CS02)|(1<<CS01)|(0<<CS00);
 132:	85 b5       	in	r24, 0x25	; 37
 134:	82 60       	ori	r24, 0x02	; 2
 136:	85 bd       	out	0x25, r24	; 37

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
 138:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
 13a:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
 13c:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<PORTC3); // IR
 13e:	43 9a       	sbi	0x08, 3	; 8
 140:	80 ed       	ldi	r24, 0xD0	; 208
 142:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 144:	28 ec       	ldi	r18, 0xC8	; 200
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	f9 01       	movw	r30, r18
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 150:	d9 f7       	brne	.-10     	; 0x148 <main+0x42>

	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
 152:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
 154:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
 156:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1<<PORTC3);
 158:	43 98       	cbi	0x08, 3	; 8

	sei(); // enable interrupts	
 15a:	78 94       	sei
 15c:	08 ec       	ldi	r16, 0xC8	; 200
 15e:	10 e0       	ldi	r17, 0x00	; 0

	
	while(1) {
		switch(state) {
 160:	80 91 00 01 	lds	r24, 0x0100
 164:	88 23       	and	r24, r24
 166:	a9 f0       	breq	.+42     	; 0x192 <main+0x8c>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x5e>
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
				while(jj<50) { // SENDING for 5 seconds
					//cli(); // disable interrupts temporarily to ensure a complete message is sent
					//send_msg(0xA5); 
					//sei(); 
					//_delay_ms(98);
					cli();
 170:	f8 94       	cli
					send_msg(0xFF);
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	0e 94 58 00 	call	0xb0	; 0xb0 <send_msg>
					sei();
 178:	78 94       	sei
 17a:	84 ed       	ldi	r24, 0xD4	; 212
 17c:	93 e0       	ldi	r25, 0x03	; 3
 17e:	f8 01       	movw	r30, r16
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 184:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 186:	d9 f7       	brne	.-10     	; 0x17e <main+0x78>
					_delay_ms(98);
					jj++;
 188:	21 96       	adiw	r28, 0x01	; 1
	while(1) {
		switch(state) {
			case SENDING: ;

				int jj=0;
				while(jj<50) { // SENDING for 5 seconds
 18a:	c2 33       	cpi	r28, 0x32	; 50
 18c:	d1 05       	cpc	r29, r1
 18e:	81 f7       	brne	.-32     	; 0x170 <main+0x6a>
 190:	e7 cf       	rjmp	.-50     	; 0x160 <main+0x5a>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0

			case IDLE: ;

				int ii=0;
				while(1) {
					if(TCNT0>=200) {
 196:	86 b5       	in	r24, 0x26	; 38
 198:	88 3c       	cpi	r24, 0xC8	; 200
 19a:	18 f0       	brcs	.+6      	; 0x1a2 <main+0x9c>
						ii++;
 19c:	2f 5f       	subi	r18, 0xFF	; 255
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
						TCNT0=0;
 1a0:	16 bc       	out	0x26, r1	; 38
					}
					if(ii>=25000) { // IDLE for 5 seconds
 1a2:	81 e6       	ldi	r24, 0x61	; 97
 1a4:	28 3a       	cpi	r18, 0xA8	; 168
 1a6:	38 07       	cpc	r19, r24
 1a8:	b4 f3       	brlt	.-20     	; 0x196 <main+0x90>
 1aa:	da cf       	rjmp	.-76     	; 0x160 <main+0x5a>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
