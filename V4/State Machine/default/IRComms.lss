
IRComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000390  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800102  00800102  00000426  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000042  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000365  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015b  00000000  00000000  000007ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000440  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000184  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000aa  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_23>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 80 01 	call	0x300	; 0x300 <main>
  9e:	0c 94 c6 01 	jmp	0x38c	; 0x38c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_23>:
		}
	}

}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31

	TCNT0 = 0; // reset counter
  c4:	16 bc       	out	0x26, r1	; 38
	PORTB |= (1<<PORTB0); // turn on LED to indicate potential start bit
  c6:	28 9a       	sbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1); // ensure success LED is off
  c8:	29 98       	cbi	0x05, 1	; 5
	rcv_sx = 0; // reset receive success flag
  ca:	10 92 04 01 	sts	0x0104, r1
  ce:	10 92 03 01 	sts	0x0103, r1
  d2:	0a c0       	rjmp	.+20     	; 0xe8 <__vector_23+0x42>

	while ( TCNT0 < 100) { // while potential "start" bit should be ongoing
		if ((ACSR&(1<<ACO))==0) { // record time after falling edge
  d4:	00 b6       	in	r0, 0x30	; 48
  d6:	05 fc       	sbrc	r0, 5
  d8:	07 c0       	rjmp	.+14     	; 0xe8 <__vector_23+0x42>
			rcv_time = TCNT0;
  da:	86 b5       	in	r24, 0x26	; 38
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 06 01 	sts	0x0106, r25
  e2:	80 93 05 01 	sts	0x0105, r24
  e6:	03 c0       	rjmp	.+6      	; 0xee <__vector_23+0x48>
	TCNT0 = 0; // reset counter
	PORTB |= (1<<PORTB0); // turn on LED to indicate potential start bit
	PORTB &= ~(1<<PORTB1); // ensure success LED is off
	rcv_sx = 0; // reset receive success flag

	while ( TCNT0 < 100) { // while potential "start" bit should be ongoing
  e8:	86 b5       	in	r24, 0x26	; 38
  ea:	84 36       	cpi	r24, 0x64	; 100
  ec:	98 f3       	brcs	.-26     	; 0xd4 <__vector_23+0x2e>
			rcv_time = TCNT0;
			break;
		}
	}

	if ((rcv_time>70)&(rcv_time<80)) { // check that it was a legitimate start bit
  ee:	80 91 05 01 	lds	r24, 0x0105
  f2:	90 91 06 01 	lds	r25, 0x0106
  f6:	20 91 05 01 	lds	r18, 0x0105
  fa:	30 91 06 01 	lds	r19, 0x0106
  fe:	87 34       	cpi	r24, 0x47	; 71
 100:	91 05       	cpc	r25, r1
 102:	0c f4       	brge	.+2      	; 0x106 <__vector_23+0x60>
 104:	87 c0       	rjmp	.+270    	; 0x214 <__vector_23+0x16e>
 106:	20 35       	cpi	r18, 0x50	; 80
 108:	31 05       	cpc	r19, r1
 10a:	0c f0       	brlt	.+2      	; 0x10e <__vector_23+0x68>
 10c:	83 c0       	rjmp	.+262    	; 0x214 <__vector_23+0x16e>

		PORTB &= ~(1<<PORTB2); // clear start bit LED
 10e:	2a 98       	cbi	0x05, 2	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 110:	55 e8       	ldi	r21, 0x85	; 133

		while (bits_rcvd<8) { // receive first message
			_delay_us(50); // wait until middle of next bit
			rcvd1 |= ( ((ACSR&(1<<ACO))>>5) << (7-bits_rcvd) ); // set new bit
 112:	67 e0       	ldi	r22, 0x07	; 7
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	27 c0       	rjmp	.+78     	; 0x166 <__vector_23+0xc0>
 118:	85 2f       	mov	r24, r21
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <__vector_23+0x74>
 11e:	40 91 07 01 	lds	r20, 0x0107
 122:	80 b7       	in	r24, 0x30	; 48
 124:	20 91 08 01 	lds	r18, 0x0108
 128:	30 91 09 01 	lds	r19, 0x0109
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	80 72       	andi	r24, 0x20	; 32
 130:	90 70       	andi	r25, 0x00	; 0
 132:	f5 e0       	ldi	r31, 0x05	; 5
 134:	95 95       	asr	r25
 136:	87 95       	ror	r24
 138:	fa 95       	dec	r31
 13a:	e1 f7       	brne	.-8      	; 0x134 <__vector_23+0x8e>
 13c:	fb 01       	movw	r30, r22
 13e:	e2 1b       	sub	r30, r18
 140:	f3 0b       	sbc	r31, r19
 142:	0e 2e       	mov	r0, r30
 144:	02 c0       	rjmp	.+4      	; 0x14a <__vector_23+0xa4>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <__vector_23+0xa0>
 14e:	48 2b       	or	r20, r24
 150:	40 93 07 01 	sts	0x0107, r20
			bits_rcvd+=1;
 154:	80 91 08 01 	lds	r24, 0x0108
 158:	90 91 09 01 	lds	r25, 0x0109
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	90 93 09 01 	sts	0x0109, r25
 162:	80 93 08 01 	sts	0x0108, r24

	if ((rcv_time>70)&(rcv_time<80)) { // check that it was a legitimate start bit

		PORTB &= ~(1<<PORTB2); // clear start bit LED

		while (bits_rcvd<8) { // receive first message
 166:	80 91 08 01 	lds	r24, 0x0108
 16a:	90 91 09 01 	lds	r25, 0x0109
 16e:	08 97       	sbiw	r24, 0x08	; 8
 170:	9c f2       	brlt	.-90     	; 0x118 <__vector_23+0x72>
 172:	28 c0       	rjmp	.+80     	; 0x1c4 <__vector_23+0x11e>
 174:	85 2f       	mov	r24, r21
 176:	8a 95       	dec	r24
 178:	f1 f7       	brne	.-4      	; 0x176 <__vector_23+0xd0>
			bits_rcvd+=1;
		}

		while (bits_rcvd<16) { // receive second message
			_delay_us(50); // wait until middle of next bit
			rcvd2 |= ( ((ACSR&(1<<ACO))>>5) << (16-bits_rcvd) ); // set new bit
 17a:	40 91 0a 01 	lds	r20, 0x010A
 17e:	80 b7       	in	r24, 0x30	; 48
 180:	20 91 08 01 	lds	r18, 0x0108
 184:	30 91 09 01 	lds	r19, 0x0109
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	80 72       	andi	r24, 0x20	; 32
 18c:	90 70       	andi	r25, 0x00	; 0
 18e:	e5 e0       	ldi	r30, 0x05	; 5
 190:	95 95       	asr	r25
 192:	87 95       	ror	r24
 194:	ea 95       	dec	r30
 196:	e1 f7       	brne	.-8      	; 0x190 <__vector_23+0xea>
 198:	fb 01       	movw	r30, r22
 19a:	e2 1b       	sub	r30, r18
 19c:	f3 0b       	sbc	r31, r19
 19e:	0e 2e       	mov	r0, r30
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__vector_23+0x100>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <__vector_23+0xfc>
 1aa:	48 2b       	or	r20, r24
 1ac:	40 93 0a 01 	sts	0x010A, r20
			bits_rcvd+=1;
 1b0:	80 91 08 01 	lds	r24, 0x0108
 1b4:	90 91 09 01 	lds	r25, 0x0109
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	90 93 09 01 	sts	0x0109, r25
 1be:	80 93 08 01 	sts	0x0108, r24
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <__vector_23+0x124>
 1c4:	55 e8       	ldi	r21, 0x85	; 133
			bits_rcvd+=1;
		}

		while (bits_rcvd<16) { // receive second message
			_delay_us(50); // wait until middle of next bit
			rcvd2 |= ( ((ACSR&(1<<ACO))>>5) << (16-bits_rcvd) ); // set new bit
 1c6:	60 e1       	ldi	r22, 0x10	; 16
 1c8:	70 e0       	ldi	r23, 0x00	; 0
			_delay_us(50); // wait until middle of next bit
			rcvd1 |= ( ((ACSR&(1<<ACO))>>5) << (7-bits_rcvd) ); // set new bit
			bits_rcvd+=1;
		}

		while (bits_rcvd<16) { // receive second message
 1ca:	80 91 08 01 	lds	r24, 0x0108
 1ce:	90 91 09 01 	lds	r25, 0x0109
 1d2:	40 97       	sbiw	r24, 0x10	; 16
 1d4:	7c f2       	brlt	.-98     	; 0x174 <__vector_23+0xce>
			_delay_us(50); // wait until middle of next bit
			rcvd2 |= ( ((ACSR&(1<<ACO))>>5) << (16-bits_rcvd) ); // set new bit
			bits_rcvd+=1;
		}

		if (rcvd1==rcvd2) {// check if messages are the same; set success flag here
 1d6:	90 91 07 01 	lds	r25, 0x0107
 1da:	80 91 0a 01 	lds	r24, 0x010A
 1de:	98 17       	cp	r25, r24
 1e0:	c9 f4       	brne	.+50     	; 0x214 <__vector_23+0x16e>
			
			PORTB |= (1<<PORTB1); // turn on success LED for transmission
 1e2:	29 9a       	sbi	0x05, 1	; 5
			if (rcvd1==toRcv) { // check if message is the same as expected
 1e4:	90 91 07 01 	lds	r25, 0x0107
 1e8:	80 91 0b 01 	lds	r24, 0x010B
 1ec:	98 17       	cp	r25, r24
 1ee:	91 f4       	brne	.+36     	; 0x214 <__vector_23+0x16e>
				rcv_sx = 1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 04 01 	sts	0x0104, r25
 1f8:	80 93 03 01 	sts	0x0103, r24
				lastRcv &= 0; // reset lastRcv variable
 1fc:	80 91 0c 01 	lds	r24, 0x010C
 200:	10 92 0c 01 	sts	0x010C, r1
				lastRcv |= rcvd1; // store most recent sucessful message
 204:	90 91 0c 01 	lds	r25, 0x010C
 208:	80 91 07 01 	lds	r24, 0x0107
 20c:	89 2b       	or	r24, r25
 20e:	80 93 0c 01 	sts	0x010C, r24
				PORTB |= (1<<PORTB0); // second LED for correct message
 212:	28 9a       	sbi	0x05, 0	; 5
			}
		}
	}
	// if start bit was not legitimate, exit ISR

	rcvd1 = 0; // reset variables for next ISR call
 214:	10 92 07 01 	sts	0x0107, r1
	rcvd2 = 0;
 218:	10 92 0a 01 	sts	0x010A, r1
	bits_rcvd = 0;
 21c:	10 92 09 01 	sts	0x0109, r1
 220:	10 92 08 01 	sts	0x0108, r1

} 
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <send_msg>:

void send_msg(char msg) { // timing values/delays are calibrated with other 
 242:	98 2f       	mov	r25, r24
	int bits_sent=0;
	int start_bit=0;
	int new_bit=0;

	TCNT0 = 0; // reset counter value
 244:	16 bc       	out	0x26, r1	; 38

	PORTC |= (1<<PORTC3); // start bit
 246:	43 9a       	sbi	0x08, 3	; 8
	PORTB |= (1<<PORTB2);
 248:	2a 9a       	sbi	0x05, 2	; 5

	while (start_bit==0) {
		if (TCNT0>190) { // end of start bit, start sending message
 24a:	86 b5       	in	r24, 0x26	; 38
 24c:	8f 3b       	cpi	r24, 0xBF	; 191
 24e:	60 f0       	brcs	.+24     	; 0x268 <send_msg+0x26>
			start_bit=1;
			TCNT1=0;
 250:	10 92 85 00 	sts	0x0085, r1
 254:	10 92 84 00 	sts	0x0084, r1
 258:	47 e0       	ldi	r20, 0x07	; 7
 25a:	50 e0       	ldi	r21, 0x00	; 0
			PORTB &= ~(1<<PORTB2);
		}
	}

	while(bits_sent<8) { // send first 8-bit messages
		new_bit = (msg & (1<<(7-bits_sent))) >> (7-bits_sent);
 25c:	69 2f       	mov	r22, r25
 25e:	70 e0       	ldi	r23, 0x00	; 0
		if(new_bit==1) { // turn on LEDs
 260:	e1 e0       	ldi	r30, 0x01	; 1
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	30 e7       	ldi	r19, 0x70	; 112
 266:	06 c0       	rjmp	.+12     	; 0x274 <send_msg+0x32>
	while (start_bit==0) {
		if (TCNT0>190) { // end of start bit, start sending message
			start_bit=1;
			TCNT1=0;
			break;
		} else if (TCNT0>125) { // clear start bit after ~1.5 bit cycles
 268:	86 b5       	in	r24, 0x26	; 38
 26a:	8e 37       	cpi	r24, 0x7E	; 126
 26c:	70 f3       	brcs	.-36     	; 0x24a <send_msg+0x8>
			PORTC &= ~(1<<PORTC3);
 26e:	43 98       	cbi	0x08, 3	; 8
			PORTB &= ~(1<<PORTB2);
 270:	2a 98       	cbi	0x05, 2	; 5
 272:	eb cf       	rjmp	.-42     	; 0x24a <send_msg+0x8>
		}
	}

	while(bits_sent<8) { // send first 8-bit messages
		new_bit = (msg & (1<<(7-bits_sent))) >> (7-bits_sent);
		if(new_bit==1) { // turn on LEDs
 274:	cf 01       	movw	r24, r30
 276:	04 2e       	mov	r0, r20
 278:	02 c0       	rjmp	.+4      	; 0x27e <send_msg+0x3c>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	0a 94       	dec	r0
 280:	e2 f7       	brpl	.-8      	; 0x27a <send_msg+0x38>
 282:	86 23       	and	r24, r22
 284:	97 23       	and	r25, r23
 286:	04 2e       	mov	r0, r20
 288:	02 c0       	rjmp	.+4      	; 0x28e <send_msg+0x4c>
 28a:	95 95       	asr	r25
 28c:	87 95       	ror	r24
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <send_msg+0x48>
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	19 f4       	brne	.+6      	; 0x29c <send_msg+0x5a>
			PORTC |= (1<<PORTC3);
 296:	43 9a       	sbi	0x08, 3	; 8
			PORTB |= (1<<PORTB2);
 298:	2a 9a       	sbi	0x05, 2	; 5
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <send_msg+0x5e>
		} else { // turn off LEDs
			PORTC &= ~(1<<PORTC3);
 29c:	43 98       	cbi	0x08, 3	; 8
			PORTB &= ~(1<<PORTB2);
 29e:	2a 98       	cbi	0x05, 2	; 5
 2a0:	83 2f       	mov	r24, r19
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <send_msg+0x60>
 2a6:	41 50       	subi	r20, 0x01	; 1
 2a8:	50 40       	sbci	r21, 0x00	; 0
			PORTC &= ~(1<<PORTC3);
			PORTB &= ~(1<<PORTB2);
		}
	}

	while(bits_sent<8) { // send first 8-bit messages
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	4f 3f       	cpi	r20, 0xFF	; 255
 2ae:	58 07       	cpc	r21, r24
 2b0:	09 f7       	brne	.-62     	; 0x274 <send_msg+0x32>
 2b2:	47 e0       	ldi	r20, 0x07	; 7
 2b4:	50 e0       	ldi	r21, 0x00	; 0
		_delay_us(42); // wait one bit
	}

	while(bits_sent<16) { // send first 8-bit messages
		new_bit = (msg & (1<<(15-bits_sent))) >> (15-bits_sent);
		if(new_bit==1) { // turn on LEDs
 2b6:	e1 e0       	ldi	r30, 0x01	; 1
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	30 e7       	ldi	r19, 0x70	; 112
 2bc:	cf 01       	movw	r24, r30
 2be:	04 2e       	mov	r0, r20
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <send_msg+0x84>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	0a 94       	dec	r0
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <send_msg+0x80>
 2ca:	86 23       	and	r24, r22
 2cc:	97 23       	and	r25, r23
 2ce:	04 2e       	mov	r0, r20
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <send_msg+0x94>
 2d2:	95 95       	asr	r25
 2d4:	87 95       	ror	r24
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <send_msg+0x90>
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	19 f4       	brne	.+6      	; 0x2e4 <send_msg+0xa2>
			PORTC |= (1<<PORTC3);
 2de:	43 9a       	sbi	0x08, 3	; 8
			PORTB |= (1<<PORTB2);
 2e0:	2a 9a       	sbi	0x05, 2	; 5
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <send_msg+0xa6>
		} else { // turn off LEDs
			PORTC &= ~(1<<PORTC3);
 2e4:	43 98       	cbi	0x08, 3	; 8
			PORTB &= ~(1<<PORTB2);
 2e6:	2a 98       	cbi	0x05, 2	; 5
 2e8:	83 2f       	mov	r24, r19
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <send_msg+0xa8>
 2ee:	41 50       	subi	r20, 0x01	; 1
 2f0:	50 40       	sbci	r21, 0x00	; 0
		}
		bits_sent+=1;
		_delay_us(42); // wait one bit
	}

	while(bits_sent<16) { // send first 8-bit messages
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	4f 3f       	cpi	r20, 0xFF	; 255
 2f6:	58 07       	cpc	r21, r24
 2f8:	09 f7       	brne	.-62     	; 0x2bc <send_msg+0x7a>
		}
		bits_sent+=1;
		_delay_us(42); // wait one bit
	}

	PORTC &= ~(1<<PORTC3); // ensure LEDs are turned off after last bit of the message
 2fa:	43 98       	cbi	0x08, 3	; 8
	PORTB &= ~(1<<PORTB2);
 2fc:	2a 98       	cbi	0x05, 2	; 5
	
}
 2fe:	08 95       	ret

00000300 <main>:
static volatile char toSend = 0xAA; // message variables
static volatile char toRcv = 0;

enum states state = IDLE;

int main(void) {
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29

	DDRB=0;
 306:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
 308:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
 30a:	87 e0       	ldi	r24, 0x07	; 7
 30c:	84 b9       	out	0x04, r24	; 4

	DDRB |= (1<<7); // enable EPM control pins
 30e:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
 310:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
 312:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
 314:	2f 98       	cbi	0x05, 7	; 5

	DDRC=0; // enable IR LED
 316:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
 318:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
 31a:	88 e0       	ldi	r24, 0x08	; 8
 31c:	87 b9       	out	0x07, r24	; 7

	cli(); // disable interrupts
 31e:	f8 94       	cli

	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
 326:	8b e0       	ldi	r24, 0x0B	; 11
 328:	80 bf       	out	0x30, r24	; 48

	// Initialize timer0 for timing (1/8 prescaler, 8-bit timer rolls over at ~120 Hz)
	TCCR0B |= (0<<CS02)|(1<<CS01)|(0<<CS00);
 32a:	85 b5       	in	r24, 0x25	; 37
 32c:	82 60       	ori	r24, 0x02	; 2
 32e:	85 bd       	out	0x25, r24	; 37
    
	sei(); // enable interrupts
 330:	78 94       	sei

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
 332:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
 334:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
 336:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<PORTC3); // IR
 338:	43 9a       	sbi	0x08, 3	; 8
 33a:	80 ed       	ldi	r24, 0xD0	; 208
 33c:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 33e:	28 ec       	ldi	r18, 0xC8	; 200
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	f9 01       	movw	r30, r18
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <main+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 348:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 34a:	d9 f7       	brne	.-10     	; 0x342 <main+0x42>

	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
 34c:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
 34e:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
 350:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1<<PORTC3);	
 352:	43 98       	cbi	0x08, 3	; 8
 354:	c0 e0       	ldi	r28, 0x00	; 0
 356:	d0 e0       	ldi	r29, 0x00	; 0
				ii++; // wait to receive messages

				//_delay_ms(100);
				//state = SENDING;
				if (ii>=20000) { // send a message once in a while (10000 loops -> ~16ms)
					state = SENDING;
 358:	11 e0       	ldi	r17, 0x01	; 1
	PORTB &= ~(1<<PORTB2);
	PORTC &= ~(1<<PORTC3);	

	int ii=0;
	while(1) {
		switch(state) {
 35a:	80 91 02 01 	lds	r24, 0x0102
 35e:	88 23       	and	r24, r24
 360:	59 f0       	breq	.+22     	; 0x378 <main+0x78>
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	e1 f7       	brne	.-8      	; 0x35e <main+0x5e>
			case SENDING:

				//PORTB |= ( (1<<PORTB0) | (1<<PORTB1) ); // debugging LEDs
				
				cli(); // disable interrupts temporarily to ensure a complete message is sent
 366:	f8 94       	cli
				send_msg(toSend); 
 368:	80 91 00 01 	lds	r24, 0x0100
 36c:	0e 94 21 01 	call	0x242	; 0x242 <send_msg>
				sei(); 
 370:	78 94       	sei

				state = IDLE; // return to IDLE state
 372:	10 92 02 01 	sts	0x0102, r1
 376:	f1 cf       	rjmp	.-30     	; 0x35a <main+0x5a>
				//PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) );

				break;

			case IDLE:
				ii++; // wait to receive messages
 378:	21 96       	adiw	r28, 0x01	; 1

				//_delay_ms(100);
				//state = SENDING;
				if (ii>=20000) { // send a message once in a while (10000 loops -> ~16ms)
 37a:	8e e4       	ldi	r24, 0x4E	; 78
 37c:	c0 32       	cpi	r28, 0x20	; 32
 37e:	d8 07       	cpc	r29, r24
 380:	64 f3       	brlt	.-40     	; 0x35a <main+0x5a>
					state = SENDING;
 382:	10 93 02 01 	sts	0x0102, r17
 386:	c0 e0       	ldi	r28, 0x00	; 0
 388:	d0 e0       	ldi	r29, 0x00	; 0
 38a:	e7 cf       	rjmp	.-50     	; 0x35a <main+0x5a>

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
