
IRComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001d8  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000042  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000038a  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000019d  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000322  00000000  00000000  000007d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000afc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000184  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c1  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001c8  00000000  00000000  00000d81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_23>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  8e:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_23>:
		}
	}

}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1

	rcvd1 = 0; // reset variables for next ISR call
	rcvd2 = 0;
	bits_rcvd = 0; */

} 
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <send_msg>:

void send_msg(char msg) { // timing values/delays are calibrated with other 
  aa:	47 e0       	ldi	r20, 0x07	; 7
  ac:	50 e0       	ldi	r21, 0x00	; 0
			PORTB &= ~(1<<PORTB2);
		}
	} */

	while(bits_sent<8) { // send first 8-bit messages
		new_bit = (msg & (1<<(7-bits_sent))) >> (7-bits_sent);
  ae:	e8 2f       	mov	r30, r24
  b0:	f0 e0       	ldi	r31, 0x00	; 0
		if(new_bit==1) { // turn on LEDs
  b2:	a1 e0       	ldi	r26, 0x01	; 1
  b4:	b0 e0       	ldi	r27, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	68 ec       	ldi	r22, 0xC8	; 200
  b8:	70 e0       	ldi	r23, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ba:	3d ef       	ldi	r19, 0xFD	; 253
  bc:	cd 01       	movw	r24, r26
  be:	04 2e       	mov	r0, r20
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <send_msg+0x1c>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <send_msg+0x18>
  ca:	8e 23       	and	r24, r30
  cc:	9f 23       	and	r25, r31
  ce:	04 2e       	mov	r0, r20
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <send_msg+0x2c>
  d2:	95 95       	asr	r25
  d4:	87 95       	ror	r24
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <send_msg+0x28>
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	11 f4       	brne	.+4      	; 0xe2 <send_msg+0x38>
			PORTC |= (1<<PORTC3);
  de:	43 9a       	sbi	0x08, 3	; 8
			PORTB |= (1<<PORTB2);
  e0:	2a 9a       	sbi	0x05, 2	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e2:	cb 01       	movw	r24, r22
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <send_msg+0x3a>
			_delay_us(100);
		} else { // turn off LEDs
			_delay_us(100);
		}
		PORTC &= ~(1<<PORTC3);
  e8:	43 98       	cbi	0x08, 3	; 8
		PORTB &= ~(1<<PORTB2);
  ea:	2a 98       	cbi	0x05, 2	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ec:	83 2f       	mov	r24, r19
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <send_msg+0x44>
  f2:	41 50       	subi	r20, 0x01	; 1
  f4:	50 40       	sbci	r21, 0x00	; 0
			PORTC &= ~(1<<PORTC3);
			PORTB &= ~(1<<PORTB2);
		}
	} */

	while(bits_sent<8) { // send first 8-bit messages
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	4f 3f       	cpi	r20, 0xFF	; 255
  fa:	58 07       	cpc	r21, r24
  fc:	f9 f6       	brne	.-66     	; 0xbc <send_msg+0x12>
  fe:	47 e0       	ldi	r20, 0x07	; 7
 100:	50 e0       	ldi	r21, 0x00	; 0
		_delay_us(95); // wait one bit
	}

	while(bits_sent<16) { // send first 8-bit messages
		new_bit = (msg & (1<<(15-bits_sent))) >> (15-bits_sent);
		if(new_bit==1) { // turn on LEDs
 102:	a1 e0       	ldi	r26, 0x01	; 1
 104:	b0 e0       	ldi	r27, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 106:	68 ec       	ldi	r22, 0xC8	; 200
 108:	70 e0       	ldi	r23, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 10a:	3d ef       	ldi	r19, 0xFD	; 253
 10c:	cd 01       	movw	r24, r26
 10e:	04 2e       	mov	r0, r20
 110:	02 c0       	rjmp	.+4      	; 0x116 <send_msg+0x6c>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <send_msg+0x68>
 11a:	8e 23       	and	r24, r30
 11c:	9f 23       	and	r25, r31
 11e:	04 2e       	mov	r0, r20
 120:	02 c0       	rjmp	.+4      	; 0x126 <send_msg+0x7c>
 122:	95 95       	asr	r25
 124:	87 95       	ror	r24
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <send_msg+0x78>
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	11 f4       	brne	.+4      	; 0x132 <send_msg+0x88>
			PORTC |= (1<<PORTC3);
 12e:	43 9a       	sbi	0x08, 3	; 8
			PORTB |= (1<<PORTB2);
 130:	2a 9a       	sbi	0x05, 2	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 132:	cb 01       	movw	r24, r22
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <send_msg+0x8a>
			_delay_us(100);
		} else { // turn off LEDs
			_delay_us(100);
		}
		PORTC &= ~(1<<PORTC3);
 138:	43 98       	cbi	0x08, 3	; 8
		PORTB &= ~(1<<PORTB2);
 13a:	2a 98       	cbi	0x05, 2	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 13c:	83 2f       	mov	r24, r19
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <send_msg+0x94>
 142:	41 50       	subi	r20, 0x01	; 1
 144:	50 40       	sbci	r21, 0x00	; 0
		PORTB &= ~(1<<PORTB2);
		bits_sent+=1;
		_delay_us(95); // wait one bit
	}

	while(bits_sent<16) { // send first 8-bit messages
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	4f 3f       	cpi	r20, 0xFF	; 255
 14a:	58 07       	cpc	r21, r24
 14c:	f9 f6       	brne	.-66     	; 0x10c <send_msg+0x62>
	}

	//PORTC &= ~(1<<PORTC3); // ensure LEDs are turned off after last bit of the message
	//PORTB &= ~(1<<PORTB2);
	
}
 14e:	08 95       	ret

00000150 <main>:
static volatile char toSend = 0xAA; // message variables
static volatile char toRcv = 0xAA;

enum states state = SENDING; //IDLE;

int main(void) {
 150:	cf 93       	push	r28
 152:	df 93       	push	r29

	DDRB=0;
 154:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
 156:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
 158:	87 e0       	ldi	r24, 0x07	; 7
 15a:	84 b9       	out	0x04, r24	; 4

	DDRB |= (1<<7); // enable EPM control pins
 15c:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
 15e:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
 160:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
 162:	2f 98       	cbi	0x05, 7	; 5

	DDRC=0; // enable IR LED
 164:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
 166:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	87 b9       	out	0x07, r24	; 7

	cli(); // disable interrupts
 16c:	f8 94       	cli

	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
 174:	8b e0       	ldi	r24, 0x0B	; 11
 176:	80 bf       	out	0x30, r24	; 48

	// Initialize timer0 for timing (1/8 prescaler, 8-bit timer rolls over at ~120 Hz)
	TCCR0B |= (0<<CS02)|(1<<CS01)|(0<<CS00);
 178:	85 b5       	in	r24, 0x25	; 37
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	85 bd       	out	0x25, r24	; 37

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
 17e:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
 180:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
 182:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<PORTC3); // IR
 184:	43 9a       	sbi	0x08, 3	; 8
 186:	80 ed       	ldi	r24, 0xD0	; 208
 188:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18a:	28 ec       	ldi	r18, 0xC8	; 200
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	f9 01       	movw	r30, r18
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 194:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 196:	d9 f7       	brne	.-10     	; 0x18e <main+0x3e>

	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
 198:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
 19a:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
 19c:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1<<PORTC3);
 19e:	43 98       	cbi	0x08, 3	; 8

	sei(); // enable interrupts	
 1a0:	78 94       	sei

	int ii=0;
	while(1) {
		switch(state) {
 1a2:	80 91 00 01 	lds	r24, 0x0100
 1a6:	88 23       	and	r24, r24
 1a8:	71 f0       	breq	.+28     	; 0x1c6 <main+0x76>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x56>
 1ae:	c0 e1       	ldi	r28, 0x10	; 16
 1b0:	d7 e2       	ldi	r29, 0x27	; 39
			case SENDING:

				//PORTB |= ( (1<<PORTB0) | (1<<PORTB1) ); // debugging LEDs
				
				while(1) {
					cli(); // disable interrupts temporarily to ensure a complete message is sent
 1b2:	f8 94       	cli
					send_msg(toSend); 
 1b4:	80 91 01 01 	lds	r24, 0x0101
 1b8:	0e 94 55 00 	call	0xaa	; 0xaa <send_msg>
					sei(); 
 1bc:	78 94       	sei
 1be:	ce 01       	movw	r24, r28
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x70>
 1c4:	f6 cf       	rjmp	.-20     	; 0x1b2 <main+0x62>
					ii=0;
				} */

				while(1) {

					if (ACSR & (1<<ACO)) {
 1c6:	00 b6       	in	r0, 0x30	; 48
 1c8:	05 fe       	sbrs	r0, 5
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <main+0x80>

						PORTB |= (1<<PORTB2); 
 1cc:	2a 9a       	sbi	0x05, 2	; 5
 1ce:	fb cf       	rjmp	.-10     	; 0x1c6 <main+0x76>

					} else {

						PORTB &= ~(1<<PORTB2);
 1d0:	2a 98       	cbi	0x05, 2	; 5
 1d2:	f9 cf       	rjmp	.-14     	; 0x1c6 <main+0x76>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>
