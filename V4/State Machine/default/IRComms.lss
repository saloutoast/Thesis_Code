
IRComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  00000378  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000042  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000475  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000188  00000000  00000000  0000084f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b6  00000000  00000000  000009d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000186  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017a  00000000  00000000  00000f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_23>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 23 01 	call	0x246	; 0x246 <main>
  9e:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_23>:
		}
	}

}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31

	//PORTB &= ~(1<<PORTB2); // ensure success LED is off
	PORTB &= ~(1<<PORTB1);
  c8:	29 98       	cbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ca:	80 ef       	ldi	r24, 0xF0	; 240
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <__vector_23+0x26>
		//PORTB ^= (1<<PORTB2); // toggle LED for each received bit
		
		if (ACSR & (1<<ACO)) { // either set or clear received bit
			rcvd |= (1<<(7-bits_rcvd));
		} else {
			rcvd &= ~(1<<(7-bits_rcvd));
  d0:	67 e0       	ldi	r22, 0x07	; 7
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d8:	ec e7       	ldi	r30, 0x7C	; 124
  da:	f1 e0       	ldi	r31, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  dc:	30 ef       	ldi	r19, 0xF0	; 240
  de:	42 c0       	rjmp	.+132    	; 0x164 <__vector_23+0xbe>
	_delay_us(90);
	while(bits_rcvd<8) {

		//PORTB ^= (1<<PORTB2); // toggle LED for each received bit
		
		if (ACSR & (1<<ACO)) { // either set or clear received bit
  e0:	00 b6       	in	r0, 0x30	; 48
  e2:	05 fe       	sbrs	r0, 5
  e4:	14 c0       	rjmp	.+40     	; 0x10e <__vector_23+0x68>
			rcvd |= (1<<(7-bits_rcvd));
  e6:	20 91 04 01 	lds	r18, 0x0104
  ea:	80 91 05 01 	lds	r24, 0x0105
  ee:	90 91 06 01 	lds	r25, 0x0106
  f2:	db 01       	movw	r26, r22
  f4:	a8 1b       	sub	r26, r24
  f6:	b9 0b       	sbc	r27, r25
  f8:	cd 01       	movw	r24, r26
  fa:	da 01       	movw	r26, r20
  fc:	02 c0       	rjmp	.+4      	; 0x102 <__vector_23+0x5c>
  fe:	aa 0f       	add	r26, r26
 100:	bb 1f       	adc	r27, r27
 102:	8a 95       	dec	r24
 104:	e2 f7       	brpl	.-8      	; 0xfe <__vector_23+0x58>
 106:	2a 2b       	or	r18, r26
 108:	20 93 04 01 	sts	0x0104, r18
 10c:	15 c0       	rjmp	.+42     	; 0x138 <__vector_23+0x92>
		} else {
			rcvd &= ~(1<<(7-bits_rcvd));
 10e:	20 91 04 01 	lds	r18, 0x0104
 112:	80 91 05 01 	lds	r24, 0x0105
 116:	90 91 06 01 	lds	r25, 0x0106
 11a:	db 01       	movw	r26, r22
 11c:	a8 1b       	sub	r26, r24
 11e:	b9 0b       	sbc	r27, r25
 120:	cd 01       	movw	r24, r26
 122:	da 01       	movw	r26, r20
 124:	02 c0       	rjmp	.+4      	; 0x12a <__vector_23+0x84>
 126:	aa 0f       	add	r26, r26
 128:	bb 1f       	adc	r27, r27
 12a:	8a 95       	dec	r24
 12c:	e2 f7       	brpl	.-8      	; 0x126 <__vector_23+0x80>
 12e:	cd 01       	movw	r24, r26
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	80 93 04 01 	sts	0x0104, r24
		}
		bits_rcvd+=1;
 138:	80 91 05 01 	lds	r24, 0x0105
 13c:	90 91 06 01 	lds	r25, 0x0106
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	90 93 06 01 	sts	0x0106, r25
 146:	80 93 05 01 	sts	0x0105, r24
		if (bits_rcvd==8) { 
 14a:	80 91 05 01 	lds	r24, 0x0105
 14e:	90 91 06 01 	lds	r25, 0x0106
 152:	08 97       	sbiw	r24, 0x08	; 8
 154:	21 f4       	brne	.+8      	; 0x15e <__vector_23+0xb8>
 156:	83 2f       	mov	r24, r19
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <__vector_23+0xb2>
 15c:	03 c0       	rjmp	.+6      	; 0x164 <__vector_23+0xbe>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15e:	cf 01       	movw	r24, r30
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <__vector_23+0xba>

	//PORTB &= ~(1<<PORTB2); // ensure success LED is off
	PORTB &= ~(1<<PORTB1);

	_delay_us(90);
	while(bits_rcvd<8) {
 164:	80 91 05 01 	lds	r24, 0x0105
 168:	90 91 06 01 	lds	r25, 0x0106
 16c:	08 97       	sbiw	r24, 0x08	; 8
 16e:	0c f4       	brge	.+2      	; 0x172 <__vector_23+0xcc>
 170:	b7 cf       	rjmp	.-146    	; 0xe0 <__vector_23+0x3a>
		if (bits_rcvd==8) { 
			_delay_us(90); 
		} else { _delay_us(190); }
	}

	bits_rcvd = 0;
 172:	10 92 06 01 	sts	0x0106, r1
 176:	10 92 05 01 	sts	0x0105, r1
	PORTB |= (1<<PORTB2);
 17a:	2a 9a       	sbi	0x05, 2	; 5

	rcv_sx = (rcvd | 0b01111110);
 17c:	80 91 04 01 	lds	r24, 0x0104
 180:	8e 67       	ori	r24, 0x7E	; 126
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 08 01 	sts	0x0108, r25
 188:	80 93 07 01 	sts	0x0107, r24
	if (rcv_sx==0xFF) { // test that first and last bits are 1
 18c:	80 91 07 01 	lds	r24, 0x0107
 190:	90 91 08 01 	lds	r25, 0x0108
 194:	8f 3f       	cpi	r24, 0xFF	; 255
 196:	91 05       	cpc	r25, r1
 198:	79 f4       	brne	.+30     	; 0x1b8 <__vector_23+0x112>
		if (rcvd==toRcv1) {
 19a:	90 91 04 01 	lds	r25, 0x0104
 19e:	80 91 01 01 	lds	r24, 0x0101
 1a2:	98 17       	cp	r25, r24
 1a4:	11 f4       	brne	.+4      	; 0x1aa <__vector_23+0x104>
			PORTB |= (1<<PORTB1);
 1a6:	29 9a       	sbi	0x05, 1	; 5
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <__vector_23+0x112>
		} else if (rcvd==toRcv2) {
 1aa:	90 91 04 01 	lds	r25, 0x0104
 1ae:	80 91 02 01 	lds	r24, 0x0102
 1b2:	98 17       	cp	r25, r24
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <__vector_23+0x112>
			PORTB |= (1<<PORTB0);
 1b6:	28 9a       	sbi	0x05, 0	; 5
		}
	}
	rcv_sx = 0;
 1b8:	10 92 08 01 	sts	0x0108, r1
 1bc:	10 92 07 01 	sts	0x0107, r1
 1c0:	80 e2       	ldi	r24, 0x20	; 32
 1c2:	9e e4       	ldi	r25, 0x4E	; 78
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <__vector_23+0x11e>

	_delay_ms(10);
	PORTB &= ~( (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0) );
 1c8:	85 b1       	in	r24, 0x05	; 5
 1ca:	88 7f       	andi	r24, 0xF8	; 248
 1cc:	85 b9       	out	0x05, r24	; 5

} 
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <send_msg>:

void send_msg(char msg) { // timing values/delays are calibrated with other 
 1f0:	47 e0       	ldi	r20, 0x07	; 7
 1f2:	50 e0       	ldi	r21, 0x00	; 0
		}
	} */

	while(bits_sent<8) { // send first 8-bit messages
		new_bit = (msg & (1<<(7-bits_sent))) >> (7-bits_sent);
		if(new_bit==1) { // turn on LEDs
 1f4:	a1 e0       	ldi	r26, 0x01	; 1
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	68 2f       	mov	r22, r24
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	e8 ec       	ldi	r30, 0xC8	; 200
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 200:	35 ef       	ldi	r19, 0xF5	; 245
 202:	cd 01       	movw	r24, r26
 204:	04 2e       	mov	r0, r20
 206:	02 c0       	rjmp	.+4      	; 0x20c <send_msg+0x1c>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <send_msg+0x18>
 210:	86 23       	and	r24, r22
 212:	97 23       	and	r25, r23
 214:	04 2e       	mov	r0, r20
 216:	02 c0       	rjmp	.+4      	; 0x21c <send_msg+0x2c>
 218:	95 95       	asr	r25
 21a:	87 95       	ror	r24
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <send_msg+0x28>
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	11 f4       	brne	.+4      	; 0x228 <send_msg+0x38>
			PORTC |= (1<<PORTC3);
 224:	43 9a       	sbi	0x08, 3	; 8
			PORTB |= (1<<PORTB2);
 226:	2a 9a       	sbi	0x05, 2	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 228:	cf 01       	movw	r24, r30
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <send_msg+0x3a>
			_delay_us(100);
		} else { // turn off LEDs
			_delay_us(100);
		}
		PORTC &= ~(1<<PORTC3);
 22e:	43 98       	cbi	0x08, 3	; 8
		PORTB &= ~(1<<PORTB2);
 230:	2a 98       	cbi	0x05, 2	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 232:	83 2f       	mov	r24, r19
 234:	8a 95       	dec	r24
 236:	f1 f7       	brne	.-4      	; 0x234 <send_msg+0x44>
 238:	41 50       	subi	r20, 0x01	; 1
 23a:	50 40       	sbci	r21, 0x00	; 0
			PORTC &= ~(1<<PORTC3);
			PORTB &= ~(1<<PORTB2);
		}
	} */

	while(bits_sent<8) { // send first 8-bit messages
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	4f 3f       	cpi	r20, 0xFF	; 255
 240:	58 07       	cpc	r21, r24
 242:	f9 f6       	brne	.-66     	; 0x202 <send_msg+0x12>
		PORTB &= ~(1<<PORTB2);
		bits_sent+=1;
		_delay_us(95); // wait one bit
	}*/
	
}
 244:	08 95       	ret

00000246 <main>:
static volatile char toRcv1 = 0xDB;
static volatile char toRcv2 = 0xA5;

enum states state = SENDING; //IDLE;

int main(void) {
 246:	cf 93       	push	r28
 248:	df 93       	push	r29

	DDRB=0;
 24a:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
 24c:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
 24e:	87 e0       	ldi	r24, 0x07	; 7
 250:	84 b9       	out	0x04, r24	; 4

	DDRB |= (1<<7); // enable EPM control pins
 252:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
 254:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
 256:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
 258:	2f 98       	cbi	0x05, 7	; 5

	DDRC=0; // enable IR LED
 25a:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
 25c:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
 25e:	88 e0       	ldi	r24, 0x08	; 8
 260:	87 b9       	out	0x07, r24	; 7

	cli(); // disable interrupts
 262:	f8 94       	cli

	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
 26a:	8b e0       	ldi	r24, 0x0B	; 11
 26c:	80 bf       	out	0x30, r24	; 48

	// Initialize timer0 for timing (1/8 prescaler, 8-bit timer rolls over at ~120 Hz)
	TCCR0B |= (0<<CS02)|(1<<CS01)|(0<<CS00);
 26e:	85 b5       	in	r24, 0x25	; 37
 270:	82 60       	ori	r24, 0x02	; 2
 272:	85 bd       	out	0x25, r24	; 37

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
 274:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
 276:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
 278:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<PORTC3); // IR
 27a:	43 9a       	sbi	0x08, 3	; 8
 27c:	80 ed       	ldi	r24, 0xD0	; 208
 27e:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 280:	28 ec       	ldi	r18, 0xC8	; 200
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	f9 01       	movw	r30, r18
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <main+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28c:	d9 f7       	brne	.-10     	; 0x284 <main+0x3e>

	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
 28e:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
 290:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
 292:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1<<PORTC3);
 294:	43 98       	cbi	0x08, 3	; 8

	sei(); // enable interrupts	
 296:	78 94       	sei

	int ii=0;
	while(1) {
		switch(state) {
 298:	80 91 00 01 	lds	r24, 0x0100
 29c:	88 23       	and	r24, r24
 29e:	e9 f0       	breq	.+58     	; 0x2da <main+0x94>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x56>
 2a4:	c8 ec       	ldi	r28, 0xC8	; 200
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
			case SENDING:

				//PORTB |= ( (1<<PORTB0) | (1<<PORTB1) ); // debugging LEDs
				
				while(1) {
					cli(); // disable interrupts temporarily to ensure a complete message is sent
 2a8:	f8 94       	cli
					send_msg(0xA5); 
 2aa:	85 ea       	ldi	r24, 0xA5	; 165
 2ac:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <send_msg>
					sei(); 
 2b0:	78 94       	sei
 2b2:	80 ed       	ldi	r24, 0xD0	; 208
 2b4:	97 e0       	ldi	r25, 0x07	; 7
 2b6:	fe 01       	movw	r30, r28
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2be:	d9 f7       	brne	.-10     	; 0x2b6 <main+0x70>
					_delay_ms(200);
					cli();
 2c0:	f8 94       	cli
					send_msg(0xDB);
 2c2:	8b ed       	ldi	r24, 0xDB	; 219
 2c4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <send_msg>
					sei();
 2c8:	78 94       	sei
 2ca:	80 ed       	ldi	r24, 0xD0	; 208
 2cc:	97 e0       	ldi	r25, 0x07	; 7
 2ce:	fe 01       	movw	r30, r28
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <main+0x88>
 2d8:	e7 cf       	rjmp	.-50     	; 0x2a8 <main+0x62>
 2da:	ff cf       	rjmp	.-2      	; 0x2da <main+0x94>

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
