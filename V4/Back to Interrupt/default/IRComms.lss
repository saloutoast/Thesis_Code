
IRComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000570  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800102  00800102  00000606  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000606  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000004a  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002bf  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000011f  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041f  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000e70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018e  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  0000104e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_23>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
static volatile int time2 = 0;
static volatile int period = 0;
static volatile int msg_rcvd = 0;
static volatile int rcv_time = 0;

int main(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29

	DDRB=0;
  aa:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
  ac:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	84 b9       	out	0x04, r24	; 4

	DDRB |= (1<<7); // enable EPM control pins
  b2:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
  b4:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
  b6:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
  b8:	2f 98       	cbi	0x05, 7	; 5

	DDRC=0; // enable IR LED
  ba:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
  bc:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
  be:	88 e0       	ldi	r24, 0x08	; 8
  c0:	87 b9       	out	0x07, r24	; 7

	cli(); // disable interrupts
  c2:	f8 94       	cli

	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
  ca:	8b e0       	ldi	r24, 0x0B	; 11
  cc:	80 bf       	out	0x30, r24	; 48

	// Initialize timer0 for timing sending of messages (1/8 prescaler, 8-bit timer rolls over at ~3.9 kHz Hz)
	TCCR0A |= (1<<WGM01); // // do not change any output pin, clear at compare match with OCR0A
  ce:	84 b5       	in	r24, 0x24	; 36
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0<<CS02)|(1<<CS01)|(0<<CS00); // prescaler of 1/8
  d4:	85 b5       	in	r24, 0x25	; 37
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	85 bd       	out	0x25, r24	; 37
	OCR0A = 100; // interrupt every 100 counts, for sending a new bit every 2 cycles
  da:	84 e6       	ldi	r24, 0x64	; 100
  dc:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
  de:	80 91 6e 00 	lds	r24, 0x006E
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 93 6e 00 	sts	0x006E, r24

	// Initialize timer1 for neighbor-marking, based on times of received messages
	TCCR1B |= (1<<CS12)|(0<<CS11)|(1<<CS10); // 1/1024 prescaler, counts at ~7.8kHz, 16-bit timer
  e8:	80 91 81 00 	lds	r24, 0x0081
  ec:	85 60       	ori	r24, 0x05	; 5
  ee:	80 93 81 00 	sts	0x0081, r24

	// Initialize timer2 for timing receiving of messages (1/128 prescaler, 8-bit timer rolls over at ~250 Hz )
	TCCR2A |= (1<<WGM21); // do not change any output pin, clear at compare match with OCR2A
  f2:	80 91 b0 00 	lds	r24, 0x00B0
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = (1<<OCIE2A); // compare match on OCR2A
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 70 00 	sts	0x0070, r24
    OCR2A = 200; // compare every 200 counts (every 3.2ms, 2x length of message)
 102:	88 ec       	ldi	r24, 0xC8	; 200
 104:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= (1<<CS22)|(0<<CS21)|(1<<CS20); // prescaler of 1/128: count every 16us
 108:	80 91 b1 00 	lds	r24, 0x00B1
 10c:	85 60       	ori	r24, 0x05	; 5
 10e:	80 93 b1 00 	sts	0x00B1, r24

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
 112:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
 114:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
 116:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<PORTC3); // IR
 118:	43 9a       	sbi	0x08, 3	; 8
 11a:	80 ed       	ldi	r24, 0xD0	; 208
 11c:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11e:	28 ec       	ldi	r18, 0xC8	; 200
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	f9 01       	movw	r30, r18
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x7e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 128:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12a:	d9 f7       	brne	.-10     	; 0x122 <main+0x7c>

	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
 12c:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
 12e:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
 130:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1<<PORTC3);
 132:	43 98       	cbi	0x08, 3	; 8
	
	sei(); // enable interrupts	
 134:	78 94       	sei
 136:	c0 e0       	ldi	r28, 0x00	; 0
 138:	d0 e0       	ldi	r29, 0x00	; 0
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
	int ready = 0;
	int cur_time = 0;

	while(1) {
		//neighbor marking based on times of messages received, use Timer1
		if (msg_rcvd==2) { // period is calculated
 142:	80 91 0f 01 	lds	r24, 0x010F
 146:	90 91 10 01 	lds	r25, 0x0110
 14a:	02 97       	sbiw	r24, 0x02	; 2
 14c:	d1 f7       	brne	.-12     	; 0x142 <main+0x9c>

			if (ready==0) {
 14e:	23 2b       	or	r18, r19
 150:	a1 f4       	brne	.+40     	; 0x17a <main+0xd4>
				near = period/4; 
 152:	80 91 15 01 	lds	r24, 0x0115
 156:	90 91 16 01 	lds	r25, 0x0116
 15a:	64 e0       	ldi	r22, 0x04	; 4
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	0e 94 8f 02 	call	0x51e	; 0x51e <__divmodhi4>
 162:	9b 01       	movw	r18, r22
 164:	eb 01       	movw	r28, r22
				far = near + (period/2);
 166:	80 91 15 01 	lds	r24, 0x0115
 16a:	90 91 16 01 	lds	r25, 0x0116
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 8f 02 	call	0x51e	; 0x51e <__divmodhi4>
 176:	62 0f       	add	r22, r18
 178:	73 1f       	adc	r23, r19
				ready = 1;
			}
			
			if (rcv_sx==1) { // got a new message
 17a:	80 91 0a 01 	lds	r24, 0x010A
 17e:	90 91 0b 01 	lds	r25, 0x010B
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	e1 f6       	brne	.-72     	; 0x142 <main+0x9c>

				// if the LEDs are in line with the other module
				cur_time = TCNT1;
 18a:	40 91 84 00 	lds	r20, 0x0084
 18e:	50 91 85 00 	lds	r21, 0x0085
				if ( ((cur_time < (near+20))&(cur_time > (near-20))) | ((cur_time < (far+20))&(cur_time > (far-20))) ) {
 192:	e0 e0       	ldi	r30, 0x00	; 0
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	cb 01       	movw	r24, r22
 198:	43 96       	adiw	r24, 0x13	; 19
 19a:	84 17       	cp	r24, r20
 19c:	95 07       	cpc	r25, r21
 19e:	14 f0       	brlt	.+4      	; 0x1a4 <main+0xfe>
 1a0:	e1 e0       	ldi	r30, 0x01	; 1
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	cb 01       	movw	r24, r22
 1aa:	43 97       	sbiw	r24, 0x13	; 19
 1ac:	48 17       	cp	r20, r24
 1ae:	59 07       	cpc	r21, r25
 1b0:	14 f0       	brlt	.+4      	; 0x1b6 <main+0x110>
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	df 01       	movw	r26, r30
 1b8:	a2 23       	and	r26, r18
 1ba:	b3 23       	and	r27, r19
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	ce 01       	movw	r24, r28
 1c2:	43 96       	adiw	r24, 0x13	; 19
 1c4:	84 17       	cp	r24, r20
 1c6:	95 07       	cpc	r25, r21
 1c8:	14 f0       	brlt	.+4      	; 0x1ce <main+0x128>
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	e0 e0       	ldi	r30, 0x00	; 0
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ce 01       	movw	r24, r28
 1d4:	43 97       	sbiw	r24, 0x13	; 19
 1d6:	48 17       	cp	r20, r24
 1d8:	59 07       	cpc	r21, r25
 1da:	14 f0       	brlt	.+4      	; 0x1e0 <main+0x13a>
 1dc:	e1 e0       	ldi	r30, 0x01	; 1
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	2e 23       	and	r18, r30
 1e2:	3f 23       	and	r19, r31
 1e4:	8a 2f       	mov	r24, r26
 1e6:	82 2b       	or	r24, r18
 1e8:	11 f0       	breq	.+4      	; 0x1ee <main+0x148>
					PORTB |= (1<<PORTB0);
 1ea:	28 9a       	sbi	0x05, 0	; 5
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <main+0x14a>
				} else {
					PORTB &= ~(1<<PORTB0);
 1ee:	28 98       	cbi	0x05, 0	; 5
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	a6 cf       	rjmp	.-180    	; 0x142 <main+0x9c>

000001f6 <__vector_23>:

	}

}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25

	if (rcving==0) {
 20c:	80 91 08 01 	lds	r24, 0x0108
 210:	88 23       	and	r24, r24
 212:	89 f4       	brne	.+34     	; 0x236 <__vector_23+0x40>

		TCNT2=0;
 214:	10 92 b2 00 	sts	0x00B2, r1
		rcving=1;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 08 01 	sts	0x0108, r24
		rcvd=0x80;
 21e:	80 e8       	ldi	r24, 0x80	; 128
 220:	80 93 09 01 	sts	0x0109, r24
		ACSR &= ~(1<<ACIS0); // change to falling edge
 224:	80 b7       	in	r24, 0x30	; 48
 226:	8e 7f       	andi	r24, 0xFE	; 254
 228:	80 bf       	out	0x30, r24	; 48
		rcv_sx = 0; // reset success flag
 22a:	10 92 0b 01 	sts	0x010B, r1
 22e:	10 92 0a 01 	sts	0x010A, r1

		//PORTB |= (1<<PORTB0); // clear success LEDs from previous message
		PORTB &= ~(1<<PORTB1);
 232:	29 98       	cbi	0x05, 1	; 5
 234:	e0 c0       	rjmp	.+448    	; 0x3f6 <__vector_23+0x200>
		//PORTB &= ~(1<<PORTB2);

	} else { // first rising edge has been detected (rcving=1)

		if (!(ACSR&(1<<ACIS0))) { // check for first falling edge
 236:	00 b6       	in	r0, 0x30	; 48
 238:	00 fc       	sbrc	r0, 0
 23a:	0d c0       	rjmp	.+26     	; 0x256 <__vector_23+0x60>

			distance = 0;
 23c:	10 92 0c 01 	sts	0x010C, r1
			distance |= TCNT2; // use timer value for distance
 240:	80 91 0c 01 	lds	r24, 0x010C
 244:	90 91 b2 00 	lds	r25, 0x00B2
 248:	98 2b       	or	r25, r24
 24a:	90 93 0c 01 	sts	0x010C, r25
			ACSR |= (1<<ACIS0); // switch back to rising edge
 24e:	80 b7       	in	r24, 0x30	; 48
 250:	81 60       	ori	r24, 0x01	; 1
 252:	80 bf       	out	0x30, r24	; 48
 254:	d0 c0       	rjmp	.+416    	; 0x3f6 <__vector_23+0x200>
		} else { // on subsequent rising edges
			// TODO: add LED debugging for each bit
			//PORTB |= (1<<PORTB0);

			// match rising edges to closest expected time in rcvd
			bit_time = 0;
 256:	10 92 0d 01 	sts	0x010D, r1
			bit_time |= TCNT2; // time that rising edge was detected
 25a:	80 91 0d 01 	lds	r24, 0x010D
 25e:	90 91 b2 00 	lds	r25, 0x00B2
 262:	98 2b       	or	r25, r24
 264:	90 93 0d 01 	sts	0x010D, r25
			
			if ((bit_time>=10)&(bit_time<=17)) { rcvd |= 0x40; }
 268:	80 91 0d 01 	lds	r24, 0x010D
 26c:	90 91 0d 01 	lds	r25, 0x010D
 270:	8a 30       	cpi	r24, 0x0A	; 10
 272:	30 f0       	brcs	.+12     	; 0x280 <__vector_23+0x8a>
 274:	92 31       	cpi	r25, 0x12	; 18
 276:	20 f4       	brcc	.+8      	; 0x280 <__vector_23+0x8a>
 278:	80 91 09 01 	lds	r24, 0x0109
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	3b c0       	rjmp	.+118    	; 0x2f6 <__vector_23+0x100>
			else if ((bit_time>=22)&(bit_time<=29)) { rcvd |= 0x20; }
 280:	80 91 0d 01 	lds	r24, 0x010D
 284:	90 91 0d 01 	lds	r25, 0x010D
 288:	86 31       	cpi	r24, 0x16	; 22
 28a:	30 f0       	brcs	.+12     	; 0x298 <__vector_23+0xa2>
 28c:	9e 31       	cpi	r25, 0x1E	; 30
 28e:	20 f4       	brcc	.+8      	; 0x298 <__vector_23+0xa2>
 290:	80 91 09 01 	lds	r24, 0x0109
 294:	80 62       	ori	r24, 0x20	; 32
 296:	2f c0       	rjmp	.+94     	; 0x2f6 <__vector_23+0x100>
			else if ((bit_time>=35)&(bit_time<=42)) { rcvd |= 0x10; }
 298:	80 91 0d 01 	lds	r24, 0x010D
 29c:	90 91 0d 01 	lds	r25, 0x010D
 2a0:	83 32       	cpi	r24, 0x23	; 35
 2a2:	30 f0       	brcs	.+12     	; 0x2b0 <__vector_23+0xba>
 2a4:	9b 32       	cpi	r25, 0x2B	; 43
 2a6:	20 f4       	brcc	.+8      	; 0x2b0 <__vector_23+0xba>
 2a8:	80 91 09 01 	lds	r24, 0x0109
 2ac:	80 61       	ori	r24, 0x10	; 16
 2ae:	23 c0       	rjmp	.+70     	; 0x2f6 <__vector_23+0x100>
			else if ((bit_time>=47)&(bit_time<=54)) { rcvd |= 0x08; }
 2b0:	80 91 0d 01 	lds	r24, 0x010D
 2b4:	90 91 0d 01 	lds	r25, 0x010D
 2b8:	8f 32       	cpi	r24, 0x2F	; 47
 2ba:	30 f0       	brcs	.+12     	; 0x2c8 <__vector_23+0xd2>
 2bc:	97 33       	cpi	r25, 0x37	; 55
 2be:	20 f4       	brcc	.+8      	; 0x2c8 <__vector_23+0xd2>
 2c0:	80 91 09 01 	lds	r24, 0x0109
 2c4:	88 60       	ori	r24, 0x08	; 8
 2c6:	17 c0       	rjmp	.+46     	; 0x2f6 <__vector_23+0x100>
			else if ((bit_time>=60)&(bit_time<=67)) { rcvd |= 0x04; }
 2c8:	80 91 0d 01 	lds	r24, 0x010D
 2cc:	90 91 0d 01 	lds	r25, 0x010D
 2d0:	8c 33       	cpi	r24, 0x3C	; 60
 2d2:	30 f0       	brcs	.+12     	; 0x2e0 <__vector_23+0xea>
 2d4:	94 34       	cpi	r25, 0x44	; 68
 2d6:	20 f4       	brcc	.+8      	; 0x2e0 <__vector_23+0xea>
 2d8:	80 91 09 01 	lds	r24, 0x0109
 2dc:	84 60       	ori	r24, 0x04	; 4
 2de:	0b c0       	rjmp	.+22     	; 0x2f6 <__vector_23+0x100>
			else if ((bit_time>=72)&(bit_time<=79)) { rcvd |= 0x02; }
 2e0:	80 91 0d 01 	lds	r24, 0x010D
 2e4:	90 91 0d 01 	lds	r25, 0x010D
 2e8:	88 34       	cpi	r24, 0x48	; 72
 2ea:	40 f0       	brcs	.+16     	; 0x2fc <__vector_23+0x106>
 2ec:	90 35       	cpi	r25, 0x50	; 80
 2ee:	30 f4       	brcc	.+12     	; 0x2fc <__vector_23+0x106>
 2f0:	80 91 09 01 	lds	r24, 0x0109
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	80 93 09 01 	sts	0x0109, r24
 2fa:	7d c0       	rjmp	.+250    	; 0x3f6 <__vector_23+0x200>
			else if ((bit_time>=85)&(bit_time<=92)) { // eighth bit has been received
 2fc:	80 91 0d 01 	lds	r24, 0x010D
 300:	90 91 0d 01 	lds	r25, 0x010D
 304:	85 35       	cpi	r24, 0x55	; 85
 306:	08 f4       	brcc	.+2      	; 0x30a <__vector_23+0x114>
 308:	70 c0       	rjmp	.+224    	; 0x3ea <__vector_23+0x1f4>
 30a:	9d 35       	cpi	r25, 0x5D	; 93
 30c:	08 f0       	brcs	.+2      	; 0x310 <__vector_23+0x11a>
 30e:	6d c0       	rjmp	.+218    	; 0x3ea <__vector_23+0x1f4>
				rcvd |= 0x01; 
 310:	80 91 09 01 	lds	r24, 0x0109
 314:	81 60       	ori	r24, 0x01	; 1
 316:	80 93 09 01 	sts	0x0109, r24
				rcv_sx = 1;
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	50 93 0b 01 	sts	0x010B, r21
 322:	40 93 0a 01 	sts	0x010A, r20
				lastRcv = 0;
 326:	10 92 0e 01 	sts	0x010E, r1
				lastRcv |= rcvd; // store message
 32a:	90 91 0e 01 	lds	r25, 0x010E
 32e:	80 91 09 01 	lds	r24, 0x0109
 332:	89 2b       	or	r24, r25
 334:	80 93 0e 01 	sts	0x010E, r24

				// turn on LEDs for success
				PORTB |= (1<<PORTB1);
 338:	29 9a       	sbi	0x05, 1	; 5
				//PORTB &= ~(1<<PORTB0);
				//if (lastRcv==toRcv1) { PORTB |= (1<<PORTB2); }
				//if (lastRcv==toRcv2) { PORTB |= (1<<PORTB0); }

				if (msg_rcvd==1) {
 33a:	80 91 0f 01 	lds	r24, 0x010F
 33e:	90 91 10 01 	lds	r25, 0x0110
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	81 f5       	brne	.+96     	; 0x3a6 <__vector_23+0x1b0>
					time2 |= TCNT1;
 346:	80 91 11 01 	lds	r24, 0x0111
 34a:	90 91 12 01 	lds	r25, 0x0112
 34e:	20 91 84 00 	lds	r18, 0x0084
 352:	30 91 85 00 	lds	r19, 0x0085
 356:	82 2b       	or	r24, r18
 358:	93 2b       	or	r25, r19
 35a:	90 93 12 01 	sts	0x0112, r25
 35e:	80 93 11 01 	sts	0x0111, r24
					if ((time2-time1)>1000) { // try to ensure that the period will measure one rotation
 362:	80 91 11 01 	lds	r24, 0x0111
 366:	90 91 12 01 	lds	r25, 0x0112
 36a:	20 91 13 01 	lds	r18, 0x0113
 36e:	30 91 14 01 	lds	r19, 0x0114
 372:	82 1b       	sub	r24, r18
 374:	93 0b       	sbc	r25, r19
 376:	89 5e       	subi	r24, 0xE9	; 233
 378:	93 40       	sbci	r25, 0x03	; 3
 37a:	6c f1       	brlt	.+90     	; 0x3d6 <__vector_23+0x1e0>
						period = time2-time1;
 37c:	80 91 11 01 	lds	r24, 0x0111
 380:	90 91 12 01 	lds	r25, 0x0112
 384:	20 91 13 01 	lds	r18, 0x0113
 388:	30 91 14 01 	lds	r19, 0x0114
 38c:	82 1b       	sub	r24, r18
 38e:	93 0b       	sbc	r25, r19
 390:	90 93 16 01 	sts	0x0116, r25
 394:	80 93 15 01 	sts	0x0115, r24
						msg_rcvd = 2;
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	90 93 10 01 	sts	0x0110, r25
 3a0:	80 93 0f 01 	sts	0x010F, r24
 3a4:	18 c0       	rjmp	.+48     	; 0x3d6 <__vector_23+0x1e0>
					}
				} else if (msg_rcvd==0) { 
 3a6:	80 91 0f 01 	lds	r24, 0x010F
 3aa:	90 91 10 01 	lds	r25, 0x0110
 3ae:	89 2b       	or	r24, r25
 3b0:	91 f4       	brne	.+36     	; 0x3d6 <__vector_23+0x1e0>
					time1 |= TCNT1; 
 3b2:	80 91 13 01 	lds	r24, 0x0113
 3b6:	90 91 14 01 	lds	r25, 0x0114
 3ba:	20 91 84 00 	lds	r18, 0x0084
 3be:	30 91 85 00 	lds	r19, 0x0085
 3c2:	82 2b       	or	r24, r18
 3c4:	93 2b       	or	r25, r19
 3c6:	90 93 14 01 	sts	0x0114, r25
 3ca:	80 93 13 01 	sts	0x0113, r24
					msg_rcvd = 1;
 3ce:	50 93 10 01 	sts	0x0110, r21
 3d2:	40 93 0f 01 	sts	0x010F, r20
				}

				if (msg_rcvd==2) { // once period can be calculated, set timer for neighbor marking
 3d6:	80 91 0f 01 	lds	r24, 0x010F
 3da:	90 91 10 01 	lds	r25, 0x0110
 3de:	02 97       	sbiw	r24, 0x02	; 2
 3e0:	21 f4       	brne	.+8      	; 0x3ea <__vector_23+0x1f4>
					TCNT1 = 0;
 3e2:	10 92 85 00 	sts	0x0085, r1
 3e6:	10 92 84 00 	sts	0x0084, r1
				rcving = 0; // reset receiving variables
				TCNT2 = 0;
				rcvd = 0;

			}  else { // bad rising edge means message is bad, discard and reset
				rcving = 0; // reset receiving variables
 3ea:	10 92 08 01 	sts	0x0108, r1
				TCNT2 = 0;
 3ee:	10 92 b2 00 	sts	0x00B2, r1
				rcvd = 0;
 3f2:	10 92 09 01 	sts	0x0109, r1
	/* while(ACSR & (1<<ACO)) {
		PORTB |= (1<<PORTB0);
	}
	PORTB &= ~(1<<PORTB0); */

} 
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	5f 91       	pop	r21
 3fc:	4f 91       	pop	r20
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <__vector_7>:

// reset routine for message reception
ISR(TIMER2_COMPA_vect) { // timer2 interrupt routine
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1

	rcving = 0;
 416:	10 92 08 01 	sts	0x0108, r1
	rcvd = 0;
 41a:	10 92 09 01 	sts	0x0109, r1
	//PORTB &= ~(1<<PORTB0);
	PORTB &= ~(1<<PORTB1);
 41e:	29 98       	cbi	0x05, 1	; 5

}
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <__vector_14>:

// routine for timer0 to send messages, pause for a longer time between messages
ISR(TIMER0_COMPA_vect) { // timer0 interrupt routine
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	6f 93       	push	r22
 43e:	7f 93       	push	r23
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31

	if (bits_sent<8) { // if the whole message has not been sent
 448:	80 91 02 01 	lds	r24, 0x0102
 44c:	90 91 03 01 	lds	r25, 0x0103
 450:	08 97       	sbiw	r24, 0x08	; 8
 452:	0c f0       	brlt	.+2      	; 0x456 <__vector_14+0x2c>
 454:	40 c0       	rjmp	.+128    	; 0x4d6 <__vector_14+0xac>
		if (pause==0) { // 0,1 half of bit to be sent
 456:	80 91 04 01 	lds	r24, 0x0104
 45a:	90 91 05 01 	lds	r25, 0x0105
 45e:	89 2b       	or	r24, r25
 460:	a1 f5       	brne	.+104    	; 0x4ca <__vector_14+0xa0>
			new_bit = (toSend & (1<<(7-bits_sent))) >> (7-bits_sent);
 462:	40 91 00 01 	lds	r20, 0x0100
 466:	80 91 02 01 	lds	r24, 0x0102
 46a:	90 91 03 01 	lds	r25, 0x0103
 46e:	e0 91 02 01 	lds	r30, 0x0102
 472:	f0 91 03 01 	lds	r31, 0x0103
 476:	27 e0       	ldi	r18, 0x07	; 7
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	b9 01       	movw	r22, r18
 47c:	68 1b       	sub	r22, r24
 47e:	79 0b       	sbc	r23, r25
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <__vector_14+0x60>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__vector_14+0x5c>
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	84 23       	and	r24, r20
 492:	95 23       	and	r25, r21
 494:	2e 1b       	sub	r18, r30
 496:	3f 0b       	sbc	r19, r31
 498:	02 c0       	rjmp	.+4      	; 0x49e <__vector_14+0x74>
 49a:	95 95       	asr	r25
 49c:	87 95       	ror	r24
 49e:	2a 95       	dec	r18
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__vector_14+0x70>
 4a2:	90 93 07 01 	sts	0x0107, r25
 4a6:	80 93 06 01 	sts	0x0106, r24
			if(new_bit==1) { // turn on LEDs
 4aa:	80 91 06 01 	lds	r24, 0x0106
 4ae:	90 91 07 01 	lds	r25, 0x0107
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__vector_14+0x90>
				PORTC |= (1<<PORTC3);
 4b6:	43 9a       	sbi	0x08, 3	; 8
 4b8:	01 c0       	rjmp	.+2      	; 0x4bc <__vector_14+0x92>
				//PORTB |= (1<<PORTB2);
			} else { // turn off LEDs
				PORTC &= ~(1<<PORTC3);
 4ba:	43 98       	cbi	0x08, 3	; 8
				//PORTB &= ~(1<<PORTB2);
			}
			pause = 1; // pause after sending a bit
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	90 93 05 01 	sts	0x0105, r25
 4c4:	80 93 04 01 	sts	0x0104, r24
 4c8:	1b c0       	rjmp	.+54     	; 0x500 <__vector_14+0xd6>
		} else { // pausing between bits
			pause = 0; // send new bit on next interrupt
 4ca:	10 92 05 01 	sts	0x0105, r1
 4ce:	10 92 04 01 	sts	0x0104, r1
			PORTC &= ~(1<<PORTC3); // ensure LEDs are low for pause
 4d2:	43 98       	cbi	0x08, 3	; 8
 4d4:	0c c0       	rjmp	.+24     	; 0x4ee <__vector_14+0xc4>
			//PORTB &= ~(1<<PORTB2);
			bits_sent += 1; // increment bits_sent after each pause
		}
	} else { // if bits_sent >= 8, reset variables and pause for a bit
		if (bits_sent>=72) { // wait for 4 messages, send again
 4d6:	80 91 02 01 	lds	r24, 0x0102
 4da:	90 91 03 01 	lds	r25, 0x0103
 4de:	88 34       	cpi	r24, 0x48	; 72
 4e0:	91 05       	cpc	r25, r1
 4e2:	2c f0       	brlt	.+10     	; 0x4ee <__vector_14+0xc4>
			bits_sent = 0; 
 4e4:	10 92 03 01 	sts	0x0103, r1
 4e8:	10 92 02 01 	sts	0x0102, r1
 4ec:	09 c0       	rjmp	.+18     	; 0x500 <__vector_14+0xd6>
		} else {
			bits_sent+=1; // increment bits_sent for timing between messages
 4ee:	80 91 02 01 	lds	r24, 0x0102
 4f2:	90 91 03 01 	lds	r25, 0x0103
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	90 93 03 01 	sts	0x0103, r25
 4fc:	80 93 02 01 	sts	0x0102, r24
		}
		
		// TODO: could disable ISR here, for send_msg function?
	}

}
 500:	ff 91       	pop	r31
 502:	ef 91       	pop	r30
 504:	9f 91       	pop	r25
 506:	8f 91       	pop	r24
 508:	7f 91       	pop	r23
 50a:	6f 91       	pop	r22
 50c:	5f 91       	pop	r21
 50e:	4f 91       	pop	r20
 510:	3f 91       	pop	r19
 512:	2f 91       	pop	r18
 514:	0f 90       	pop	r0
 516:	0f be       	out	0x3f, r0	; 63
 518:	0f 90       	pop	r0
 51a:	1f 90       	pop	r1
 51c:	18 95       	reti

0000051e <__divmodhi4>:
 51e:	97 fb       	bst	r25, 7
 520:	09 2e       	mov	r0, r25
 522:	07 26       	eor	r0, r23
 524:	0a d0       	rcall	.+20     	; 0x53a <__divmodhi4_neg1>
 526:	77 fd       	sbrc	r23, 7
 528:	04 d0       	rcall	.+8      	; 0x532 <__divmodhi4_neg2>
 52a:	0c d0       	rcall	.+24     	; 0x544 <__udivmodhi4>
 52c:	06 d0       	rcall	.+12     	; 0x53a <__divmodhi4_neg1>
 52e:	00 20       	and	r0, r0
 530:	1a f4       	brpl	.+6      	; 0x538 <__divmodhi4_exit>

00000532 <__divmodhi4_neg2>:
 532:	70 95       	com	r23
 534:	61 95       	neg	r22
 536:	7f 4f       	sbci	r23, 0xFF	; 255

00000538 <__divmodhi4_exit>:
 538:	08 95       	ret

0000053a <__divmodhi4_neg1>:
 53a:	f6 f7       	brtc	.-4      	; 0x538 <__divmodhi4_exit>
 53c:	90 95       	com	r25
 53e:	81 95       	neg	r24
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	08 95       	ret

00000544 <__udivmodhi4>:
 544:	aa 1b       	sub	r26, r26
 546:	bb 1b       	sub	r27, r27
 548:	51 e1       	ldi	r21, 0x11	; 17
 54a:	07 c0       	rjmp	.+14     	; 0x55a <__udivmodhi4_ep>

0000054c <__udivmodhi4_loop>:
 54c:	aa 1f       	adc	r26, r26
 54e:	bb 1f       	adc	r27, r27
 550:	a6 17       	cp	r26, r22
 552:	b7 07       	cpc	r27, r23
 554:	10 f0       	brcs	.+4      	; 0x55a <__udivmodhi4_ep>
 556:	a6 1b       	sub	r26, r22
 558:	b7 0b       	sbc	r27, r23

0000055a <__udivmodhi4_ep>:
 55a:	88 1f       	adc	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	5a 95       	dec	r21
 560:	a9 f7       	brne	.-22     	; 0x54c <__udivmodhi4_loop>
 562:	80 95       	com	r24
 564:	90 95       	com	r25
 566:	bc 01       	movw	r22, r24
 568:	cd 01       	movw	r24, r26
 56a:	08 95       	ret

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
