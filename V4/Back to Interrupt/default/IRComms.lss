
IRComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000524  000005b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800102  00800102  000005ba  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000004a  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000027d  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000101  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ef  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000178  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000030  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_23>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 90 02 	jmp	0x520	; 0x520 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
static volatile int near = 0;
static volatile int far = 0;

int main(void) {

	DDRB=0;
  a6:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
  a8:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	84 b9       	out	0x04, r24	; 4

	DDRB |= (1<<7); // enable EPM control pins
  ae:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
  b0:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
  b2:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
  b4:	2f 98       	cbi	0x05, 7	; 5

	DDRC=0; // enable IR LED
  b6:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
  b8:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	87 b9       	out	0x07, r24	; 7

	cli(); // disable interrupts
  be:	f8 94       	cli

	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
  c6:	8b e0       	ldi	r24, 0x0B	; 11
  c8:	80 bf       	out	0x30, r24	; 48

	// Initialize timer0 for timing sending of messages (1/8 prescaler, 8-bit timer rolls over at ~3.9 kHz Hz)
	TCCR0A |= (1<<WGM01); // // do not change any output pin, clear at compare match with OCR0A
  ca:	84 b5       	in	r24, 0x24	; 36
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0<<CS02)|(1<<CS01)|(0<<CS00); // prescaler of 1/8
  d0:	85 b5       	in	r24, 0x25	; 37
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	85 bd       	out	0x25, r24	; 37
	OCR0A = 100; // interrupt every 100 counts, for sending a new bit every 2 cycles
  d6:	84 e6       	ldi	r24, 0x64	; 100
  d8:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
  da:	80 91 6e 00 	lds	r24, 0x006E
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 93 6e 00 	sts	0x006E, r24

	// Initialize timer1 for neighbor-marking, based on times of received messages
	TCCR1B |= (1<<CS12)|(0<<CS11)|(1<<CS10); // 1/1024 prescaler, counts at ~7.8kHz, 16-bit timer
  e4:	80 91 81 00 	lds	r24, 0x0081
  e8:	85 60       	ori	r24, 0x05	; 5
  ea:	80 93 81 00 	sts	0x0081, r24

	// Initialize timer2 for timing receiving of messages (1/128 prescaler, 8-bit timer rolls over at ~250 Hz )
	TCCR2A |= (1<<WGM21); // do not change any output pin, clear at compare match with OCR2A
  ee:	80 91 b0 00 	lds	r24, 0x00B0
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = (1<<OCIE2A); // compare match on OCR2A
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 70 00 	sts	0x0070, r24
    OCR2A = 200; // compare every 200 counts (every 3.2ms, 2x length of message)
  fe:	88 ec       	ldi	r24, 0xC8	; 200
 100:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= (1<<CS22)|(0<<CS21)|(1<<CS20); // prescaler of 1/128: count every 16us
 104:	80 91 b1 00 	lds	r24, 0x00B1
 108:	85 60       	ori	r24, 0x05	; 5
 10a:	80 93 b1 00 	sts	0x00B1, r24

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
 10e:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
 110:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
 112:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<PORTC3); // IR
 114:	43 9a       	sbi	0x08, 3	; 8
 116:	80 ed       	ldi	r24, 0xD0	; 208
 118:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11a:	28 ec       	ldi	r18, 0xC8	; 200
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x7a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 124:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 126:	d9 f7       	brne	.-10     	; 0x11e <main+0x78>
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
 128:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
 12a:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
 12c:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1<<PORTC3);
 12e:	43 98       	cbi	0x08, 3	; 8
	
	sei(); // enable interrupts	
 130:	78 94       	sei
	int cur_time = 0;

	// at 140 rpm, period should be about 3344 timer1 counts
	int per140 = 3344;

	near = 836; // initial guess
 132:	84 e4       	ldi	r24, 0x44	; 68
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	90 93 12 01 	sts	0x0112, r25
 13a:	80 93 11 01 	sts	0x0111, r24
	far = 3*near;
 13e:	20 91 11 01 	lds	r18, 0x0111
 142:	30 91 12 01 	lds	r19, 0x0112
 146:	c9 01       	movw	r24, r18
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	82 0f       	add	r24, r18
 14e:	93 1f       	adc	r25, r19
 150:	90 93 14 01 	sts	0x0114, r25
 154:	80 93 13 01 	sts	0x0113, r24

	while(1) {
		//neighbor marking based on times of messages received, use Timer1
		
		if (rcv_sx==1) { // got a new message
 158:	80 91 0a 01 	lds	r24, 0x010A
 15c:	90 91 0b 01 	lds	r25, 0x010B
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	d1 f7       	brne	.-12     	; 0x158 <main+0xb2>

			// if the LEDs are in line with the other module
			cur_time = TCNT1;
 164:	60 91 84 00 	lds	r22, 0x0084
 168:	70 91 85 00 	lds	r23, 0x0085
			if ( ((cur_time < (near+5))&(cur_time > (near-5))) | ((cur_time < (far+5))&(cur_time > (far-5))) ) {
 16c:	40 91 11 01 	lds	r20, 0x0111
 170:	50 91 12 01 	lds	r21, 0x0112
 174:	e0 91 11 01 	lds	r30, 0x0111
 178:	f0 91 12 01 	lds	r31, 0x0112
 17c:	80 91 13 01 	lds	r24, 0x0113
 180:	90 91 14 01 	lds	r25, 0x0114
 184:	20 91 13 01 	lds	r18, 0x0113
 188:	30 91 14 01 	lds	r19, 0x0114
 18c:	a0 e0       	ldi	r26, 0x00	; 0
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	04 96       	adiw	r24, 0x04	; 4
 192:	86 17       	cp	r24, r22
 194:	97 07       	cpc	r25, r23
 196:	14 f0       	brlt	.+4      	; 0x19c <main+0xf6>
 198:	a1 e0       	ldi	r26, 0x01	; 1
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	24 50       	subi	r18, 0x04	; 4
 1a2:	30 40       	sbci	r19, 0x00	; 0
 1a4:	62 17       	cp	r22, r18
 1a6:	73 07       	cpc	r23, r19
 1a8:	14 f0       	brlt	.+4      	; 0x1ae <main+0x108>
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	8a 23       	and	r24, r26
 1b0:	9b 23       	and	r25, r27
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	4c 5f       	subi	r20, 0xFC	; 252
 1b8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ba:	46 17       	cp	r20, r22
 1bc:	57 07       	cpc	r21, r23
 1be:	14 f0       	brlt	.+4      	; 0x1c4 <main+0x11e>
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	34 97       	sbiw	r30, 0x04	; 4
 1ca:	6e 17       	cp	r22, r30
 1cc:	7f 07       	cpc	r23, r31
 1ce:	14 f0       	brlt	.+4      	; 0x1d4 <main+0x12e>
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	24 23       	and	r18, r20
 1d6:	35 23       	and	r19, r21
 1d8:	82 2b       	or	r24, r18
 1da:	11 f0       	breq	.+4      	; 0x1e0 <main+0x13a>
				PORTB |= (1<<PORTB0);
 1dc:	28 9a       	sbi	0x05, 0	; 5
 1de:	bc cf       	rjmp	.-136    	; 0x158 <main+0xb2>
			} else {
				PORTB &= ~(1<<PORTB0);
 1e0:	28 98       	cbi	0x05, 0	; 5
 1e2:	ba cf       	rjmp	.-140    	; 0x158 <main+0xb2>

000001e4 <__vector_23>:

	}

}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27

	if (rcving==0) {
 200:	80 91 08 01 	lds	r24, 0x0108
 204:	88 23       	and	r24, r24
 206:	89 f4       	brne	.+34     	; 0x22a <__vector_23+0x46>

		TCNT2=0;
 208:	10 92 b2 00 	sts	0x00B2, r1
		rcving=1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 08 01 	sts	0x0108, r24
		rcvd=0x80;
 212:	80 e8       	ldi	r24, 0x80	; 128
 214:	80 93 09 01 	sts	0x0109, r24
		ACSR &= ~(1<<ACIS0); // change to falling edge
 218:	80 b7       	in	r24, 0x30	; 48
 21a:	8e 7f       	andi	r24, 0xFE	; 254
 21c:	80 bf       	out	0x30, r24	; 48
		rcv_sx = 0; // reset success flag
 21e:	10 92 0b 01 	sts	0x010B, r1
 222:	10 92 0a 01 	sts	0x010A, r1

		//PORTB |= (1<<PORTB0); // clear success LEDs from previous message
		PORTB &= ~(1<<PORTB1);
 226:	29 98       	cbi	0x05, 1	; 5
 228:	be c0       	rjmp	.+380    	; 0x3a6 <__vector_23+0x1c2>
		//PORTB &= ~(1<<PORTB2);

	} else { // first rising edge has been detected (rcving=1)

		if (!(ACSR&(1<<ACIS0))) { // check for first falling edge
 22a:	00 b6       	in	r0, 0x30	; 48
 22c:	00 fc       	sbrc	r0, 0
 22e:	0d c0       	rjmp	.+26     	; 0x24a <__vector_23+0x66>

			distance = 0;
 230:	10 92 0c 01 	sts	0x010C, r1
			distance |= TCNT2; // use timer value for distance
 234:	80 91 0c 01 	lds	r24, 0x010C
 238:	90 91 b2 00 	lds	r25, 0x00B2
 23c:	98 2b       	or	r25, r24
 23e:	90 93 0c 01 	sts	0x010C, r25
			ACSR |= (1<<ACIS0); // switch back to rising edge
 242:	80 b7       	in	r24, 0x30	; 48
 244:	81 60       	ori	r24, 0x01	; 1
 246:	80 bf       	out	0x30, r24	; 48
 248:	ae c0       	rjmp	.+348    	; 0x3a6 <__vector_23+0x1c2>
		} else { // on subsequent rising edges
			// TODO: add LED debugging for each bit
			//PORTB |= (1<<PORTB0);

			// match rising edges to closest expected time in rcvd
			bit_time = 0;
 24a:	10 92 0d 01 	sts	0x010D, r1
			bit_time |= TCNT2; // time that rising edge was detected
 24e:	80 91 0d 01 	lds	r24, 0x010D
 252:	90 91 b2 00 	lds	r25, 0x00B2
 256:	98 2b       	or	r25, r24
 258:	90 93 0d 01 	sts	0x010D, r25
			
			if ((bit_time>=10)&(bit_time<=17)) { rcvd |= 0x40; }
 25c:	80 91 0d 01 	lds	r24, 0x010D
 260:	90 91 0d 01 	lds	r25, 0x010D
 264:	8a 30       	cpi	r24, 0x0A	; 10
 266:	30 f0       	brcs	.+12     	; 0x274 <__vector_23+0x90>
 268:	92 31       	cpi	r25, 0x12	; 18
 26a:	20 f4       	brcc	.+8      	; 0x274 <__vector_23+0x90>
 26c:	80 91 09 01 	lds	r24, 0x0109
 270:	80 64       	ori	r24, 0x40	; 64
 272:	3b c0       	rjmp	.+118    	; 0x2ea <__vector_23+0x106>
			else if ((bit_time>=22)&(bit_time<=29)) { rcvd |= 0x20; }
 274:	80 91 0d 01 	lds	r24, 0x010D
 278:	90 91 0d 01 	lds	r25, 0x010D
 27c:	86 31       	cpi	r24, 0x16	; 22
 27e:	30 f0       	brcs	.+12     	; 0x28c <__vector_23+0xa8>
 280:	9e 31       	cpi	r25, 0x1E	; 30
 282:	20 f4       	brcc	.+8      	; 0x28c <__vector_23+0xa8>
 284:	80 91 09 01 	lds	r24, 0x0109
 288:	80 62       	ori	r24, 0x20	; 32
 28a:	2f c0       	rjmp	.+94     	; 0x2ea <__vector_23+0x106>
			else if ((bit_time>=35)&(bit_time<=42)) { rcvd |= 0x10; }
 28c:	80 91 0d 01 	lds	r24, 0x010D
 290:	90 91 0d 01 	lds	r25, 0x010D
 294:	83 32       	cpi	r24, 0x23	; 35
 296:	30 f0       	brcs	.+12     	; 0x2a4 <__vector_23+0xc0>
 298:	9b 32       	cpi	r25, 0x2B	; 43
 29a:	20 f4       	brcc	.+8      	; 0x2a4 <__vector_23+0xc0>
 29c:	80 91 09 01 	lds	r24, 0x0109
 2a0:	80 61       	ori	r24, 0x10	; 16
 2a2:	23 c0       	rjmp	.+70     	; 0x2ea <__vector_23+0x106>
			else if ((bit_time>=47)&(bit_time<=54)) { rcvd |= 0x08; }
 2a4:	80 91 0d 01 	lds	r24, 0x010D
 2a8:	90 91 0d 01 	lds	r25, 0x010D
 2ac:	8f 32       	cpi	r24, 0x2F	; 47
 2ae:	30 f0       	brcs	.+12     	; 0x2bc <__vector_23+0xd8>
 2b0:	97 33       	cpi	r25, 0x37	; 55
 2b2:	20 f4       	brcc	.+8      	; 0x2bc <__vector_23+0xd8>
 2b4:	80 91 09 01 	lds	r24, 0x0109
 2b8:	88 60       	ori	r24, 0x08	; 8
 2ba:	17 c0       	rjmp	.+46     	; 0x2ea <__vector_23+0x106>
			else if ((bit_time>=60)&(bit_time<=67)) { rcvd |= 0x04; }
 2bc:	80 91 0d 01 	lds	r24, 0x010D
 2c0:	90 91 0d 01 	lds	r25, 0x010D
 2c4:	8c 33       	cpi	r24, 0x3C	; 60
 2c6:	30 f0       	brcs	.+12     	; 0x2d4 <__vector_23+0xf0>
 2c8:	94 34       	cpi	r25, 0x44	; 68
 2ca:	20 f4       	brcc	.+8      	; 0x2d4 <__vector_23+0xf0>
 2cc:	80 91 09 01 	lds	r24, 0x0109
 2d0:	84 60       	ori	r24, 0x04	; 4
 2d2:	0b c0       	rjmp	.+22     	; 0x2ea <__vector_23+0x106>
			else if ((bit_time>=72)&(bit_time<=79)) { rcvd |= 0x02; }
 2d4:	80 91 0d 01 	lds	r24, 0x010D
 2d8:	90 91 0d 01 	lds	r25, 0x010D
 2dc:	88 34       	cpi	r24, 0x48	; 72
 2de:	40 f0       	brcs	.+16     	; 0x2f0 <__vector_23+0x10c>
 2e0:	90 35       	cpi	r25, 0x50	; 80
 2e2:	30 f4       	brcc	.+12     	; 0x2f0 <__vector_23+0x10c>
 2e4:	80 91 09 01 	lds	r24, 0x0109
 2e8:	82 60       	ori	r24, 0x02	; 2
 2ea:	80 93 09 01 	sts	0x0109, r24
 2ee:	5b c0       	rjmp	.+182    	; 0x3a6 <__vector_23+0x1c2>
			else if ((bit_time>=85)&(bit_time<=92)) { // eighth bit has been received
 2f0:	80 91 0d 01 	lds	r24, 0x010D
 2f4:	90 91 0d 01 	lds	r25, 0x010D
 2f8:	85 35       	cpi	r24, 0x55	; 85
 2fa:	08 f4       	brcc	.+2      	; 0x2fe <__vector_23+0x11a>
 2fc:	4e c0       	rjmp	.+156    	; 0x39a <__vector_23+0x1b6>
 2fe:	9d 35       	cpi	r25, 0x5D	; 93
 300:	08 f0       	brcs	.+2      	; 0x304 <__vector_23+0x120>
 302:	4b c0       	rjmp	.+150    	; 0x39a <__vector_23+0x1b6>
				rcvd |= 0x01; 
 304:	80 91 09 01 	lds	r24, 0x0109
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	80 93 09 01 	sts	0x0109, r24
				rcv_sx = 1;
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	90 93 0b 01 	sts	0x010B, r25
 316:	80 93 0a 01 	sts	0x010A, r24
				lastRcv = 0;
 31a:	10 92 0e 01 	sts	0x010E, r1
				lastRcv |= rcvd; // store message
 31e:	90 91 0e 01 	lds	r25, 0x010E
 322:	80 91 09 01 	lds	r24, 0x0109
 326:	89 2b       	or	r24, r25
 328:	80 93 0e 01 	sts	0x010E, r24

				// turn on LEDs for success
				PORTB |= (1<<PORTB1);
 32c:	29 9a       	sbi	0x05, 1	; 5
				//PORTB &= ~(1<<PORTB0);
				//if (lastRcv==toRcv1) { PORTB |= (1<<PORTB2); }
				//if (lastRcv==toRcv2) { PORTB |= (1<<PORTB0); }

				rcv_time |= TCNT1;
 32e:	80 91 0f 01 	lds	r24, 0x010F
 332:	90 91 10 01 	lds	r25, 0x0110
 336:	20 91 84 00 	lds	r18, 0x0084
 33a:	30 91 85 00 	lds	r19, 0x0085
 33e:	82 2b       	or	r24, r18
 340:	93 2b       	or	r25, r19
 342:	90 93 10 01 	sts	0x0110, r25
 346:	80 93 0f 01 	sts	0x010F, r24

				if (rcv_time >= 1000) {
 34a:	80 91 0f 01 	lds	r24, 0x010F
 34e:	90 91 10 01 	lds	r25, 0x0110
 352:	88 5e       	subi	r24, 0xE8	; 232
 354:	93 40       	sbci	r25, 0x03	; 3
 356:	cc f0       	brlt	.+50     	; 0x38a <__vector_23+0x1a6>
					near = rcv_time/4;
 358:	80 91 0f 01 	lds	r24, 0x010F
 35c:	90 91 10 01 	lds	r25, 0x0110
 360:	64 e0       	ldi	r22, 0x04	; 4
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__divmodhi4>
 368:	70 93 12 01 	sts	0x0112, r23
 36c:	60 93 11 01 	sts	0x0111, r22
					far = 3*near;
 370:	20 91 11 01 	lds	r18, 0x0111
 374:	30 91 12 01 	lds	r19, 0x0112
 378:	c9 01       	movw	r24, r18
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	82 0f       	add	r24, r18
 380:	93 1f       	adc	r25, r19
 382:	90 93 14 01 	sts	0x0114, r25
 386:	80 93 13 01 	sts	0x0113, r24
				}


				TCNT1 = 0; // reset timer1 on received messages
 38a:	10 92 85 00 	sts	0x0085, r1
 38e:	10 92 84 00 	sts	0x0084, r1
				rcv_time = 0;
 392:	10 92 10 01 	sts	0x0110, r1
 396:	10 92 0f 01 	sts	0x010F, r1
				rcving = 0; // reset receiving variables
				TCNT2 = 0;
				rcvd = 0;

			}  else { // bad rising edge means message is bad, discard and reset
				rcving = 0; // reset receiving variables
 39a:	10 92 08 01 	sts	0x0108, r1
				TCNT2 = 0;
 39e:	10 92 b2 00 	sts	0x00B2, r1
				rcvd = 0;
 3a2:	10 92 09 01 	sts	0x0109, r1
	/* while(ACSR & (1<<ACO)) {
		PORTB |= (1<<PORTB0);
	}
	PORTB &= ~(1<<PORTB0); */

} 
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	3f 91       	pop	r19
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <__vector_7>:

// reset routine for message reception
ISR(TIMER2_COMPA_vect) { // timer2 interrupt routine
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1

	rcving = 0;
 3cc:	10 92 08 01 	sts	0x0108, r1
	rcvd = 0;
 3d0:	10 92 09 01 	sts	0x0109, r1
	//PORTB &= ~(1<<PORTB0);
	PORTB &= ~(1<<PORTB1);
 3d4:	29 98       	cbi	0x05, 1	; 5

}
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <__vector_14>:

// routine for timer0 to send messages, pause for a longer time between messages
ISR(TIMER0_COMPA_vect) { // timer0 interrupt routine
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	2f 93       	push	r18
 3ec:	3f 93       	push	r19
 3ee:	4f 93       	push	r20
 3f0:	5f 93       	push	r21
 3f2:	6f 93       	push	r22
 3f4:	7f 93       	push	r23
 3f6:	8f 93       	push	r24
 3f8:	9f 93       	push	r25
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31

	if (bits_sent<8) { // if the whole message has not been sent
 3fe:	80 91 02 01 	lds	r24, 0x0102
 402:	90 91 03 01 	lds	r25, 0x0103
 406:	08 97       	sbiw	r24, 0x08	; 8
 408:	0c f0       	brlt	.+2      	; 0x40c <__vector_14+0x2c>
 40a:	40 c0       	rjmp	.+128    	; 0x48c <__vector_14+0xac>
		if (pause==0) { // 0,1 half of bit to be sent
 40c:	80 91 04 01 	lds	r24, 0x0104
 410:	90 91 05 01 	lds	r25, 0x0105
 414:	89 2b       	or	r24, r25
 416:	a1 f5       	brne	.+104    	; 0x480 <__vector_14+0xa0>
			new_bit = (toSend & (1<<(7-bits_sent))) >> (7-bits_sent);
 418:	40 91 00 01 	lds	r20, 0x0100
 41c:	80 91 02 01 	lds	r24, 0x0102
 420:	90 91 03 01 	lds	r25, 0x0103
 424:	e0 91 02 01 	lds	r30, 0x0102
 428:	f0 91 03 01 	lds	r31, 0x0103
 42c:	27 e0       	ldi	r18, 0x07	; 7
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	b9 01       	movw	r22, r18
 432:	68 1b       	sub	r22, r24
 434:	79 0b       	sbc	r23, r25
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__vector_14+0x60>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__vector_14+0x5c>
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	84 23       	and	r24, r20
 448:	95 23       	and	r25, r21
 44a:	2e 1b       	sub	r18, r30
 44c:	3f 0b       	sbc	r19, r31
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__vector_14+0x74>
 450:	95 95       	asr	r25
 452:	87 95       	ror	r24
 454:	2a 95       	dec	r18
 456:	e2 f7       	brpl	.-8      	; 0x450 <__vector_14+0x70>
 458:	90 93 07 01 	sts	0x0107, r25
 45c:	80 93 06 01 	sts	0x0106, r24
			if(new_bit==1) { // turn on LEDs
 460:	80 91 06 01 	lds	r24, 0x0106
 464:	90 91 07 01 	lds	r25, 0x0107
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	11 f4       	brne	.+4      	; 0x470 <__vector_14+0x90>
				PORTC |= (1<<PORTC3);
 46c:	43 9a       	sbi	0x08, 3	; 8
 46e:	01 c0       	rjmp	.+2      	; 0x472 <__vector_14+0x92>
				//PORTB |= (1<<PORTB2);
			} else { // turn off LEDs
				PORTC &= ~(1<<PORTC3);
 470:	43 98       	cbi	0x08, 3	; 8
				//PORTB &= ~(1<<PORTB2);
			}
			pause = 1; // pause after sending a bit
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	90 93 05 01 	sts	0x0105, r25
 47a:	80 93 04 01 	sts	0x0104, r24
 47e:	1a c0       	rjmp	.+52     	; 0x4b4 <__vector_14+0xd4>
		} else { // pausing between bits
			pause = 0; // send new bit on next interrupt
 480:	10 92 05 01 	sts	0x0105, r1
 484:	10 92 04 01 	sts	0x0104, r1
			PORTC &= ~(1<<PORTC3); // ensure LEDs are low for pause
 488:	43 98       	cbi	0x08, 3	; 8
 48a:	0b c0       	rjmp	.+22     	; 0x4a2 <__vector_14+0xc2>
			//PORTB &= ~(1<<PORTB2);
			bits_sent += 1; // increment bits_sent after each pause
		}
	} else { // if bits_sent >= 8, reset variables and pause for a bit
		if (bits_sent>=40) { // wait for 2 messages, send again
 48c:	80 91 02 01 	lds	r24, 0x0102
 490:	90 91 03 01 	lds	r25, 0x0103
 494:	88 97       	sbiw	r24, 0x28	; 40
 496:	2c f0       	brlt	.+10     	; 0x4a2 <__vector_14+0xc2>
			bits_sent = 0; 
 498:	10 92 03 01 	sts	0x0103, r1
 49c:	10 92 02 01 	sts	0x0102, r1
 4a0:	09 c0       	rjmp	.+18     	; 0x4b4 <__vector_14+0xd4>
		} else {
			bits_sent+=1; // increment bits_sent for timing between messages
 4a2:	80 91 02 01 	lds	r24, 0x0102
 4a6:	90 91 03 01 	lds	r25, 0x0103
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	90 93 03 01 	sts	0x0103, r25
 4b0:	80 93 02 01 	sts	0x0102, r24
		}
		
		// TODO: could disable ISR here, for send_msg function?
	}

}
 4b4:	ff 91       	pop	r31
 4b6:	ef 91       	pop	r30
 4b8:	9f 91       	pop	r25
 4ba:	8f 91       	pop	r24
 4bc:	7f 91       	pop	r23
 4be:	6f 91       	pop	r22
 4c0:	5f 91       	pop	r21
 4c2:	4f 91       	pop	r20
 4c4:	3f 91       	pop	r19
 4c6:	2f 91       	pop	r18
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <__divmodhi4>:
 4d2:	97 fb       	bst	r25, 7
 4d4:	09 2e       	mov	r0, r25
 4d6:	07 26       	eor	r0, r23
 4d8:	0a d0       	rcall	.+20     	; 0x4ee <__divmodhi4_neg1>
 4da:	77 fd       	sbrc	r23, 7
 4dc:	04 d0       	rcall	.+8      	; 0x4e6 <__divmodhi4_neg2>
 4de:	0c d0       	rcall	.+24     	; 0x4f8 <__udivmodhi4>
 4e0:	06 d0       	rcall	.+12     	; 0x4ee <__divmodhi4_neg1>
 4e2:	00 20       	and	r0, r0
 4e4:	1a f4       	brpl	.+6      	; 0x4ec <__divmodhi4_exit>

000004e6 <__divmodhi4_neg2>:
 4e6:	70 95       	com	r23
 4e8:	61 95       	neg	r22
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255

000004ec <__divmodhi4_exit>:
 4ec:	08 95       	ret

000004ee <__divmodhi4_neg1>:
 4ee:	f6 f7       	brtc	.-4      	; 0x4ec <__divmodhi4_exit>
 4f0:	90 95       	com	r25
 4f2:	81 95       	neg	r24
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	08 95       	ret

000004f8 <__udivmodhi4>:
 4f8:	aa 1b       	sub	r26, r26
 4fa:	bb 1b       	sub	r27, r27
 4fc:	51 e1       	ldi	r21, 0x11	; 17
 4fe:	07 c0       	rjmp	.+14     	; 0x50e <__udivmodhi4_ep>

00000500 <__udivmodhi4_loop>:
 500:	aa 1f       	adc	r26, r26
 502:	bb 1f       	adc	r27, r27
 504:	a6 17       	cp	r26, r22
 506:	b7 07       	cpc	r27, r23
 508:	10 f0       	brcs	.+4      	; 0x50e <__udivmodhi4_ep>
 50a:	a6 1b       	sub	r26, r22
 50c:	b7 0b       	sbc	r27, r23

0000050e <__udivmodhi4_ep>:
 50e:	88 1f       	adc	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	5a 95       	dec	r21
 514:	a9 f7       	brne	.-22     	; 0x500 <__udivmodhi4_loop>
 516:	80 95       	com	r24
 518:	90 95       	com	r25
 51a:	bc 01       	movw	r22, r24
 51c:	cd 01       	movw	r24, r26
 51e:	08 95       	ret

00000520 <_exit>:
 520:	f8 94       	cli

00000522 <__stop_program>:
 522:	ff cf       	rjmp	.-2      	; 0x522 <__stop_program>
