
IRComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000026e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800102  00800102  00000304  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000004a  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000027c  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010e  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cf  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000185  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_23>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
static volatile int msg_rcvd = 0;
static volatile int rcv_time = 0;

int main(void) {

	DDRB=0;
  a6:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
  a8:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	84 b9       	out	0x04, r24	; 4

	DDRB |= (1<<7); // enable EPM control pins
  ae:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
  b0:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
  b2:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
  b4:	2f 98       	cbi	0x05, 7	; 5

	DDRC=0; // enable IR LED
  b6:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
  b8:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	87 b9       	out	0x07, r24	; 7

	cli(); // disable interrupts
  be:	f8 94       	cli

	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
  c6:	8b e0       	ldi	r24, 0x0B	; 11
  c8:	80 bf       	out	0x30, r24	; 48

	// Initialize timer0 for timing sending of messages (1/8 prescaler, 8-bit timer rolls over at ~3.9 kHz Hz)
	TCCR0A |= (1<<WGM01); // // do not change any output pin, clear at compare match with OCR0A
  ca:	84 b5       	in	r24, 0x24	; 36
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0<<CS02)|(1<<CS01)|(0<<CS00); // prescaler of 1/8
  d0:	85 b5       	in	r24, 0x25	; 37
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	85 bd       	out	0x25, r24	; 37
	OCR0A = 100; // interrupt every 100 counts, for sending a new bit every 2 cycles
  d6:	84 e6       	ldi	r24, 0x64	; 100
  d8:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
  da:	80 91 6e 00 	lds	r24, 0x006E
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 93 6e 00 	sts	0x006E, r24

	// Initialize timer1 for neighbor-marking, based on times of received messages
	TCCR1B |= (1<<CS12)|(0<<CS11)|(1<<CS10); // 1/1024 prescaler, counts at ~7.8kHz, 16-bit timer
  e4:	80 91 81 00 	lds	r24, 0x0081
  e8:	85 60       	ori	r24, 0x05	; 5
  ea:	80 93 81 00 	sts	0x0081, r24

	// Initialize timer2 for timing receiving of messages (1/128 prescaler, 8-bit timer rolls over at ~250 Hz )
	TCCR2A |= (1<<WGM21); // do not change any output pin, clear at compare match with OCR2A
  ee:	80 91 b0 00 	lds	r24, 0x00B0
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = (1<<OCIE2A); // compare match on OCR2A
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 70 00 	sts	0x0070, r24
    OCR2A = 200; // compare every 200 counts (every 3.2ms, 2x length of message)
  fe:	88 ec       	ldi	r24, 0xC8	; 200
 100:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= (1<<CS22)|(0<<CS21)|(1<<CS20); // prescaler of 1/128: count every 16us
 104:	80 91 b1 00 	lds	r24, 0x00B1
 108:	85 60       	ori	r24, 0x05	; 5
 10a:	80 93 b1 00 	sts	0x00B1, r24

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
 10e:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
 110:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
 112:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<PORTC3); // IR
 114:	43 9a       	sbi	0x08, 3	; 8
 116:	80 ed       	ldi	r24, 0xD0	; 208
 118:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11a:	28 ec       	ldi	r18, 0xC8	; 200
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x7a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 124:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 126:	d9 f7       	brne	.-10     	; 0x11e <main+0x78>

	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
 128:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
 12a:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
 12c:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1<<PORTC3);
 12e:	43 98       	cbi	0x08, 3	; 8
	
	sei(); // enable interrupts	
 130:	78 94       	sei
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x8c>

00000134 <__vector_23>:

	}

}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	01 c0       	rjmp	.+2      	; 0x142 <__vector_23+0xe>
		}
	} */

	// simple code to follow pulse train
	while(ACSR & (1<<ACO)) {
		PORTB |= (1<<PORTB0);
 140:	28 9a       	sbi	0x05, 0	; 5
			}			
		}
	} */

	// simple code to follow pulse train
	while(ACSR & (1<<ACO)) {
 142:	00 b6       	in	r0, 0x30	; 48
 144:	05 fc       	sbrc	r0, 5
 146:	fc cf       	rjmp	.-8      	; 0x140 <__vector_23+0xc>
		PORTB |= (1<<PORTB0);
	}
	PORTB &= ~(1<<PORTB0);
 148:	28 98       	cbi	0x05, 0	; 5

} 
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_7>:

// reset routine for message reception
ISR(TIMER2_COMPA_vect) { // timer2 interrupt routine
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1

	rcving = 0;
 15e:	10 92 08 01 	sts	0x0108, r1
	rcvd = 0;
 162:	10 92 09 01 	sts	0x0109, r1

}
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <__vector_14>:

// routine for timer0 to send messages, pause for a longer time between messages
ISR(TIMER0_COMPA_vect) { // timer0 interrupt routine
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31

	if (bits_sent<8) { // if the whole message has not been sent
 18e:	80 91 02 01 	lds	r24, 0x0102
 192:	90 91 03 01 	lds	r25, 0x0103
 196:	08 97       	sbiw	r24, 0x08	; 8
 198:	0c f0       	brlt	.+2      	; 0x19c <__vector_14+0x2c>
 19a:	43 c0       	rjmp	.+134    	; 0x222 <__vector_14+0xb2>
		if (pause==0) { // 0,1 half of bit to be sent
 19c:	80 91 04 01 	lds	r24, 0x0104
 1a0:	90 91 05 01 	lds	r25, 0x0105
 1a4:	89 2b       	or	r24, r25
 1a6:	b1 f5       	brne	.+108    	; 0x214 <__vector_14+0xa4>
			new_bit = (toSend & (1<<(7-bits_sent))) >> (7-bits_sent);
 1a8:	40 91 00 01 	lds	r20, 0x0100
 1ac:	80 91 02 01 	lds	r24, 0x0102
 1b0:	90 91 03 01 	lds	r25, 0x0103
 1b4:	e0 91 02 01 	lds	r30, 0x0102
 1b8:	f0 91 03 01 	lds	r31, 0x0103
 1bc:	27 e0       	ldi	r18, 0x07	; 7
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	b9 01       	movw	r22, r18
 1c2:	68 1b       	sub	r22, r24
 1c4:	79 0b       	sbc	r23, r25
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__vector_14+0x60>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <__vector_14+0x5c>
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	84 23       	and	r24, r20
 1d8:	95 23       	and	r25, r21
 1da:	2e 1b       	sub	r18, r30
 1dc:	3f 0b       	sbc	r19, r31
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <__vector_14+0x74>
 1e0:	95 95       	asr	r25
 1e2:	87 95       	ror	r24
 1e4:	2a 95       	dec	r18
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <__vector_14+0x70>
 1e8:	90 93 07 01 	sts	0x0107, r25
 1ec:	80 93 06 01 	sts	0x0106, r24
			if(new_bit==1) { // turn on LEDs
 1f0:	80 91 06 01 	lds	r24, 0x0106
 1f4:	90 91 07 01 	lds	r25, 0x0107
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	19 f4       	brne	.+6      	; 0x202 <__vector_14+0x92>
				PORTC |= (1<<PORTC3);
 1fc:	43 9a       	sbi	0x08, 3	; 8
				PORTB |= (1<<PORTB2);
 1fe:	2a 9a       	sbi	0x05, 2	; 5
 200:	02 c0       	rjmp	.+4      	; 0x206 <__vector_14+0x96>
			} else { // turn off LEDs
				PORTC &= ~(1<<PORTC3);
 202:	43 98       	cbi	0x08, 3	; 8
				PORTB &= ~(1<<PORTB2);
 204:	2a 98       	cbi	0x05, 2	; 5
			}
			pause = 1; // pause after sending a bit
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	90 93 05 01 	sts	0x0105, r25
 20e:	80 93 04 01 	sts	0x0104, r24
 212:	1c c0       	rjmp	.+56     	; 0x24c <__vector_14+0xdc>
		} else { // pausing between bits
			pause = 0; // send new bit on next interrupt
 214:	10 92 05 01 	sts	0x0105, r1
 218:	10 92 04 01 	sts	0x0104, r1
			PORTC &= ~(1<<PORTC3); // ensure LEDs are low for pause
 21c:	43 98       	cbi	0x08, 3	; 8
			PORTB &= ~(1<<PORTB2);
 21e:	2a 98       	cbi	0x05, 2	; 5
 220:	0c c0       	rjmp	.+24     	; 0x23a <__vector_14+0xca>
			bits_sent += 1; // increment bits_sent after each pause
		}
	} else { // if bits_sent >= 8, reset variables and pause for a bit
		if (bits_sent>=72) { // wait for 4 messages, send again
 222:	80 91 02 01 	lds	r24, 0x0102
 226:	90 91 03 01 	lds	r25, 0x0103
 22a:	88 34       	cpi	r24, 0x48	; 72
 22c:	91 05       	cpc	r25, r1
 22e:	2c f0       	brlt	.+10     	; 0x23a <__vector_14+0xca>
			bits_sent = 0; 
 230:	10 92 03 01 	sts	0x0103, r1
 234:	10 92 02 01 	sts	0x0102, r1
 238:	09 c0       	rjmp	.+18     	; 0x24c <__vector_14+0xdc>
		} else {
			bits_sent+=1; // increment bits_sent for timing between messages
 23a:	80 91 02 01 	lds	r24, 0x0102
 23e:	90 91 03 01 	lds	r25, 0x0103
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	90 93 03 01 	sts	0x0103, r25
 248:	80 93 02 01 	sts	0x0102, r24
		}
		
		// TODO: could disable ISR here, for send_msg function?
	}

}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
