
IRComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000e0  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000005c5  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000022d  00000000  00000000  00000ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000567  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000f0  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ba  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000335  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000183b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  78:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <imu_init>:
	// set accel control registers
	//i2c_writeReg(LSM9DS1_WRITE, CTRL_REG4, &xl_ctrl_reg, 7);

	// any other registers to set up

}
  80:	08 95       	ret

00000082 <whoAmI>:

void whoAmI(void) {
  82:	1f 93       	push	r17
	
	char test=0;
	char test2=0;
	char test3=0;

	test = i2c_start(LSM9DS1_WRITE);
  84:	84 ed       	ldi	r24, 0xD4	; 212
  86:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_start>
	//if (test==2) { PORTB |= (1<<PORTB2); }
		
	test2 = i2c_write(WHO_AM_I_REG);
  8a:	8f e0       	ldi	r24, 0x0F	; 15
  8c:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_write>
	//if (test2==1) { PORTB |= (1<<PORTB1); }

	test3 = i2c_start(LSM9DS1_READ);
  90:	85 ed       	ldi	r24, 0xD5	; 213
  92:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_start>
	//if (test3==1) { PORTB |= (1<<PORTB1); }
	
	who = i2c_read_nack();
  96:	0e 94 dd 00 	call	0x1ba	; 0x1ba <i2c_read_nack>
  9a:	18 2f       	mov	r17, r24
	i2c_stop();
  9c:	0e 94 c1 01 	call	0x382	; 0x382 <i2c_stop>

	if (who == 0x68) { // who am I register value (0x68)
  a0:	18 36       	cpi	r17, 0x68	; 104
  a2:	11 f4       	brne	.+4      	; 0xa8 <whoAmI+0x26>
		PORTB |= (1<<PORTB2);
  a4:	2a 9a       	sbi	0x05, 2	; 5
  a6:	01 c0       	rjmp	.+2      	; 0xaa <whoAmI+0x28>
	} else if (who == 0x00) {
		PORTB |= (1<<PORTB1);
	} else {
		PORTB |= (1<<PORTB1);
  a8:	29 9a       	sbi	0x05, 1	; 5
  aa:	80 ed       	ldi	r24, 0xD0	; 208
  ac:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	28 ec       	ldi	r18, 0xC8	; 200
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <whoAmI+0x32>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ba:	d9 f7       	brne	.-10     	; 0xb2 <whoAmI+0x30>
	}
	//PORTB |= (1<<PORTB2);

	_delay_ms(200);

	PORTB &= ~(1<<PORTB1); // turn off LEDs
  bc:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
  be:	2a 98       	cbi	0x05, 2	; 5
}
  c0:	1f 91       	pop	r17
  c2:	08 95       	ret

000000c4 <main>:

/* int get_ax(void);
int get_ay(void);
int get_gz(void); */

int main(void) {
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29

	cli(); // disable interrupts
  c8:	f8 94       	cli

	DDRB=0;
  ca:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
  cc:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7);
  d2:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
  d4:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
  d6:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
  d8:	2f 98       	cbi	0x05, 7	; 5

	// declare i2c pins as inputs
	DDRC=0;
  da:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
  dc:	18 b8       	out	0x08, r1	; 8
	PORTC |= (1<<PORTC4);
  de:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= (1<<PORTC5);
  e0:	45 9a       	sbi	0x08, 5	; 8

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
  e2:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
  e4:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
  e6:	2a 9a       	sbi	0x05, 2	; 5
  e8:	80 ed       	ldi	r24, 0xD0	; 208
  ea:	97 e0       	ldi	r25, 0x07	; 7
  ec:	28 ec       	ldi	r18, 0xC8	; 200
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f8:	d9 f7       	brne	.-10     	; 0xf0 <main+0x2c>
	//PORTC |= (1<<PORTC3); // IR
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
  fa:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
  fc:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
  fe:	2a 98       	cbi	0x05, 2	; 5
	//PORTC &= ~(1<<PORTC3);

	i2c_init();
 100:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_init>
	
	//imu_init();

	PORTB |= (1<<PORTB0); // turn on one LED for imu init success
 104:	28 9a       	sbi	0x05, 0	; 5

	sei(); // enable interrupts
 106:	78 94       	sei
 108:	c8 ec       	ldi	r28, 0xC8	; 200
 10a:	d0 e0       	ldi	r29, 0x00	; 0

		// integrate gyroscope

		// turn on LEDs based on heading position

		PORTB |= (1<<PORTB0);
 10c:	28 9a       	sbi	0x05, 0	; 5

		whoAmI(); // test comms
 10e:	0e 94 41 00 	call	0x82	; 0x82 <whoAmI>

		PORTB &= ~(1<<PORTB0);
 112:	28 98       	cbi	0x05, 0	; 5
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	0a c0       	rjmp	.+20     	; 0x12e <main+0x6a>
 11a:	fe 01       	movw	r30, r28
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 120:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 122:	d9 f7       	brne	.-10     	; 0x11a <main+0x56>

		int ii=0;
		while(ii<3) {
			_delay_ms(100); // delay to keep loop from running too quickly
			ii++;
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
		whoAmI(); // test comms

		PORTB &= ~(1<<PORTB0);

		int ii=0;
		while(ii<3) {
 128:	23 30       	cpi	r18, 0x03	; 3
 12a:	31 05       	cpc	r19, r1
 12c:	79 f3       	breq	.-34     	; 0x10c <main+0x48>
 12e:	88 ee       	ldi	r24, 0xE8	; 232
 130:	93 e0       	ldi	r25, 0x03	; 3
 132:	f3 cf       	rjmp	.-26     	; 0x11a <main+0x56>

00000134 <i2c_init>:
#define Prescaler 1
#define TWBR_val 0x20 // calculated: ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (char)TWBR_val;
 134:	80 e2       	ldi	r24, 0x20	; 32
 136:	80 93 b8 00 	sts	0x00B8, r24
}
 13a:	08 95       	ret

0000013c <i2c_start>:

char i2c_start(char address)
{
 13c:	98 2f       	mov	r25, r24
	// reset TWI control register
	//TWCR = 0;
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 13e:	84 ea       	ldi	r24, 0xA4	; 164
 140:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 144:	80 91 bc 00 	lds	r24, 0x00BC
 148:	87 ff       	sbrs	r24, 7
 14a:	fc cf       	rjmp	.-8      	; 0x144 <i2c_start+0x8>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 14c:	80 91 b9 00 	lds	r24, 0x00B9
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	88 30       	cpi	r24, 0x08	; 8
 154:	11 f0       	breq	.+4      	; 0x15a <i2c_start+0x1e>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
 15a:	90 93 bb 00 	sts	0x00BB, r25
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 15e:	84 e8       	ldi	r24, 0x84	; 132
 160:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 164:	80 91 bc 00 	lds	r24, 0x00BC
 168:	87 ff       	sbrs	r24, 7
 16a:	fc cf       	rjmp	.-8      	; 0x164 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	char twst = TW_STATUS & 0xF8;
 16c:	80 91 b9 00 	lds	r24, 0x00B9
 170:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {return 2;}
 172:	88 31       	cpi	r24, 0x18	; 24
 174:	21 f0       	breq	.+8      	; 0x17e <i2c_start+0x42>
 176:	80 34       	cpi	r24, 0x40	; 64
 178:	11 f0       	breq	.+4      	; 0x17e <i2c_start+0x42>
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	08 95       	ret
 17e:	80 e0       	ldi	r24, 0x00	; 0
	

	return 0;
}
 180:	08 95       	ret

00000182 <i2c_write>:

char i2c_write(char data)
{
	// load data into data register
	TWDR = data;
 182:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 186:	84 e8       	ldi	r24, 0x84	; 132
 188:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 18c:	80 91 bc 00 	lds	r24, 0x00BC
 190:	87 ff       	sbrs	r24, 7
 192:	fc cf       	rjmp	.-8      	; 0x18c <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 194:	80 91 b9 00 	lds	r24, 0x00B9
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	88 7f       	andi	r24, 0xF8	; 248
 19c:	88 32       	cpi	r24, 0x28	; 40
 19e:	09 f0       	breq	.+2      	; 0x1a2 <i2c_write+0x20>
 1a0:	91 e0       	ldi	r25, 0x01	; 1
	
	return 0;
}
 1a2:	89 2f       	mov	r24, r25
 1a4:	08 95       	ret

000001a6 <i2c_read_ack>:

char i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 1a6:	84 ec       	ldi	r24, 0xC4	; 196
 1a8:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 1ac:	80 91 bc 00 	lds	r24, 0x00BC
 1b0:	87 ff       	sbrs	r24, 7
 1b2:	fc cf       	rjmp	.-8      	; 0x1ac <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
 1b4:	80 91 bb 00 	lds	r24, 0x00BB
}
 1b8:	08 95       	ret

000001ba <i2c_read_nack>:

char i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 1ba:	84 e8       	ldi	r24, 0x84	; 132
 1bc:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 1c0:	80 91 bc 00 	lds	r24, 0x00BC
 1c4:	87 ff       	sbrs	r24, 7
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
 1c8:	80 91 bb 00 	lds	r24, 0x00BB
}
 1cc:	08 95       	ret

000001ce <i2c_transmit>:

char i2c_transmit(char address, char* data, int length)
{
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	7b 01       	movw	r14, r22
 1dc:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) {return 1;}
 1de:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_start>
 1e2:	88 23       	and	r24, r24
 1e4:	a1 f4       	brne	.+40     	; 0x20e <i2c_transmit+0x40>
 1e6:	c0 e0       	ldi	r28, 0x00	; 0
 1e8:	d0 e0       	ldi	r29, 0x00	; 0
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <i2c_transmit+0x30>
	
	for (int i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) {return 1;}
 1ec:	f7 01       	movw	r30, r14
 1ee:	ec 0f       	add	r30, r28
 1f0:	fd 1f       	adc	r31, r29
 1f2:	80 81       	ld	r24, Z
 1f4:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_write>
 1f8:	88 23       	and	r24, r24
 1fa:	49 f4       	brne	.+18     	; 0x20e <i2c_transmit+0x40>

char i2c_transmit(char address, char* data, int length)
{
	if (i2c_start(address | I2C_WRITE)) {return 1;}
	
	for (int i = 0; i < length; i++)
 1fc:	21 96       	adiw	r28, 0x01	; 1
 1fe:	c0 17       	cp	r28, r16
 200:	d1 07       	cpc	r29, r17
 202:	a4 f3       	brlt	.-24     	; 0x1ec <i2c_transmit+0x1e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 204:	84 e9       	ldi	r24, 0x94	; 148
 206:	80 93 bc 00 	sts	0x00BC, r24
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	01 c0       	rjmp	.+2      	; 0x210 <i2c_transmit+0x42>
		if (i2c_write(data[i])) {return 1;}
	}
	
	i2c_stop();
	
	return 0;
 20e:	81 e0       	ldi	r24, 0x01	; 1
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	08 95       	ret

0000021e <i2c_receive>:

char i2c_receive(char address, char* data, int length)
{
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	eb 01       	movw	r28, r22
 228:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_READ)) {return 1;}
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_start>
 230:	88 23       	and	r24, r24
 232:	11 f0       	breq	.+4      	; 0x238 <i2c_receive+0x1a>
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	29 c0       	rjmp	.+82     	; 0x28a <i2c_receive+0x6c>
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int i = 0; i < (length-1); i++)
 23c:	a8 01       	movw	r20, r16
 23e:	41 50       	subi	r20, 0x01	; 1
 240:	50 40       	sbci	r21, 0x00	; 0

char i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 242:	94 ec       	ldi	r25, 0xC4	; 196
 244:	0e c0       	rjmp	.+28     	; 0x262 <i2c_receive+0x44>
 246:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 24a:	80 91 bc 00 	lds	r24, 0x00BC
 24e:	87 ff       	sbrs	r24, 7
 250:	fc cf       	rjmp	.-8      	; 0x24a <i2c_receive+0x2c>
	// return received data from TWDR
	return TWDR;
 252:	80 91 bb 00 	lds	r24, 0x00BB
{
	if (i2c_start(address | I2C_READ)) {return 1;}
	
	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 256:	fe 01       	movw	r30, r28
 258:	e2 0f       	add	r30, r18
 25a:	f3 1f       	adc	r31, r19
 25c:	80 83       	st	Z, r24

char i2c_receive(char address, char* data, int length)
{
	if (i2c_start(address | I2C_READ)) {return 1;}
	
	for (int i = 0; i < (length-1); i++)
 25e:	2f 5f       	subi	r18, 0xFF	; 255
 260:	3f 4f       	sbci	r19, 0xFF	; 255
 262:	24 17       	cp	r18, r20
 264:	35 07       	cpc	r19, r21
 266:	7c f3       	brlt	.-34     	; 0x246 <i2c_receive+0x28>

char i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 268:	84 e8       	ldi	r24, 0x84	; 132
 26a:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 26e:	80 91 bc 00 	lds	r24, 0x00BC
 272:	87 ff       	sbrs	r24, 7
 274:	fc cf       	rjmp	.-8      	; 0x26e <i2c_receive+0x50>
	// return received data from TWDR
	return TWDR;
 276:	80 91 bb 00 	lds	r24, 0x00BB
	
	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 27a:	c0 0f       	add	r28, r16
 27c:	d1 1f       	adc	r29, r17
 27e:	21 97       	sbiw	r28, 0x01	; 1
 280:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 282:	84 e9       	ldi	r24, 0x94	; 148
 284:	80 93 bc 00 	sts	0x00BC, r24
 288:	80 e0       	ldi	r24, 0x00	; 0
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <i2c_writeReg>:

char i2c_writeReg(char devaddr, char regaddr, char* data, int length)
{
 294:	cf 92       	push	r12
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	16 2f       	mov	r17, r22
 2a4:	6a 01       	movw	r12, r20
 2a6:	79 01       	movw	r14, r18
	if (i2c_start(devaddr | 0x00)) { return 1; }
 2a8:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_start>
 2ac:	88 23       	and	r24, r24
 2ae:	b9 f4       	brne	.+46     	; 0x2de <i2c_writeReg+0x4a>

	i2c_write(regaddr);
 2b0:	81 2f       	mov	r24, r17
 2b2:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_write>
 2b6:	c0 e0       	ldi	r28, 0x00	; 0
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <i2c_writeReg+0x3a>

	for (int i = 0; i < length; i++)
	{
		if (i2c_write(data[i])){ return 1; }
 2bc:	f6 01       	movw	r30, r12
 2be:	ec 0f       	add	r30, r28
 2c0:	fd 1f       	adc	r31, r29
 2c2:	80 81       	ld	r24, Z
 2c4:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_write>
 2c8:	88 23       	and	r24, r24
 2ca:	49 f4       	brne	.+18     	; 0x2de <i2c_writeReg+0x4a>
{
	if (i2c_start(devaddr | 0x00)) { return 1; }

	i2c_write(regaddr);

	for (int i = 0; i < length; i++)
 2cc:	21 96       	adiw	r28, 0x01	; 1
 2ce:	ce 15       	cp	r28, r14
 2d0:	df 05       	cpc	r29, r15
 2d2:	a4 f3       	brlt	.-24     	; 0x2bc <i2c_writeReg+0x28>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 2d4:	84 e9       	ldi	r24, 0x94	; 148
 2d6:	80 93 bc 00 	sts	0x00BC, r24
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <i2c_writeReg+0x4c>
		if (i2c_write(data[i])){ return 1; }
	}

	i2c_stop();

	return 0;
 2de:	81 e0       	ldi	r24, 0x01	; 1
}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	ff 90       	pop	r15
 2e8:	ef 90       	pop	r14
 2ea:	df 90       	pop	r13
 2ec:	cf 90       	pop	r12
 2ee:	08 95       	ret

000002f0 <i2c_readReg>:

char i2c_readReg(char devaddr, char regaddr, char* data, int length)
{
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	0f 93       	push	r16
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	18 2f       	mov	r17, r24
 2fe:	06 2f       	mov	r16, r22
 300:	ea 01       	movw	r28, r20
 302:	79 01       	movw	r14, r18
	if (i2c_start(devaddr)) { return 1; }
 304:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_start>
 308:	88 23       	and	r24, r24
 30a:	99 f5       	brne	.+102    	; 0x372 <i2c_readReg+0x82>

	i2c_write(regaddr);
 30c:	80 2f       	mov	r24, r16
 30e:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_write>

	if (i2c_start(devaddr | 0x01)) { return 1; }
 312:	81 2f       	mov	r24, r17
 314:	81 60       	ori	r24, 0x01	; 1
 316:	0e 94 9e 00 	call	0x13c	; 0x13c <i2c_start>
 31a:	88 23       	and	r24, r24
 31c:	51 f5       	brne	.+84     	; 0x372 <i2c_readReg+0x82>
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0

	for (int i = 0; i < (length-1); i++)
 322:	a7 01       	movw	r20, r14
 324:	41 50       	subi	r20, 0x01	; 1
 326:	50 40       	sbci	r21, 0x00	; 0

char i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 328:	94 ec       	ldi	r25, 0xC4	; 196
 32a:	0e c0       	rjmp	.+28     	; 0x348 <i2c_readReg+0x58>
 32c:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 330:	80 91 bc 00 	lds	r24, 0x00BC
 334:	87 ff       	sbrs	r24, 7
 336:	fc cf       	rjmp	.-8      	; 0x330 <i2c_readReg+0x40>
	// return received data from TWDR
	return TWDR;
 338:	80 91 bb 00 	lds	r24, 0x00BB

	if (i2c_start(devaddr | 0x01)) { return 1; }

	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 33c:	fe 01       	movw	r30, r28
 33e:	e2 0f       	add	r30, r18
 340:	f3 1f       	adc	r31, r19
 342:	80 83       	st	Z, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) { return 1; }

	for (int i = 0; i < (length-1); i++)
 344:	2f 5f       	subi	r18, 0xFF	; 255
 346:	3f 4f       	sbci	r19, 0xFF	; 255
 348:	24 17       	cp	r18, r20
 34a:	35 07       	cpc	r19, r21
 34c:	7c f3       	brlt	.-34     	; 0x32c <i2c_readReg+0x3c>

char i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 34e:	84 e8       	ldi	r24, 0x84	; 132
 350:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 354:	80 91 bc 00 	lds	r24, 0x00BC
 358:	87 ff       	sbrs	r24, 7
 35a:	fc cf       	rjmp	.-8      	; 0x354 <i2c_readReg+0x64>
	// return received data from TWDR
	return TWDR;
 35c:	80 91 bb 00 	lds	r24, 0x00BB

	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 360:	ce 0d       	add	r28, r14
 362:	df 1d       	adc	r29, r15
 364:	21 97       	sbiw	r28, 0x01	; 1
 366:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 368:	84 e9       	ldi	r24, 0x94	; 148
 36a:	80 93 bc 00 	sts	0x00BC, r24
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	01 c0       	rjmp	.+2      	; 0x374 <i2c_readReg+0x84>
	}
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
 372:	81 e0       	ldi	r24, 0x01	; 1
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	08 95       	ret

00000382 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 382:	84 e9       	ldi	r24, 0x94	; 148
 384:	80 93 bc 00 	sts	0x00BC, r24
}
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
