
IRComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000362  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000e0  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000528  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000020e  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000052f  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000f0  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000197  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000028c  00000000  00000000  000013c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <whoAmI>:
	i2c_init();

	// set necessary register values
}

void whoAmI(void) {
  80:	1f 93       	push	r17
	
	PORTB &= ~(1<<PORTB1);	
  82:	29 98       	cbi	0x05, 1	; 5

	i2c_start(LSM9DS1_WRITE);
  84:	84 ed       	ldi	r24, 0xD4	; 212
  86:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_start>
	i2c_write(0x0F); // who am I register 
  8a:	8f e0       	ldi	r24, 0x0F	; 15
  8c:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
	i2c_stop();
  90:	0e 94 ab 01 	call	0x356	; 0x356 <i2c_stop>

	i2c_start(LSM9DS1_READ);
  94:	85 ed       	ldi	r24, 0xD5	; 213
  96:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_start>
	int who = i2c_read_nack();
  9a:	0e 94 c7 00 	call	0x18e	; 0x18e <i2c_read_nack>
  9e:	18 2f       	mov	r17, r24
	i2c_stop();
  a0:	0e 94 ab 01 	call	0x356	; 0x356 <i2c_stop>

	if (who == 0b01101000) { // who am I register value
  a4:	18 36       	cpi	r17, 0x68	; 104
  a6:	11 f4       	brne	.+4      	; 0xac <whoAmI+0x2c>
		PORTB |= (1<<PORTB0);
  a8:	28 9a       	sbi	0x05, 0	; 5
  aa:	01 c0       	rjmp	.+2      	; 0xae <whoAmI+0x2e>
	} else {
		PORTB |= (1<<PORTB2);
  ac:	2a 9a       	sbi	0x05, 2	; 5
  ae:	80 ed       	ldi	r24, 0xD0	; 208
  b0:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b2:	28 ec       	ldi	r18, 0xC8	; 200
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <whoAmI+0x38>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  be:	d9 f7       	brne	.-10     	; 0xb6 <whoAmI+0x36>
	} 

	_delay_ms(200);

	PORTB |= (1<<PORTB1);
  c0:	29 9a       	sbi	0x05, 1	; 5
}
  c2:	1f 91       	pop	r17
  c4:	08 95       	ret

000000c6 <imu_init>:
}


void imu_init(void) {
	
	i2c_init();
  c6:	0e 94 81 00 	call	0x102	; 0x102 <i2c_init>

	// set necessary register values
}
  ca:	08 95       	ret

000000cc <main>:
int get_ay(void);
int get_gz(void); */

int main(void) {

	DDRB=0;
  cc:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
  ce:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
  d0:	87 e0       	ldi	r24, 0x07	; 7
  d2:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7);
  d4:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
  d6:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
  d8:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
  da:	2f 98       	cbi	0x05, 7	; 5
}


void imu_init(void) {
	
	i2c_init();
  dc:	0e 94 81 00 	call	0x102	; 0x102 <i2c_init>
	PORTB &=~(1<<7);

	imu_init();

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
  e0:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
  e2:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
  e4:	2a 9a       	sbi	0x05, 2	; 5
  e6:	80 ed       	ldi	r24, 0xD0	; 208
  e8:	97 e0       	ldi	r25, 0x07	; 7
  ea:	28 ec       	ldi	r18, 0xC8	; 200
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	f9 01       	movw	r30, r18
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f6:	d9 f7       	brne	.-10     	; 0xee <main+0x22>
	//PORTC |= (1<<PORTC3); // IR
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
  f8:	28 98       	cbi	0x05, 0	; 5
	//PORTB &= ~(1<<PORTB1);
	PORTB &= ~(1<<PORTB2);
  fa:	2a 98       	cbi	0x05, 2	; 5
		// integrate gyroscope

		// turn on LEDs based on heading position


		whoAmI(); // test comms
  fc:	0e 94 40 00 	call	0x80	; 0x80 <whoAmI>
 100:	fd cf       	rjmp	.-6      	; 0xfc <main+0x30>

00000102 <i2c_init>:
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 102:	80 e2       	ldi	r24, 0x20	; 32
 104:	80 93 b8 00 	sts	0x00B8, r24
}
 108:	08 95       	ret

0000010a <i2c_start>:

uint8_t i2c_start(uint8_t address)
{
 10a:	98 2f       	mov	r25, r24
	// reset TWI control register
	TWCR = 0;
 10c:	10 92 bc 00 	sts	0x00BC, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 110:	84 ea       	ldi	r24, 0xA4	; 164
 112:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 116:	80 91 bc 00 	lds	r24, 0x00BC
 11a:	87 ff       	sbrs	r24, 7
 11c:	fc cf       	rjmp	.-8      	; 0x116 <i2c_start+0xc>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 11e:	80 91 b9 00 	lds	r24, 0x00B9
 122:	88 7f       	andi	r24, 0xF8	; 248
 124:	88 30       	cpi	r24, 0x08	; 8
 126:	11 f0       	breq	.+4      	; 0x12c <i2c_start+0x22>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
 12c:	90 93 bb 00 	sts	0x00BB, r25
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 130:	84 e8       	ldi	r24, 0x84	; 132
 132:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 136:	80 91 bc 00 	lds	r24, 0x00BC
 13a:	87 ff       	sbrs	r24, 7
 13c:	fc cf       	rjmp	.-8      	; 0x136 <i2c_start+0x2c>
	
	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
 13e:	90 91 b9 00 	lds	r25, 0x00B9
 142:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 144:	98 31       	cpi	r25, 0x18	; 24
 146:	11 f4       	brne	.+4      	; 0x14c <i2c_start+0x42>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 34       	cpi	r25, 0x40	; 64
 150:	09 f0       	breq	.+2      	; 0x154 <i2c_start+0x4a>
 152:	81 e0       	ldi	r24, 0x01	; 1
	
	return 0;
}
 154:	08 95       	ret

00000156 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
	// load data into data register
	TWDR = data;
 156:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 160:	80 91 bc 00 	lds	r24, 0x00BC
 164:	87 ff       	sbrs	r24, 7
 166:	fc cf       	rjmp	.-8      	; 0x160 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 168:	80 91 b9 00 	lds	r24, 0x00B9
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	88 7f       	andi	r24, 0xF8	; 248
 170:	88 32       	cpi	r24, 0x28	; 40
 172:	09 f0       	breq	.+2      	; 0x176 <i2c_write+0x20>
 174:	91 e0       	ldi	r25, 0x01	; 1
	
	return 0;
}
 176:	89 2f       	mov	r24, r25
 178:	08 95       	ret

0000017a <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 17a:	84 ec       	ldi	r24, 0xC4	; 196
 17c:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 180:	80 91 bc 00 	lds	r24, 0x00BC
 184:	87 ff       	sbrs	r24, 7
 186:	fc cf       	rjmp	.-8      	; 0x180 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
 188:	80 91 bb 00 	lds	r24, 0x00BB
}
 18c:	08 95       	ret

0000018e <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 18e:	84 e8       	ldi	r24, 0x84	; 132
 190:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 194:	80 91 bc 00 	lds	r24, 0x00BC
 198:	87 ff       	sbrs	r24, 7
 19a:	fc cf       	rjmp	.-8      	; 0x194 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
 19c:	80 91 bb 00 	lds	r24, 0x00BB
}
 1a0:	08 95       	ret

000001a2 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	7b 01       	movw	r14, r22
 1b0:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
 1b2:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_start>
 1b6:	88 23       	and	r24, r24
 1b8:	a1 f4       	brne	.+40     	; 0x1e2 <i2c_transmit+0x40>
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	09 c0       	rjmp	.+18     	; 0x1d2 <i2c_transmit+0x30>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 1c0:	f7 01       	movw	r30, r14
 1c2:	ec 0f       	add	r30, r28
 1c4:	fd 1f       	adc	r31, r29
 1c6:	80 81       	ld	r24, Z
 1c8:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
 1cc:	88 23       	and	r24, r24
 1ce:	49 f4       	brne	.+18     	; 0x1e2 <i2c_transmit+0x40>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
 1d0:	21 96       	adiw	r28, 0x01	; 1
 1d2:	c0 17       	cp	r28, r16
 1d4:	d1 07       	cpc	r29, r17
 1d6:	a0 f3       	brcs	.-24     	; 0x1c0 <i2c_transmit+0x1e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 1d8:	84 e9       	ldi	r24, 0x94	; 148
 1da:	80 93 bc 00 	sts	0x00BC, r24
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <i2c_transmit+0x42>
		if (i2c_write(data[i])) return 1;
	}
	
	i2c_stop();
	
	return 0;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	08 95       	ret

000001f2 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	eb 01       	movw	r28, r22
 1fc:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_READ)) return 1;
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_start>
 204:	88 23       	and	r24, r24
 206:	11 f0       	breq	.+4      	; 0x20c <i2c_receive+0x1a>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	29 c0       	rjmp	.+82     	; 0x25e <i2c_receive+0x6c>
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
	
	for (uint16_t i = 0; i < (length-1); i++)
 210:	a8 01       	movw	r20, r16
 212:	41 50       	subi	r20, 0x01	; 1
 214:	50 40       	sbci	r21, 0x00	; 0

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 216:	94 ec       	ldi	r25, 0xC4	; 196
 218:	0e c0       	rjmp	.+28     	; 0x236 <i2c_receive+0x44>
 21a:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 21e:	80 91 bc 00 	lds	r24, 0x00BC
 222:	87 ff       	sbrs	r24, 7
 224:	fc cf       	rjmp	.-8      	; 0x21e <i2c_receive+0x2c>
	// return received data from TWDR
	return TWDR;
 226:	80 91 bb 00 	lds	r24, 0x00BB
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 22a:	fe 01       	movw	r30, r28
 22c:	e2 0f       	add	r30, r18
 22e:	f3 1f       	adc	r31, r19
 230:	80 83       	st	Z, r24

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;
	
	for (uint16_t i = 0; i < (length-1); i++)
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	24 17       	cp	r18, r20
 238:	35 07       	cpc	r19, r21
 23a:	78 f3       	brcs	.-34     	; 0x21a <i2c_receive+0x28>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 23c:	84 e8       	ldi	r24, 0x84	; 132
 23e:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 242:	80 91 bc 00 	lds	r24, 0x00BC
 246:	87 ff       	sbrs	r24, 7
 248:	fc cf       	rjmp	.-8      	; 0x242 <i2c_receive+0x50>
	// return received data from TWDR
	return TWDR;
 24a:	80 91 bb 00 	lds	r24, 0x00BB
	
	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 24e:	c0 0f       	add	r28, r16
 250:	d1 1f       	adc	r29, r17
 252:	21 97       	sbiw	r28, 0x01	; 1
 254:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 256:	84 e9       	ldi	r24, 0x94	; 148
 258:	80 93 bc 00 	sts	0x00BC, r24
 25c:	80 e0       	ldi	r24, 0x00	; 0
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	16 2f       	mov	r17, r22
 278:	6a 01       	movw	r12, r20
 27a:	79 01       	movw	r14, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 27c:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_start>
 280:	88 23       	and	r24, r24
 282:	b9 f4       	brne	.+46     	; 0x2b2 <i2c_writeReg+0x4a>

	i2c_write(regaddr);
 284:	81 2f       	mov	r24, r17
 286:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	d0 e0       	ldi	r29, 0x00	; 0
 28e:	09 c0       	rjmp	.+18     	; 0x2a2 <i2c_writeReg+0x3a>

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 290:	f6 01       	movw	r30, r12
 292:	ec 0f       	add	r30, r28
 294:	fd 1f       	adc	r31, r29
 296:	80 81       	ld	r24, Z
 298:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>
 29c:	88 23       	and	r24, r24
 29e:	49 f4       	brne	.+18     	; 0x2b2 <i2c_writeReg+0x4a>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 2a0:	21 96       	adiw	r28, 0x01	; 1
 2a2:	ce 15       	cp	r28, r14
 2a4:	df 05       	cpc	r29, r15
 2a6:	a0 f3       	brcs	.-24     	; 0x290 <i2c_writeReg+0x28>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 2a8:	84 e9       	ldi	r24, 0x94	; 148
 2aa:	80 93 bc 00 	sts	0x00BC, r24
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <i2c_writeReg+0x4c>
		if (i2c_write(data[i])) return 1;
	}

	i2c_stop();

	return 0;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	df 90       	pop	r13
 2c0:	cf 90       	pop	r12
 2c2:	08 95       	ret

000002c4 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	18 2f       	mov	r17, r24
 2d2:	06 2f       	mov	r16, r22
 2d4:	ea 01       	movw	r28, r20
 2d6:	79 01       	movw	r14, r18
	if (i2c_start(devaddr)) return 1;
 2d8:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_start>
 2dc:	88 23       	and	r24, r24
 2de:	99 f5       	brne	.+102    	; 0x346 <i2c_readReg+0x82>

	i2c_write(regaddr);
 2e0:	80 2f       	mov	r24, r16
 2e2:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 2e6:	81 2f       	mov	r24, r17
 2e8:	81 60       	ori	r24, 0x01	; 1
 2ea:	0e 94 85 00 	call	0x10a	; 0x10a <i2c_start>
 2ee:	88 23       	and	r24, r24
 2f0:	51 f5       	brne	.+84     	; 0x346 <i2c_readReg+0x82>
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0

	for (uint16_t i = 0; i < (length-1); i++)
 2f6:	a7 01       	movw	r20, r14
 2f8:	41 50       	subi	r20, 0x01	; 1
 2fa:	50 40       	sbci	r21, 0x00	; 0

uint8_t i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 2fc:	94 ec       	ldi	r25, 0xC4	; 196
 2fe:	0e c0       	rjmp	.+28     	; 0x31c <i2c_readReg+0x58>
 300:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 304:	80 91 bc 00 	lds	r24, 0x00BC
 308:	87 ff       	sbrs	r24, 7
 30a:	fc cf       	rjmp	.-8      	; 0x304 <i2c_readReg+0x40>
	// return received data from TWDR
	return TWDR;
 30c:	80 91 bb 00 	lds	r24, 0x00BB

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 310:	fe 01       	movw	r30, r28
 312:	e2 0f       	add	r30, r18
 314:	f3 1f       	adc	r31, r19
 316:	80 83       	st	Z, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 318:	2f 5f       	subi	r18, 0xFF	; 255
 31a:	3f 4f       	sbci	r19, 0xFF	; 255
 31c:	24 17       	cp	r18, r20
 31e:	35 07       	cpc	r19, r21
 320:	78 f3       	brcs	.-34     	; 0x300 <i2c_readReg+0x3c>

uint8_t i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 322:	84 e8       	ldi	r24, 0x84	; 132
 324:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 328:	80 91 bc 00 	lds	r24, 0x00BC
 32c:	87 ff       	sbrs	r24, 7
 32e:	fc cf       	rjmp	.-8      	; 0x328 <i2c_readReg+0x64>
	// return received data from TWDR
	return TWDR;
 330:	80 91 bb 00 	lds	r24, 0x00BB

	for (uint16_t i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 334:	ce 0d       	add	r28, r14
 336:	df 1d       	adc	r29, r15
 338:	21 97       	sbiw	r28, 0x01	; 1
 33a:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 33c:	84 e9       	ldi	r24, 0x94	; 148
 33e:	80 93 bc 00 	sts	0x00BC, r24
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	01 c0       	rjmp	.+2      	; 0x348 <i2c_readReg+0x84>
	}
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
 346:	81 e0       	ldi	r24, 0x01	; 1
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	08 95       	ret

00000356 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 356:	84 e9       	ldi	r24, 0x94	; 148
 358:	80 93 bc 00 	sts	0x00BC, r24
}
 35c:	08 95       	ret

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
