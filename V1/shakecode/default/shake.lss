
shake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003a  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000018b  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fa  00000000  00000000  00000345  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c8  00000000  00000000  0000043f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f0  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000090  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <set_out_led>:
	}		
}

void set_out_led(int state)
{
	DDRD |= (1<<3);
  80:	53 9a       	sbi	0x0a, 3	; 10
	PORTD |= (1<<3);
  82:	5b 9a       	sbi	0x0b, 3	; 11
	if(state==1)
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	11 f4       	brne	.+4      	; 0x8c <set_out_led+0xc>
	{
		PIND |= (1<<3);
  88:	4b 9a       	sbi	0x09, 3	; 9
  8a:	08 95       	ret
	}
	else
	{
		PIND &= ~(1<<3);
  8c:	4b 98       	cbi	0x09, 3	; 9
  8e:	08 95       	ret

00000090 <set_up_led>:
	}

}
void set_up_led(int state)
{
	DDRD |= (1<<4);
  90:	54 9a       	sbi	0x0a, 4	; 10
	PORTD |= (1<<4);
  92:	5c 9a       	sbi	0x0b, 4	; 11
	if(state==1)
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	11 f4       	brne	.+4      	; 0x9c <set_up_led+0xc>
	{
		PIND |= (1<<4);
  98:	4c 9a       	sbi	0x09, 4	; 9
  9a:	08 95       	ret
	}
	else
	{
		PIND &= ~(1<<4);
  9c:	4c 98       	cbi	0x09, 4	; 9
  9e:	08 95       	ret

000000a0 <main>:

void set_up_led(int);
void set_out_led(int);

int main(void)
{
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
	DDRB=0xff; // PortB as output
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00; // All pins low
  aa:	15 b8       	out	0x05, r1	; 5
	
	unsigned int i;
	int state = 0;

	set_out_led(1);
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 40 00 	call	0x80	; 0x80 <set_out_led>
	set_up_led(1);
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 48 00 	call	0x90	; 0x90 <set_up_led>
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c0:	28 ec       	ldi	r18, 0xC8	; 200
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  cc:	d9 f7       	brne	.-10     	; 0xc4 <main+0x24>
	_delay_ms(1000);
	set_up_led(0);	
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 48 00 	call	0x90	; 0x90 <set_up_led>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
	while(1==1) // infinite loop sending one bits
	{
		for(i=0;i<65535;i++);
		for(i=0;i<65535;i++);		
		//PORTB |= (1<<PB0); // always set to 1
		tbi(PORTB,PB0); // toggle
  da:	11 e0       	ldi	r17, 0x01	; 1
	int state = 0;

	set_out_led(1);
	set_up_led(1);
	_delay_ms(1000);
	set_up_led(0);	
  dc:	ec 01       	movw	r28, r24
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0

	while(1==1) // infinite loop sending one bits
	{
		for(i=0;i<65535;i++);
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	8f 3f       	cpi	r24, 0xFF	; 255
  e8:	92 07       	cpc	r25, r18
  ea:	d9 f7       	brne	.-10     	; 0xe2 <main+0x42>
		for(i=0;i<65535;i++);		
		//PORTB |= (1<<PB0); // always set to 1
		tbi(PORTB,PB0); // toggle
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	81 27       	eor	r24, r17
  f0:	85 b9       	out	0x05, r24	; 5
		set_out_led(state);
  f2:	ce 01       	movw	r24, r28
  f4:	0e 94 40 00 	call	0x80	; 0x80 <set_out_led>
		if (state==1) { state=0; }
  f8:	c1 30       	cpi	r28, 0x01	; 1
  fa:	d1 05       	cpc	r29, r1
  fc:	81 f3       	breq	.-32     	; 0xde <main+0x3e>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
		if (state==0) { state=1; }	
 102:	20 97       	sbiw	r28, 0x00	; 0
 104:	61 f7       	brne	.-40     	; 0xde <main+0x3e>
 106:	ea cf       	rjmp	.-44     	; 0xdc <main+0x3c>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
