
IMUtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000428  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000428  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000010d  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000629  00000000  00000000  000005f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000278  00000000  00000000  00000c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000059e  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001cc  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002fa  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000019fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  8e:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <whoAmI>:
	
	return gz;
}


void whoAmI(void) {
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	0f 92       	push	r0
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	
	//PORTB |= (1<<PORTB2);	// turn on LED to signal transmission
	char who = 0; // stored rcvd value here
  a0:	19 82       	std	Y+1, r1	; 0x01
	char test = 0;
	
	test = i2c_readReg(LSM9DS1_WRITE, WHO_AM_I_REG, &who, 1); //also could be used
  a2:	88 e3       	ldi	r24, 0x38	; 56
  a4:	6f e0       	ldi	r22, 0x0F	; 15
  a6:	ae 01       	movw	r20, r28
  a8:	4f 5f       	subi	r20, 0xFF	; 255
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	0e 94 c3 01 	call	0x386	; 0x386 <i2c_readReg>
	i2c_start(LSM9DS1_READ);
	//if (test3==1) { PORTB |= (1<<PORTB1); }
	
	who = i2c_read_nack();
	i2c_stop(); */
	if (test == 2) { PORTB |= (1<<PORTB2); }
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	09 f4       	brne	.+2      	; 0xba <whoAmI+0x24>
  b8:	2a 9a       	sbi	0x05, 2	; 5


	if (who == 0x68) { // who am I register value (0x68)
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	88 36       	cpi	r24, 0x68	; 104
  be:	11 f4       	brne	.+4      	; 0xc4 <whoAmI+0x2e>
		PORTB |= (1<<PORTB2);
  c0:	2a 9a       	sbi	0x05, 2	; 5
  c2:	03 c0       	rjmp	.+6      	; 0xca <whoAmI+0x34>
	} else if (who == 0x3D) {
  c4:	8d 33       	cpi	r24, 0x3D	; 61
  c6:	09 f4       	brne	.+2      	; 0xca <whoAmI+0x34>
		PORTB |= (1<<PORTB1);
  c8:	29 9a       	sbi	0x05, 1	; 5
  ca:	80 ed       	ldi	r24, 0xD0	; 208
  cc:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ce:	28 ec       	ldi	r18, 0xC8	; 200
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	f9 01       	movw	r30, r18
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <whoAmI+0x3e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  da:	d9 f7       	brne	.-10     	; 0xd2 <whoAmI+0x3c>
	} 
	//PORTB |= (1<<PORTB2);

	_delay_ms(200);

	PORTB &= ~(1<<PORTB1); // turn off LEDs
  dc:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
  de:	2a 98       	cbi	0x05, 2	; 5
}
  e0:	0f 90       	pop	r0
  e2:	cf 91       	pop	r28
  e4:	df 91       	pop	r29
  e6:	08 95       	ret

000000e8 <get_gz>:

	// any other registers to set up?

}

int get_gz(void) {
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	00 d0       	rcall	.+0      	; 0xee <get_gz+0x6>
  ee:	0f 92       	push	r0
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62

	char temp[2]; // read two bytes
	int gz = 0; // store in a 16-bit int here

	// check if new data is available
	char check = 0;
  f4:	19 82       	std	Y+1, r1	; 0x01
	i2c_readReg(LSM9DS1_WRITE, STATUS_REG1, &check, 1);
  f6:	88 e3       	ldi	r24, 0x38	; 56
  f8:	67 e2       	ldi	r22, 0x27	; 39
  fa:	ae 01       	movw	r20, r28
  fc:	4f 5f       	subi	r20, 0xFF	; 255
  fe:	5f 4f       	sbci	r21, 0xFF	; 255
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	0e 94 c3 01 	call	0x386	; 0x386 <i2c_readReg>

	if (check | 0x02) { // if new gyro data is available
		i2c_readReg(LSM9DS1_WRITE, OUT_Z_L_G, temp, 2); // get both registers
 108:	88 e3       	ldi	r24, 0x38	; 56
 10a:	6c e1       	ldi	r22, 0x1C	; 28
 10c:	ae 01       	movw	r20, r28
 10e:	4e 5f       	subi	r20, 0xFE	; 254
 110:	5f 4f       	sbci	r21, 0xFF	; 255
 112:	22 e0       	ldi	r18, 0x02	; 2
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	0e 94 c3 01 	call	0x386	; 0x386 <i2c_readReg>
 11a:	9b 81       	ldd	r25, Y+3	; 0x03
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	2a 81       	ldd	r18, Y+2	; 0x02
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	28 2b       	or	r18, r24
 124:	39 2b       	or	r19, r25
		gz = (temp[1]<<8) | temp[0]; // shift and store values
	}
	
	return gz;
}
 126:	c9 01       	movw	r24, r18
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	cf 91       	pop	r28
 130:	df 91       	pop	r29
 132:	08 95       	ret

00000134 <imu_init>:


void imu_init(void) {
	
	// set gyro control registers
	i2c_writeReg(LSM9DS1_WRITE, CTRL_REG1_G, gyro_ctrl_reg, 4);
 134:	88 e3       	ldi	r24, 0x38	; 56
 136:	60 e1       	ldi	r22, 0x10	; 16
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	51 e0       	ldi	r21, 0x01	; 1
 13c:	24 e0       	ldi	r18, 0x04	; 4
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	0e 94 95 01 	call	0x32a	; 0x32a <i2c_writeReg>

	// set accel control registers
	i2c_writeReg(LSM9DS1_WRITE, CTRL_REG4, xl_ctrl_reg, 7);
 144:	88 e3       	ldi	r24, 0x38	; 56
 146:	6e e1       	ldi	r22, 0x1E	; 30
 148:	44 e0       	ldi	r20, 0x04	; 4
 14a:	51 e0       	ldi	r21, 0x01	; 1
 14c:	27 e0       	ldi	r18, 0x07	; 7
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	0e 94 95 01 	call	0x32a	; 0x32a <i2c_writeReg>

	// any other registers to set up?

}
 154:	08 95       	ret

00000156 <main>:
char xl_ctrl_reg[7] = {0b00111000, 0b00111000, 0b01010000, 0b00000000, 0b00000100, 0b00000000, 0b00000000};
// all 3 gyro axes enabled; all 3 xl axes enabled; 50Hz ODR, +-4g, no bandwidth filter;
// no high resolution mode, no filtering; adress incrementation enabled; i2c enabled, FIFO disabled; no self-test


int main(void) {
 156:	cf 93       	push	r28
 158:	df 93       	push	r29

	cli(); // disable interrupts
 15a:	f8 94       	cli

	DDRB=0;
 15c:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
 15e:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7);
 164:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
 166:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
 168:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
 16a:	2f 98       	cbi	0x05, 7	; 5

	// declare i2c pins as inputs
	DDRC=0;
 16c:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
 16e:	18 b8       	out	0x08, r1	; 8
	PORTC |= (1<<PORTC4);
 170:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= (1<<PORTC5);
 172:	45 9a       	sbi	0x08, 5	; 8

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
 174:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
 176:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
 178:	2a 9a       	sbi	0x05, 2	; 5
 17a:	80 ed       	ldi	r24, 0xD0	; 208
 17c:	97 e0       	ldi	r25, 0x07	; 7
 17e:	28 ec       	ldi	r18, 0xC8	; 200
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 188:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18a:	d9 f7       	brne	.-10     	; 0x182 <main+0x2c>
	//PORTC |= (1<<PORTC3); // IR
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
 18c:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
 18e:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
 190:	2a 98       	cbi	0x05, 2	; 5
	//PORTC &= ~(1<<PORTC3);

	i2c_init();
 192:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <i2c_init>
	
	//imu_init();

	PORTB |= (1<<PORTB0); // turn on one LED for imu init success
 196:	28 9a       	sbi	0x05, 0	; 5

	sei(); // enable interrupts
 198:	78 94       	sei
 19a:	c8 ec       	ldi	r28, 0xC8	; 200
 19c:	d0 e0       	ldi	r29, 0x00	; 0
			theta = 0;
		} */

		
		// who am I test
		PORTB |= (1<<PORTB0);
 19e:	28 9a       	sbi	0x05, 0	; 5

		whoAmI(); // test comms
 1a0:	0e 94 4b 00 	call	0x96	; 0x96 <whoAmI>

		PORTB &= ~(1<<PORTB0);
 1a4:	28 98       	cbi	0x05, 0	; 5
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	0a c0       	rjmp	.+20     	; 0x1c0 <main+0x6a>
 1ac:	fe 01       	movw	r30, r28
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b4:	d9 f7       	brne	.-10     	; 0x1ac <main+0x56>

		int ii=0;
		while(ii<3) {
			_delay_ms(100); // delay to keep loop from running too quickly
			ii++;
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255
		whoAmI(); // test comms

		PORTB &= ~(1<<PORTB0);

		int ii=0;
		while(ii<3) {
 1ba:	23 30       	cpi	r18, 0x03	; 3
 1bc:	31 05       	cpc	r19, r1
 1be:	79 f3       	breq	.-34     	; 0x19e <main+0x48>
 1c0:	88 ee       	ldi	r24, 0xE8	; 232
 1c2:	93 e0       	ldi	r25, 0x03	; 3
 1c4:	f3 cf       	rjmp	.-26     	; 0x1ac <main+0x56>

000001c6 <i2c_init>:
#define Prescaler 1
#define TWBR_val 0x20 // calculated: ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (char)TWBR_val;
 1c6:	80 e2       	ldi	r24, 0x20	; 32
 1c8:	80 93 b8 00 	sts	0x00B8, r24
}
 1cc:	08 95       	ret

000001ce <i2c_start>:

char i2c_start(char address)
{
 1ce:	98 2f       	mov	r25, r24
	// reset TWI control register
	TWCR = 0;
 1d0:	10 92 bc 00 	sts	0x00BC, r1
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 1d4:	84 ea       	ldi	r24, 0xA4	; 164
 1d6:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 1da:	80 91 bc 00 	lds	r24, 0x00BC
 1de:	87 ff       	sbrs	r24, 7
 1e0:	fc cf       	rjmp	.-8      	; 0x1da <i2c_start+0xc>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 1e2:	80 91 b9 00 	lds	r24, 0x00B9
 1e6:	88 7f       	andi	r24, 0xF8	; 248
 1e8:	88 30       	cpi	r24, 0x08	; 8
 1ea:	11 f0       	breq	.+4      	; 0x1f0 <i2c_start+0x22>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
 1f0:	90 93 bb 00 	sts	0x00BB, r25
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 1f4:	84 e8       	ldi	r24, 0x84	; 132
 1f6:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 1fa:	80 91 bc 00 	lds	r24, 0x00BC
 1fe:	87 ff       	sbrs	r24, 7
 200:	fc cf       	rjmp	.-8      	; 0x1fa <i2c_start+0x2c>
	
	// check if the device has acknowledged the READ / WRITE mode
	char twst = TW_STATUS & 0xF8;
 202:	80 91 b9 00 	lds	r24, 0x00B9
 206:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {return 2;}
 208:	88 31       	cpi	r24, 0x18	; 24
 20a:	21 f0       	breq	.+8      	; 0x214 <i2c_start+0x46>
 20c:	80 34       	cpi	r24, 0x40	; 64
 20e:	11 f0       	breq	.+4      	; 0x214 <i2c_start+0x46>
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	08 95       	ret
 214:	80 e0       	ldi	r24, 0x00	; 0
	

	return 0;
}
 216:	08 95       	ret

00000218 <i2c_write>:

char i2c_write(char data)
{
	// load data into data register
	TWDR = data;
 218:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 21c:	84 e8       	ldi	r24, 0x84	; 132
 21e:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 222:	80 91 bc 00 	lds	r24, 0x00BC
 226:	87 ff       	sbrs	r24, 7
 228:	fc cf       	rjmp	.-8      	; 0x222 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 22a:	80 91 b9 00 	lds	r24, 0x00B9
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	88 7f       	andi	r24, 0xF8	; 248
 232:	88 32       	cpi	r24, 0x28	; 40
 234:	09 f0       	breq	.+2      	; 0x238 <i2c_write+0x20>
 236:	91 e0       	ldi	r25, 0x01	; 1
	
	return 0;
}
 238:	89 2f       	mov	r24, r25
 23a:	08 95       	ret

0000023c <i2c_read_ack>:

char i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 23c:	84 ec       	ldi	r24, 0xC4	; 196
 23e:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 242:	80 91 bc 00 	lds	r24, 0x00BC
 246:	87 ff       	sbrs	r24, 7
 248:	fc cf       	rjmp	.-8      	; 0x242 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
 24a:	80 91 bb 00 	lds	r24, 0x00BB
}
 24e:	08 95       	ret

00000250 <i2c_read_nack>:

char i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 250:	84 e8       	ldi	r24, 0x84	; 132
 252:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 256:	80 91 bc 00 	lds	r24, 0x00BC
 25a:	87 ff       	sbrs	r24, 7
 25c:	fc cf       	rjmp	.-8      	; 0x256 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
 25e:	80 91 bb 00 	lds	r24, 0x00BB
}
 262:	08 95       	ret

00000264 <i2c_transmit>:

char i2c_transmit(char address, char* data, int length)
{
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	7b 01       	movw	r14, r22
 272:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) {return 1;}
 274:	0e 94 e7 00 	call	0x1ce	; 0x1ce <i2c_start>
 278:	88 23       	and	r24, r24
 27a:	a1 f4       	brne	.+40     	; 0x2a4 <i2c_transmit+0x40>
 27c:	c0 e0       	ldi	r28, 0x00	; 0
 27e:	d0 e0       	ldi	r29, 0x00	; 0
 280:	09 c0       	rjmp	.+18     	; 0x294 <i2c_transmit+0x30>
	
	for (int i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) {return 1;}
 282:	f7 01       	movw	r30, r14
 284:	ec 0f       	add	r30, r28
 286:	fd 1f       	adc	r31, r29
 288:	80 81       	ld	r24, Z
 28a:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_write>
 28e:	88 23       	and	r24, r24
 290:	49 f4       	brne	.+18     	; 0x2a4 <i2c_transmit+0x40>

char i2c_transmit(char address, char* data, int length)
{
	if (i2c_start(address | I2C_WRITE)) {return 1;}
	
	for (int i = 0; i < length; i++)
 292:	21 96       	adiw	r28, 0x01	; 1
 294:	c0 17       	cp	r28, r16
 296:	d1 07       	cpc	r29, r17
 298:	a4 f3       	brlt	.-24     	; 0x282 <i2c_transmit+0x1e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 29a:	84 e9       	ldi	r24, 0x94	; 148
 29c:	80 93 bc 00 	sts	0x00BC, r24
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <i2c_transmit+0x42>
		if (i2c_write(data[i])) {return 1;}
	}
	
	i2c_stop();
	
	return 0;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	ff 90       	pop	r15
 2b0:	ef 90       	pop	r14
 2b2:	08 95       	ret

000002b4 <i2c_receive>:

char i2c_receive(char address, char* data, int length)
{
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	eb 01       	movw	r28, r22
 2be:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_READ)) {return 1;}
 2c0:	81 60       	ori	r24, 0x01	; 1
 2c2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <i2c_start>
 2c6:	88 23       	and	r24, r24
 2c8:	11 f0       	breq	.+4      	; 0x2ce <i2c_receive+0x1a>
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	29 c0       	rjmp	.+82     	; 0x320 <i2c_receive+0x6c>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int i = 0; i < (length-1); i++)
 2d2:	a8 01       	movw	r20, r16
 2d4:	41 50       	subi	r20, 0x01	; 1
 2d6:	50 40       	sbci	r21, 0x00	; 0

char i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 2d8:	94 ec       	ldi	r25, 0xC4	; 196
 2da:	0e c0       	rjmp	.+28     	; 0x2f8 <i2c_receive+0x44>
 2dc:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 2e0:	80 91 bc 00 	lds	r24, 0x00BC
 2e4:	87 ff       	sbrs	r24, 7
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <i2c_receive+0x2c>
	// return received data from TWDR
	return TWDR;
 2e8:	80 91 bb 00 	lds	r24, 0x00BB
{
	if (i2c_start(address | I2C_READ)) {return 1;}
	
	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 2ec:	fe 01       	movw	r30, r28
 2ee:	e2 0f       	add	r30, r18
 2f0:	f3 1f       	adc	r31, r19
 2f2:	80 83       	st	Z, r24

char i2c_receive(char address, char* data, int length)
{
	if (i2c_start(address | I2C_READ)) {return 1;}
	
	for (int i = 0; i < (length-1); i++)
 2f4:	2f 5f       	subi	r18, 0xFF	; 255
 2f6:	3f 4f       	sbci	r19, 0xFF	; 255
 2f8:	24 17       	cp	r18, r20
 2fa:	35 07       	cpc	r19, r21
 2fc:	7c f3       	brlt	.-34     	; 0x2dc <i2c_receive+0x28>

char i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 2fe:	84 e8       	ldi	r24, 0x84	; 132
 300:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 304:	80 91 bc 00 	lds	r24, 0x00BC
 308:	87 ff       	sbrs	r24, 7
 30a:	fc cf       	rjmp	.-8      	; 0x304 <i2c_receive+0x50>
	// return received data from TWDR
	return TWDR;
 30c:	80 91 bb 00 	lds	r24, 0x00BB
	
	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 310:	c0 0f       	add	r28, r16
 312:	d1 1f       	adc	r29, r17
 314:	21 97       	sbiw	r28, 0x01	; 1
 316:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 318:	84 e9       	ldi	r24, 0x94	; 148
 31a:	80 93 bc 00 	sts	0x00BC, r24
 31e:	80 e0       	ldi	r24, 0x00	; 0
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	08 95       	ret

0000032a <i2c_writeReg>:

char i2c_writeReg(char devaddr, char regaddr, char* data, int length)
{
 32a:	cf 92       	push	r12
 32c:	df 92       	push	r13
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	16 2f       	mov	r17, r22
 33a:	6a 01       	movw	r12, r20
 33c:	79 01       	movw	r14, r18
	if (i2c_start(devaddr | 0x00)) { return 1; }
 33e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <i2c_start>
 342:	88 23       	and	r24, r24
 344:	b9 f4       	brne	.+46     	; 0x374 <i2c_writeReg+0x4a>

	i2c_write(regaddr);
 346:	81 2f       	mov	r24, r17
 348:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_write>
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	d0 e0       	ldi	r29, 0x00	; 0
 350:	09 c0       	rjmp	.+18     	; 0x364 <i2c_writeReg+0x3a>

	for (int i = 0; i < length; i++)
	{
		if (i2c_write(data[i])){ return 1; }
 352:	f6 01       	movw	r30, r12
 354:	ec 0f       	add	r30, r28
 356:	fd 1f       	adc	r31, r29
 358:	80 81       	ld	r24, Z
 35a:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_write>
 35e:	88 23       	and	r24, r24
 360:	49 f4       	brne	.+18     	; 0x374 <i2c_writeReg+0x4a>
{
	if (i2c_start(devaddr | 0x00)) { return 1; }

	i2c_write(regaddr);

	for (int i = 0; i < length; i++)
 362:	21 96       	adiw	r28, 0x01	; 1
 364:	ce 15       	cp	r28, r14
 366:	df 05       	cpc	r29, r15
 368:	a4 f3       	brlt	.-24     	; 0x352 <i2c_writeReg+0x28>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 36a:	84 e9       	ldi	r24, 0x94	; 148
 36c:	80 93 bc 00 	sts	0x00BC, r24
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	01 c0       	rjmp	.+2      	; 0x376 <i2c_writeReg+0x4c>
		if (i2c_write(data[i])){ return 1; }
	}

	i2c_stop();

	return 0;
 374:	81 e0       	ldi	r24, 0x01	; 1
}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	cf 90       	pop	r12
 384:	08 95       	ret

00000386 <i2c_readReg>:

char i2c_readReg(char devaddr, char regaddr, char* data, int length)
{
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	18 2f       	mov	r17, r24
 394:	06 2f       	mov	r16, r22
 396:	ea 01       	movw	r28, r20
 398:	79 01       	movw	r14, r18
	if (i2c_start(devaddr)) { return 1; }
 39a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <i2c_start>
 39e:	88 23       	and	r24, r24
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <i2c_readReg+0x20>
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	34 c0       	rjmp	.+104    	; 0x40e <i2c_readReg+0x88>

	i2c_write(regaddr);
 3a6:	80 2f       	mov	r24, r16
 3a8:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_write>

	if (i2c_start(devaddr | 0x01)) { return 2; }
 3ac:	81 2f       	mov	r24, r17
 3ae:	81 60       	ori	r24, 0x01	; 1
 3b0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <i2c_start>
 3b4:	88 23       	and	r24, r24
 3b6:	11 f0       	breq	.+4      	; 0x3bc <i2c_readReg+0x36>
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	29 c0       	rjmp	.+82     	; 0x40e <i2c_readReg+0x88>
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0

	for (int i = 0; i < (length-1); i++)
 3c0:	a7 01       	movw	r20, r14
 3c2:	41 50       	subi	r20, 0x01	; 1
 3c4:	50 40       	sbci	r21, 0x00	; 0

char i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 3c6:	94 ec       	ldi	r25, 0xC4	; 196
 3c8:	0e c0       	rjmp	.+28     	; 0x3e6 <i2c_readReg+0x60>
 3ca:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 3ce:	80 91 bc 00 	lds	r24, 0x00BC
 3d2:	87 ff       	sbrs	r24, 7
 3d4:	fc cf       	rjmp	.-8      	; 0x3ce <i2c_readReg+0x48>
	// return received data from TWDR
	return TWDR;
 3d6:	80 91 bb 00 	lds	r24, 0x00BB

	if (i2c_start(devaddr | 0x01)) { return 2; }

	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 3da:	fe 01       	movw	r30, r28
 3dc:	e2 0f       	add	r30, r18
 3de:	f3 1f       	adc	r31, r19
 3e0:	80 83       	st	Z, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) { return 2; }

	for (int i = 0; i < (length-1); i++)
 3e2:	2f 5f       	subi	r18, 0xFF	; 255
 3e4:	3f 4f       	sbci	r19, 0xFF	; 255
 3e6:	24 17       	cp	r18, r20
 3e8:	35 07       	cpc	r19, r21
 3ea:	7c f3       	brlt	.-34     	; 0x3ca <i2c_readReg+0x44>

char i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 3ec:	84 e8       	ldi	r24, 0x84	; 132
 3ee:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 3f2:	80 91 bc 00 	lds	r24, 0x00BC
 3f6:	87 ff       	sbrs	r24, 7
 3f8:	fc cf       	rjmp	.-8      	; 0x3f2 <i2c_readReg+0x6c>
	// return received data from TWDR
	return TWDR;
 3fa:	80 91 bb 00 	lds	r24, 0x00BB

	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 3fe:	ce 0d       	add	r28, r14
 400:	df 1d       	adc	r29, r15
 402:	21 97       	sbiw	r28, 0x01	; 1
 404:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 406:	84 e9       	ldi	r24, 0x94	; 148
 408:	80 93 bc 00 	sts	0x00BC, r24
 40c:	80 e0       	ldi	r24, 0x00	; 0
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	08 95       	ret

0000041c <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 41c:	84 e9       	ldi	r24, 0x94	; 148
 41e:	80 93 bc 00 	sts	0x00BC, r24
}
 422:	08 95       	ret

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
