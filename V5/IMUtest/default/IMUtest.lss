
IMUtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  00001158  000011cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 000001c0  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000002b3  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000026a3  00000000  00000000  00001747  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000013b9  00000000  00000000  00003dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000162c  00000000  00000000  000051a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000290  00000000  00000000  000067d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000043c  00000000  00000000  00006a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000d1a  00000000  00000000  00006e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  00007bb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e5       	ldi	r30, 0x58	; 88
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
      8a:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
      8e:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <imu_init>:
	// set accel control registers
	//i2c_writeReg(LSM9DS1_WRITE, CTRL_REG4, &xl_ctrl_reg, 7);

	// any other registers to set up

}
      96:	08 95       	ret

00000098 <whoAmI>:
	
	char test=0;
	char test2=0;
	char test3=0;

	test = i2c_start(LSM9DS1_WRITE);
      98:	84 ed       	ldi	r24, 0xD4	; 212
      9a:	0e 94 2a 01 	call	0x254	; 0x254 <i2c_start>
	if (test==2) { PORTB |= (1<<PORTB2); }
      9e:	82 30       	cpi	r24, 0x02	; 2
      a0:	09 f4       	brne	.+2      	; 0xa4 <whoAmI+0xc>
      a2:	2a 9a       	sbi	0x05, 2	; 5
		
	test2 = i2c_write(WHO_AM_I_REG);
      a4:	8f e0       	ldi	r24, 0x0F	; 15
      a6:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_write>
	if (test2==1) { PORTB |= (1<<PORTB1); }
      aa:	81 30       	cpi	r24, 0x01	; 1
      ac:	09 f4       	brne	.+2      	; 0xb0 <whoAmI+0x18>
      ae:	29 9a       	sbi	0x05, 1	; 5

	test3 = i2c_start(LSM9DS1_READ);
      b0:	85 ed       	ldi	r24, 0xD5	; 213
      b2:	0e 94 2a 01 	call	0x254	; 0x254 <i2c_start>
	//if (test3==1) { PORTB |= (1<<PORTB1); }
	
	who = i2c_read_nack();
      b6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_read_nack>
	i2c_stop();
      ba:	0e 94 4d 02 	call	0x49a	; 0x49a <i2c_stop>
      be:	80 ed       	ldi	r24, 0xD0	; 208
      c0:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c2:	28 ec       	ldi	r18, 0xC8	; 200
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	f9 01       	movw	r30, r18
      c8:	31 97       	sbiw	r30, 0x01	; 1
      ca:	f1 f7       	brne	.-4      	; 0xc8 <whoAmI+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      ce:	d9 f7       	brne	.-10     	; 0xc6 <whoAmI+0x2e>
	} */
	//PORTB |= (1<<PORTB2);

	_delay_ms(200);

	PORTB &= ~(1<<PORTB1); // turn off LEDs
      d0:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
      d2:	2a 98       	cbi	0x05, 2	; 5
}
      d4:	08 95       	ret

000000d6 <main>:

/* int get_ax(void);
int get_ay(void);
int get_gz(void); */

int main(void) {
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29

	cli(); // disable interrupts
      ee:	f8 94       	cli

	DDRB=0;
      f0:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
      f2:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
      f4:	87 e0       	ldi	r24, 0x07	; 7
      f6:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7);
      f8:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
      fa:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
      fc:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
      fe:	2f 98       	cbi	0x05, 7	; 5

	// declare i2c pins as inputs
	DDRC=0;
     100:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
     102:	18 b8       	out	0x08, r1	; 8
	PORTC |= (1<<PORTC4);
     104:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= (1<<PORTC5);
     106:	45 9a       	sbi	0x08, 5	; 8

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
     108:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
     10a:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
     10c:	2a 9a       	sbi	0x05, 2	; 5
     10e:	80 ed       	ldi	r24, 0xD0	; 208
     110:	97 e0       	ldi	r25, 0x07	; 7
     112:	28 ec       	ldi	r18, 0xC8	; 200
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	f9 01       	movw	r30, r18
     118:	31 97       	sbiw	r30, 0x01	; 1
     11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     11c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     11e:	d9 f7       	brne	.-10     	; 0x116 <main+0x40>
	//PORTC |= (1<<PORTC3); // IR
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
     120:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     122:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
     124:	2a 98       	cbi	0x05, 2	; 5
	//PORTC &= ~(1<<PORTC3);

	i2c_init();
     126:	0e 94 26 01 	call	0x24c	; 0x24c <i2c_init>
	
	//imu_init();

	PORTB |= (1<<PORTB0); // turn on one LED for imu init success
     12a:	28 9a       	sbi	0x05, 0	; 5

	sei(); // enable interrupts
     12c:	78 94       	sei
     12e:	10 e0       	ldi	r17, 0x00	; 0
     130:	c8 ec       	ldi	r28, 0xC8	; 200
     132:	d0 e0       	ldi	r29, 0x00	; 0
     134:	87 c0       	rjmp	.+270    	; 0x244 <main+0x16e>
		char ii=0;

		while (ii<128) {
			char test = 0;
			
			test = i2c_start((ii<<1));
     136:	81 2f       	mov	r24, r17
     138:	88 0f       	add	r24, r24
     13a:	0e 94 2a 01 	call	0x254	; 0x254 <i2c_start>
			if(test==0) {
     13e:	88 23       	and	r24, r24
     140:	09 f0       	breq	.+2      	; 0x144 <main+0x6e>
     142:	76 c0       	rjmp	.+236    	; 0x230 <main+0x15a>
				while(1) {
					PORTB |= (1<<PORTB2);
					_delay_ms(ii);
     144:	61 2f       	mov	r22, r17
     146:	70 e0       	ldi	r23, 0x00	; 0
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 05 06 	call	0xc0a	; 0xc0a <__floatunsisf>
     150:	5b 01       	movw	r10, r22
     152:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	4a ef       	ldi	r20, 0xFA	; 250
     15a:	54 e4       	ldi	r21, 0x44	; 68
     15c:	0e 94 27 04 	call	0x84e	; 0x84e <__mulsf3>
     160:	7b 01       	movw	r14, r22
     162:	8c 01       	movw	r16, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     164:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fixunssfsi>
     168:	4b 01       	movw	r8, r22
     16a:	c8 ec       	ldi	r28, 0xC8	; 200
     16c:	d0 e0       	ldi	r29, 0x00	; 0
			char test = 0;
			
			test = i2c_start((ii<<1));
			if(test==0) {
				while(1) {
					PORTB |= (1<<PORTB2);
     16e:	2a 9a       	sbi	0x05, 2	; 5
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     170:	c8 01       	movw	r24, r16
     172:	b7 01       	movw	r22, r14
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	40 e8       	ldi	r20, 0x80	; 128
     17a:	5f e3       	ldi	r21, 0x3F	; 63
     17c:	0e 94 81 05 	call	0xb02	; 0xb02 <__ltsf2>
     180:	87 fd       	sbrc	r24, 7
     182:	20 c0       	rjmp	.+64     	; 0x1c4 <main+0xee>
		__ticks = 1;
	else if (__tmp > 65535)
     184:	c8 01       	movw	r24, r16
     186:	b7 01       	movw	r22, r14
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	3f ef       	ldi	r19, 0xFF	; 255
     18c:	4f e7       	ldi	r20, 0x7F	; 127
     18e:	57 e4       	ldi	r21, 0x47	; 71
     190:	0e 94 21 05 	call	0xa42	; 0xa42 <__gtsf2>
     194:	18 16       	cp	r1, r24
     196:	14 f0       	brlt	.+4      	; 0x19c <main+0xc6>
     198:	94 01       	movw	r18, r8
     19a:	16 c0       	rjmp	.+44     	; 0x1c8 <main+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     19c:	c6 01       	movw	r24, r12
     19e:	b5 01       	movw	r22, r10
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e2       	ldi	r20, 0x20	; 32
     1a6:	51 e4       	ldi	r21, 0x41	; 65
     1a8:	0e 94 27 04 	call	0x84e	; 0x84e <__mulsf3>
     1ac:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fixunssfsi>
     1b0:	05 c0       	rjmp	.+10     	; 0x1bc <main+0xe6>
     1b2:	ce 01       	movw	r24, r28
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0xde>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1b8:	61 50       	subi	r22, 0x01	; 1
     1ba:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1bc:	61 15       	cp	r22, r1
     1be:	71 05       	cpc	r23, r1
     1c0:	c1 f7       	brne	.-16     	; 0x1b2 <main+0xdc>
     1c2:	05 c0       	rjmp	.+10     	; 0x1ce <main+0xf8>
     1c4:	21 e0       	ldi	r18, 0x01	; 1
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	c9 01       	movw	r24, r18
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0xf4>
					_delay_ms(ii);
					PORTB &= ~(1<<PORTB2);
     1ce:	2a 98       	cbi	0x05, 2	; 5
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
     1d0:	c8 01       	movw	r24, r16
     1d2:	b7 01       	movw	r22, r14
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	40 e8       	ldi	r20, 0x80	; 128
     1da:	5f e3       	ldi	r21, 0x3F	; 63
     1dc:	0e 94 81 05 	call	0xb02	; 0xb02 <__ltsf2>
     1e0:	87 fd       	sbrc	r24, 7
     1e2:	20 c0       	rjmp	.+64     	; 0x224 <main+0x14e>
		__ticks = 1;
	else if (__tmp > 65535)
     1e4:	c8 01       	movw	r24, r16
     1e6:	b7 01       	movw	r22, r14
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	3f ef       	ldi	r19, 0xFF	; 255
     1ec:	4f e7       	ldi	r20, 0x7F	; 127
     1ee:	57 e4       	ldi	r21, 0x47	; 71
     1f0:	0e 94 21 05 	call	0xa42	; 0xa42 <__gtsf2>
     1f4:	18 16       	cp	r1, r24
     1f6:	14 f0       	brlt	.+4      	; 0x1fc <main+0x126>
     1f8:	94 01       	movw	r18, r8
     1fa:	16 c0       	rjmp	.+44     	; 0x228 <main+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1fc:	c6 01       	movw	r24, r12
     1fe:	b5 01       	movw	r22, r10
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	40 e2       	ldi	r20, 0x20	; 32
     206:	51 e4       	ldi	r21, 0x41	; 65
     208:	0e 94 27 04 	call	0x84e	; 0x84e <__mulsf3>
     20c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fixunssfsi>
     210:	05 c0       	rjmp	.+10     	; 0x21c <main+0x146>
     212:	ce 01       	movw	r24, r28
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <main+0x13e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     218:	61 50       	subi	r22, 0x01	; 1
     21a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     21c:	61 15       	cp	r22, r1
     21e:	71 05       	cpc	r23, r1
     220:	c1 f7       	brne	.-16     	; 0x212 <main+0x13c>
     222:	a5 cf       	rjmp	.-182    	; 0x16e <main+0x98>
     224:	21 e0       	ldi	r18, 0x01	; 1
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	c9 01       	movw	r24, r18
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <main+0x154>
     22e:	9f cf       	rjmp	.-194    	; 0x16e <main+0x98>
					_delay_ms(ii);
				}
			}
			
			i2c_stop();
     230:	0e 94 4d 02 	call	0x49a	; 0x49a <i2c_stop>
     234:	88 ee       	ldi	r24, 0xE8	; 232
     236:	93 e0       	ldi	r25, 0x03	; 3
     238:	fe 01       	movw	r30, r28
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     23e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     240:	d9 f7       	brne	.-10     	; 0x238 <main+0x162>
			ii++;
     242:	1f 5f       	subi	r17, 0xFF	; 255

		// loop through all i2c addresses to see if the IMU is active

		char ii=0;

		while (ii<128) {
     244:	17 ff       	sbrs	r17, 7
     246:	77 cf       	rjmp	.-274    	; 0x136 <main+0x60>
     248:	10 e0       	ldi	r17, 0x00	; 0
     24a:	75 cf       	rjmp	.-278    	; 0x136 <main+0x60>

0000024c <i2c_init>:
#define Prescaler 1
#define TWBR_val 0x20 // calculated: ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (char)TWBR_val;
     24c:	80 e2       	ldi	r24, 0x20	; 32
     24e:	80 93 b8 00 	sts	0x00B8, r24
}
     252:	08 95       	ret

00000254 <i2c_start>:

char i2c_start(char address)
{
     254:	98 2f       	mov	r25, r24
	// reset TWI control register
	//TWCR = 0;
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     256:	84 ea       	ldi	r24, 0xA4	; 164
     258:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     25c:	80 91 bc 00 	lds	r24, 0x00BC
     260:	87 ff       	sbrs	r24, 7
     262:	fc cf       	rjmp	.-8      	; 0x25c <i2c_start+0x8>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
     264:	80 91 b9 00 	lds	r24, 0x00B9
     268:	88 7f       	andi	r24, 0xF8	; 248
     26a:	88 30       	cpi	r24, 0x08	; 8
     26c:	11 f0       	breq	.+4      	; 0x272 <i2c_start+0x1e>
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
     272:	90 93 bb 00 	sts	0x00BB, r25
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
     276:	84 e8       	ldi	r24, 0x84	; 132
     278:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     27c:	80 91 bc 00 	lds	r24, 0x00BC
     280:	87 ff       	sbrs	r24, 7
     282:	fc cf       	rjmp	.-8      	; 0x27c <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	char twst = TW_STATUS & 0xF8;
     284:	80 91 b9 00 	lds	r24, 0x00B9
     288:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {return 2;}
     28a:	88 31       	cpi	r24, 0x18	; 24
     28c:	21 f0       	breq	.+8      	; 0x296 <i2c_start+0x42>
     28e:	80 34       	cpi	r24, 0x40	; 64
     290:	11 f0       	breq	.+4      	; 0x296 <i2c_start+0x42>
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	08 95       	ret
     296:	80 e0       	ldi	r24, 0x00	; 0
	

	return 0;
}
     298:	08 95       	ret

0000029a <i2c_write>:

char i2c_write(char data)
{
	// load data into data register
	TWDR = data;
     29a:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
     29e:	84 e8       	ldi	r24, 0x84	; 132
     2a0:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
     2a4:	80 91 bc 00 	lds	r24, 0x00BC
     2a8:	87 ff       	sbrs	r24, 7
     2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
     2ac:	80 91 b9 00 	lds	r24, 0x00B9
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	88 7f       	andi	r24, 0xF8	; 248
     2b4:	88 32       	cpi	r24, 0x28	; 40
     2b6:	09 f0       	breq	.+2      	; 0x2ba <i2c_write+0x20>
     2b8:	91 e0       	ldi	r25, 0x01	; 1
	
	return 0;
}
     2ba:	89 2f       	mov	r24, r25
     2bc:	08 95       	ret

000002be <i2c_read_ack>:

char i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     2be:	84 ec       	ldi	r24, 0xC4	; 196
     2c0:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
     2c4:	80 91 bc 00 	lds	r24, 0x00BC
     2c8:	87 ff       	sbrs	r24, 7
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
     2cc:	80 91 bb 00 	lds	r24, 0x00BB
}
     2d0:	08 95       	ret

000002d2 <i2c_read_nack>:

char i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     2d2:	84 e8       	ldi	r24, 0x84	; 132
     2d4:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
     2d8:	80 91 bc 00 	lds	r24, 0x00BC
     2dc:	87 ff       	sbrs	r24, 7
     2de:	fc cf       	rjmp	.-8      	; 0x2d8 <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
     2e0:	80 91 bb 00 	lds	r24, 0x00BB
}
     2e4:	08 95       	ret

000002e6 <i2c_transmit>:

char i2c_transmit(char address, char* data, int length)
{
     2e6:	ef 92       	push	r14
     2e8:	ff 92       	push	r15
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	7b 01       	movw	r14, r22
     2f4:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) {return 1;}
     2f6:	0e 94 2a 01 	call	0x254	; 0x254 <i2c_start>
     2fa:	88 23       	and	r24, r24
     2fc:	a1 f4       	brne	.+40     	; 0x326 <i2c_transmit+0x40>
     2fe:	c0 e0       	ldi	r28, 0x00	; 0
     300:	d0 e0       	ldi	r29, 0x00	; 0
     302:	09 c0       	rjmp	.+18     	; 0x316 <i2c_transmit+0x30>
	
	for (int i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) {return 1;}
     304:	f7 01       	movw	r30, r14
     306:	ec 0f       	add	r30, r28
     308:	fd 1f       	adc	r31, r29
     30a:	80 81       	ld	r24, Z
     30c:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_write>
     310:	88 23       	and	r24, r24
     312:	49 f4       	brne	.+18     	; 0x326 <i2c_transmit+0x40>

char i2c_transmit(char address, char* data, int length)
{
	if (i2c_start(address | I2C_WRITE)) {return 1;}
	
	for (int i = 0; i < length; i++)
     314:	21 96       	adiw	r28, 0x01	; 1
     316:	c0 17       	cp	r28, r16
     318:	d1 07       	cpc	r29, r17
     31a:	a4 f3       	brlt	.-24     	; 0x304 <i2c_transmit+0x1e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     31c:	84 e9       	ldi	r24, 0x94	; 148
     31e:	80 93 bc 00 	sts	0x00BC, r24
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	01 c0       	rjmp	.+2      	; 0x328 <i2c_transmit+0x42>
		if (i2c_write(data[i])) {return 1;}
	}
	
	i2c_stop();
	
	return 0;
     326:	81 e0       	ldi	r24, 0x01	; 1
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	08 95       	ret

00000336 <i2c_receive>:

char i2c_receive(char address, char* data, int length)
{
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	eb 01       	movw	r28, r22
     340:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_READ)) {return 1;}
     342:	81 60       	ori	r24, 0x01	; 1
     344:	0e 94 2a 01 	call	0x254	; 0x254 <i2c_start>
     348:	88 23       	and	r24, r24
     34a:	11 f0       	breq	.+4      	; 0x350 <i2c_receive+0x1a>
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	29 c0       	rjmp	.+82     	; 0x3a2 <i2c_receive+0x6c>
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int i = 0; i < (length-1); i++)
     354:	a8 01       	movw	r20, r16
     356:	41 50       	subi	r20, 0x01	; 1
     358:	50 40       	sbci	r21, 0x00	; 0

char i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     35a:	94 ec       	ldi	r25, 0xC4	; 196
     35c:	0e c0       	rjmp	.+28     	; 0x37a <i2c_receive+0x44>
     35e:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
     362:	80 91 bc 00 	lds	r24, 0x00BC
     366:	87 ff       	sbrs	r24, 7
     368:	fc cf       	rjmp	.-8      	; 0x362 <i2c_receive+0x2c>
	// return received data from TWDR
	return TWDR;
     36a:	80 91 bb 00 	lds	r24, 0x00BB
{
	if (i2c_start(address | I2C_READ)) {return 1;}
	
	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     36e:	fe 01       	movw	r30, r28
     370:	e2 0f       	add	r30, r18
     372:	f3 1f       	adc	r31, r19
     374:	80 83       	st	Z, r24

char i2c_receive(char address, char* data, int length)
{
	if (i2c_start(address | I2C_READ)) {return 1;}
	
	for (int i = 0; i < (length-1); i++)
     376:	2f 5f       	subi	r18, 0xFF	; 255
     378:	3f 4f       	sbci	r19, 0xFF	; 255
     37a:	24 17       	cp	r18, r20
     37c:	35 07       	cpc	r19, r21
     37e:	7c f3       	brlt	.-34     	; 0x35e <i2c_receive+0x28>

char i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     380:	84 e8       	ldi	r24, 0x84	; 132
     382:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
     386:	80 91 bc 00 	lds	r24, 0x00BC
     38a:	87 ff       	sbrs	r24, 7
     38c:	fc cf       	rjmp	.-8      	; 0x386 <i2c_receive+0x50>
	// return received data from TWDR
	return TWDR;
     38e:	80 91 bb 00 	lds	r24, 0x00BB
	
	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     392:	c0 0f       	add	r28, r16
     394:	d1 1f       	adc	r29, r17
     396:	21 97       	sbiw	r28, 0x01	; 1
     398:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     39a:	84 e9       	ldi	r24, 0x94	; 148
     39c:	80 93 bc 00 	sts	0x00BC, r24
     3a0:	80 e0       	ldi	r24, 0x00	; 0
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	08 95       	ret

000003ac <i2c_writeReg>:

char i2c_writeReg(char devaddr, char regaddr, char* data, int length)
{
     3ac:	cf 92       	push	r12
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	16 2f       	mov	r17, r22
     3bc:	6a 01       	movw	r12, r20
     3be:	79 01       	movw	r14, r18
	if (i2c_start(devaddr | 0x00)) { return 1; }
     3c0:	0e 94 2a 01 	call	0x254	; 0x254 <i2c_start>
     3c4:	88 23       	and	r24, r24
     3c6:	b9 f4       	brne	.+46     	; 0x3f6 <i2c_writeReg+0x4a>

	i2c_write(regaddr);
     3c8:	81 2f       	mov	r24, r17
     3ca:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_write>
     3ce:	c0 e0       	ldi	r28, 0x00	; 0
     3d0:	d0 e0       	ldi	r29, 0x00	; 0
     3d2:	09 c0       	rjmp	.+18     	; 0x3e6 <i2c_writeReg+0x3a>

	for (int i = 0; i < length; i++)
	{
		if (i2c_write(data[i])){ return 1; }
     3d4:	f6 01       	movw	r30, r12
     3d6:	ec 0f       	add	r30, r28
     3d8:	fd 1f       	adc	r31, r29
     3da:	80 81       	ld	r24, Z
     3dc:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_write>
     3e0:	88 23       	and	r24, r24
     3e2:	49 f4       	brne	.+18     	; 0x3f6 <i2c_writeReg+0x4a>
{
	if (i2c_start(devaddr | 0x00)) { return 1; }

	i2c_write(regaddr);

	for (int i = 0; i < length; i++)
     3e4:	21 96       	adiw	r28, 0x01	; 1
     3e6:	ce 15       	cp	r28, r14
     3e8:	df 05       	cpc	r29, r15
     3ea:	a4 f3       	brlt	.-24     	; 0x3d4 <i2c_writeReg+0x28>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     3ec:	84 e9       	ldi	r24, 0x94	; 148
     3ee:	80 93 bc 00 	sts	0x00BC, r24
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <i2c_writeReg+0x4c>
		if (i2c_write(data[i])){ return 1; }
	}

	i2c_stop();

	return 0;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	df 90       	pop	r13
     404:	cf 90       	pop	r12
     406:	08 95       	ret

00000408 <i2c_readReg>:

char i2c_readReg(char devaddr, char regaddr, char* data, int length)
{
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	18 2f       	mov	r17, r24
     416:	06 2f       	mov	r16, r22
     418:	ea 01       	movw	r28, r20
     41a:	79 01       	movw	r14, r18
	if (i2c_start(devaddr)) { return 1; }
     41c:	0e 94 2a 01 	call	0x254	; 0x254 <i2c_start>
     420:	88 23       	and	r24, r24
     422:	99 f5       	brne	.+102    	; 0x48a <i2c_readReg+0x82>

	i2c_write(regaddr);
     424:	80 2f       	mov	r24, r16
     426:	0e 94 4d 01 	call	0x29a	; 0x29a <i2c_write>

	if (i2c_start(devaddr | 0x01)) { return 1; }
     42a:	81 2f       	mov	r24, r17
     42c:	81 60       	ori	r24, 0x01	; 1
     42e:	0e 94 2a 01 	call	0x254	; 0x254 <i2c_start>
     432:	88 23       	and	r24, r24
     434:	51 f5       	brne	.+84     	; 0x48a <i2c_readReg+0x82>
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0

	for (int i = 0; i < (length-1); i++)
     43a:	a7 01       	movw	r20, r14
     43c:	41 50       	subi	r20, 0x01	; 1
     43e:	50 40       	sbci	r21, 0x00	; 0

char i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
     440:	94 ec       	ldi	r25, 0xC4	; 196
     442:	0e c0       	rjmp	.+28     	; 0x460 <i2c_readReg+0x58>
     444:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
     448:	80 91 bc 00 	lds	r24, 0x00BC
     44c:	87 ff       	sbrs	r24, 7
     44e:	fc cf       	rjmp	.-8      	; 0x448 <i2c_readReg+0x40>
	// return received data from TWDR
	return TWDR;
     450:	80 91 bb 00 	lds	r24, 0x00BB

	if (i2c_start(devaddr | 0x01)) { return 1; }

	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
     454:	fe 01       	movw	r30, r28
     456:	e2 0f       	add	r30, r18
     458:	f3 1f       	adc	r31, r19
     45a:	80 83       	st	Z, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) { return 1; }

	for (int i = 0; i < (length-1); i++)
     45c:	2f 5f       	subi	r18, 0xFF	; 255
     45e:	3f 4f       	sbci	r19, 0xFF	; 255
     460:	24 17       	cp	r18, r20
     462:	35 07       	cpc	r19, r21
     464:	7c f3       	brlt	.-34     	; 0x444 <i2c_readReg+0x3c>

char i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
     466:	84 e8       	ldi	r24, 0x84	; 132
     468:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
     46c:	80 91 bc 00 	lds	r24, 0x00BC
     470:	87 ff       	sbrs	r24, 7
     472:	fc cf       	rjmp	.-8      	; 0x46c <i2c_readReg+0x64>
	// return received data from TWDR
	return TWDR;
     474:	80 91 bb 00 	lds	r24, 0x00BB

	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
     478:	ce 0d       	add	r28, r14
     47a:	df 1d       	adc	r29, r15
     47c:	21 97       	sbiw	r28, 0x01	; 1
     47e:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     480:	84 e9       	ldi	r24, 0x94	; 148
     482:	80 93 bc 00 	sts	0x00BC, r24
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	01 c0       	rjmp	.+2      	; 0x48c <i2c_readReg+0x84>
	}
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
     48a:	81 e0       	ldi	r24, 0x01	; 1
}
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	08 95       	ret

0000049a <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     49a:	84 e9       	ldi	r24, 0x94	; 148
     49c:	80 93 bc 00 	sts	0x00BC, r24
}
     4a0:	08 95       	ret

000004a2 <__fixunssfsi>:
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	7b 01       	movw	r14, r22
     4ac:	8c 01       	movw	r16, r24
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	5f e4       	ldi	r21, 0x4F	; 79
     4b6:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__gesf2>
     4ba:	88 23       	and	r24, r24
     4bc:	8c f0       	brlt	.+34     	; 0x4e0 <__fixunssfsi+0x3e>
     4be:	c8 01       	movw	r24, r16
     4c0:	b7 01       	movw	r22, r14
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	5f e4       	ldi	r21, 0x4F	; 79
     4ca:	0e 94 c9 03 	call	0x792	; 0x792 <__subsf3>
     4ce:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fixsfsi>
     4d2:	9b 01       	movw	r18, r22
     4d4:	ac 01       	movw	r20, r24
     4d6:	20 50       	subi	r18, 0x00	; 0
     4d8:	30 40       	sbci	r19, 0x00	; 0
     4da:	40 40       	sbci	r20, 0x00	; 0
     4dc:	50 48       	sbci	r21, 0x80	; 128
     4de:	06 c0       	rjmp	.+12     	; 0x4ec <__fixunssfsi+0x4a>
     4e0:	c8 01       	movw	r24, r16
     4e2:	b7 01       	movw	r22, r14
     4e4:	0e 94 b1 05 	call	0xb62	; 0xb62 <__fixsfsi>
     4e8:	9b 01       	movw	r18, r22
     4ea:	ac 01       	movw	r20, r24
     4ec:	b9 01       	movw	r22, r18
     4ee:	ca 01       	movw	r24, r20
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	08 95       	ret

000004fa <_fpadd_parts>:
     4fa:	a0 e0       	ldi	r26, 0x00	; 0
     4fc:	b0 e0       	ldi	r27, 0x00	; 0
     4fe:	e3 e8       	ldi	r30, 0x83	; 131
     500:	f2 e0       	ldi	r31, 0x02	; 2
     502:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__prologue_saves__>
     506:	dc 01       	movw	r26, r24
     508:	2b 01       	movw	r4, r22
     50a:	fa 01       	movw	r30, r20
     50c:	9c 91       	ld	r25, X
     50e:	92 30       	cpi	r25, 0x02	; 2
     510:	08 f4       	brcc	.+2      	; 0x514 <_fpadd_parts+0x1a>
     512:	39 c1       	rjmp	.+626    	; 0x786 <_fpadd_parts+0x28c>
     514:	eb 01       	movw	r28, r22
     516:	88 81       	ld	r24, Y
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	08 f4       	brcc	.+2      	; 0x51e <_fpadd_parts+0x24>
     51c:	33 c1       	rjmp	.+614    	; 0x784 <_fpadd_parts+0x28a>
     51e:	94 30       	cpi	r25, 0x04	; 4
     520:	69 f4       	brne	.+26     	; 0x53c <_fpadd_parts+0x42>
     522:	84 30       	cpi	r24, 0x04	; 4
     524:	09 f0       	breq	.+2      	; 0x528 <_fpadd_parts+0x2e>
     526:	2f c1       	rjmp	.+606    	; 0x786 <_fpadd_parts+0x28c>
     528:	11 96       	adiw	r26, 0x01	; 1
     52a:	9c 91       	ld	r25, X
     52c:	11 97       	sbiw	r26, 0x01	; 1
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	98 17       	cp	r25, r24
     532:	09 f4       	brne	.+2      	; 0x536 <_fpadd_parts+0x3c>
     534:	28 c1       	rjmp	.+592    	; 0x786 <_fpadd_parts+0x28c>
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b1 e0       	ldi	r27, 0x01	; 1
     53a:	25 c1       	rjmp	.+586    	; 0x786 <_fpadd_parts+0x28c>
     53c:	84 30       	cpi	r24, 0x04	; 4
     53e:	09 f4       	brne	.+2      	; 0x542 <_fpadd_parts+0x48>
     540:	21 c1       	rjmp	.+578    	; 0x784 <_fpadd_parts+0x28a>
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	a9 f4       	brne	.+42     	; 0x570 <_fpadd_parts+0x76>
     546:	92 30       	cpi	r25, 0x02	; 2
     548:	09 f0       	breq	.+2      	; 0x54c <_fpadd_parts+0x52>
     54a:	1d c1       	rjmp	.+570    	; 0x786 <_fpadd_parts+0x28c>
     54c:	9a 01       	movw	r18, r20
     54e:	ad 01       	movw	r20, r26
     550:	88 e0       	ldi	r24, 0x08	; 8
     552:	ea 01       	movw	r28, r20
     554:	09 90       	ld	r0, Y+
     556:	ae 01       	movw	r20, r28
     558:	e9 01       	movw	r28, r18
     55a:	09 92       	st	Y+, r0
     55c:	9e 01       	movw	r18, r28
     55e:	81 50       	subi	r24, 0x01	; 1
     560:	c1 f7       	brne	.-16     	; 0x552 <_fpadd_parts+0x58>
     562:	e2 01       	movw	r28, r4
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	11 96       	adiw	r26, 0x01	; 1
     568:	9c 91       	ld	r25, X
     56a:	89 23       	and	r24, r25
     56c:	81 83       	std	Z+1, r24	; 0x01
     56e:	08 c1       	rjmp	.+528    	; 0x780 <_fpadd_parts+0x286>
     570:	92 30       	cpi	r25, 0x02	; 2
     572:	09 f4       	brne	.+2      	; 0x576 <_fpadd_parts+0x7c>
     574:	07 c1       	rjmp	.+526    	; 0x784 <_fpadd_parts+0x28a>
     576:	12 96       	adiw	r26, 0x02	; 2
     578:	2d 90       	ld	r2, X+
     57a:	3c 90       	ld	r3, X
     57c:	13 97       	sbiw	r26, 0x03	; 3
     57e:	eb 01       	movw	r28, r22
     580:	8a 81       	ldd	r24, Y+2	; 0x02
     582:	9b 81       	ldd	r25, Y+3	; 0x03
     584:	14 96       	adiw	r26, 0x04	; 4
     586:	ad 90       	ld	r10, X+
     588:	bd 90       	ld	r11, X+
     58a:	cd 90       	ld	r12, X+
     58c:	dc 90       	ld	r13, X
     58e:	17 97       	sbiw	r26, 0x07	; 7
     590:	ec 80       	ldd	r14, Y+4	; 0x04
     592:	fd 80       	ldd	r15, Y+5	; 0x05
     594:	0e 81       	ldd	r16, Y+6	; 0x06
     596:	1f 81       	ldd	r17, Y+7	; 0x07
     598:	91 01       	movw	r18, r2
     59a:	28 1b       	sub	r18, r24
     59c:	39 0b       	sbc	r19, r25
     59e:	b9 01       	movw	r22, r18
     5a0:	37 ff       	sbrs	r19, 7
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <_fpadd_parts+0xb2>
     5a4:	66 27       	eor	r22, r22
     5a6:	77 27       	eor	r23, r23
     5a8:	62 1b       	sub	r22, r18
     5aa:	73 0b       	sbc	r23, r19
     5ac:	60 32       	cpi	r22, 0x20	; 32
     5ae:	71 05       	cpc	r23, r1
     5b0:	0c f0       	brlt	.+2      	; 0x5b4 <_fpadd_parts+0xba>
     5b2:	61 c0       	rjmp	.+194    	; 0x676 <_fpadd_parts+0x17c>
     5b4:	12 16       	cp	r1, r18
     5b6:	13 06       	cpc	r1, r19
     5b8:	6c f5       	brge	.+90     	; 0x614 <_fpadd_parts+0x11a>
     5ba:	37 01       	movw	r6, r14
     5bc:	48 01       	movw	r8, r16
     5be:	06 2e       	mov	r0, r22
     5c0:	04 c0       	rjmp	.+8      	; 0x5ca <_fpadd_parts+0xd0>
     5c2:	96 94       	lsr	r9
     5c4:	87 94       	ror	r8
     5c6:	77 94       	ror	r7
     5c8:	67 94       	ror	r6
     5ca:	0a 94       	dec	r0
     5cc:	d2 f7       	brpl	.-12     	; 0x5c2 <_fpadd_parts+0xc8>
     5ce:	21 e0       	ldi	r18, 0x01	; 1
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <_fpadd_parts+0xe6>
     5d8:	22 0f       	add	r18, r18
     5da:	33 1f       	adc	r19, r19
     5dc:	44 1f       	adc	r20, r20
     5de:	55 1f       	adc	r21, r21
     5e0:	6a 95       	dec	r22
     5e2:	d2 f7       	brpl	.-12     	; 0x5d8 <_fpadd_parts+0xde>
     5e4:	21 50       	subi	r18, 0x01	; 1
     5e6:	30 40       	sbci	r19, 0x00	; 0
     5e8:	40 40       	sbci	r20, 0x00	; 0
     5ea:	50 40       	sbci	r21, 0x00	; 0
     5ec:	2e 21       	and	r18, r14
     5ee:	3f 21       	and	r19, r15
     5f0:	40 23       	and	r20, r16
     5f2:	51 23       	and	r21, r17
     5f4:	21 15       	cp	r18, r1
     5f6:	31 05       	cpc	r19, r1
     5f8:	41 05       	cpc	r20, r1
     5fa:	51 05       	cpc	r21, r1
     5fc:	21 f0       	breq	.+8      	; 0x606 <_fpadd_parts+0x10c>
     5fe:	21 e0       	ldi	r18, 0x01	; 1
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	79 01       	movw	r14, r18
     608:	8a 01       	movw	r16, r20
     60a:	e6 28       	or	r14, r6
     60c:	f7 28       	or	r15, r7
     60e:	08 29       	or	r16, r8
     610:	19 29       	or	r17, r9
     612:	3c c0       	rjmp	.+120    	; 0x68c <_fpadd_parts+0x192>
     614:	23 2b       	or	r18, r19
     616:	d1 f1       	breq	.+116    	; 0x68c <_fpadd_parts+0x192>
     618:	26 0e       	add	r2, r22
     61a:	37 1e       	adc	r3, r23
     61c:	35 01       	movw	r6, r10
     61e:	46 01       	movw	r8, r12
     620:	06 2e       	mov	r0, r22
     622:	04 c0       	rjmp	.+8      	; 0x62c <_fpadd_parts+0x132>
     624:	96 94       	lsr	r9
     626:	87 94       	ror	r8
     628:	77 94       	ror	r7
     62a:	67 94       	ror	r6
     62c:	0a 94       	dec	r0
     62e:	d2 f7       	brpl	.-12     	; 0x624 <_fpadd_parts+0x12a>
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	04 c0       	rjmp	.+8      	; 0x642 <_fpadd_parts+0x148>
     63a:	22 0f       	add	r18, r18
     63c:	33 1f       	adc	r19, r19
     63e:	44 1f       	adc	r20, r20
     640:	55 1f       	adc	r21, r21
     642:	6a 95       	dec	r22
     644:	d2 f7       	brpl	.-12     	; 0x63a <_fpadd_parts+0x140>
     646:	21 50       	subi	r18, 0x01	; 1
     648:	30 40       	sbci	r19, 0x00	; 0
     64a:	40 40       	sbci	r20, 0x00	; 0
     64c:	50 40       	sbci	r21, 0x00	; 0
     64e:	2a 21       	and	r18, r10
     650:	3b 21       	and	r19, r11
     652:	4c 21       	and	r20, r12
     654:	5d 21       	and	r21, r13
     656:	21 15       	cp	r18, r1
     658:	31 05       	cpc	r19, r1
     65a:	41 05       	cpc	r20, r1
     65c:	51 05       	cpc	r21, r1
     65e:	21 f0       	breq	.+8      	; 0x668 <_fpadd_parts+0x16e>
     660:	21 e0       	ldi	r18, 0x01	; 1
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	59 01       	movw	r10, r18
     66a:	6a 01       	movw	r12, r20
     66c:	a6 28       	or	r10, r6
     66e:	b7 28       	or	r11, r7
     670:	c8 28       	or	r12, r8
     672:	d9 28       	or	r13, r9
     674:	0b c0       	rjmp	.+22     	; 0x68c <_fpadd_parts+0x192>
     676:	82 15       	cp	r24, r2
     678:	93 05       	cpc	r25, r3
     67a:	2c f0       	brlt	.+10     	; 0x686 <_fpadd_parts+0x18c>
     67c:	1c 01       	movw	r2, r24
     67e:	aa 24       	eor	r10, r10
     680:	bb 24       	eor	r11, r11
     682:	65 01       	movw	r12, r10
     684:	03 c0       	rjmp	.+6      	; 0x68c <_fpadd_parts+0x192>
     686:	ee 24       	eor	r14, r14
     688:	ff 24       	eor	r15, r15
     68a:	87 01       	movw	r16, r14
     68c:	11 96       	adiw	r26, 0x01	; 1
     68e:	9c 91       	ld	r25, X
     690:	d2 01       	movw	r26, r4
     692:	11 96       	adiw	r26, 0x01	; 1
     694:	8c 91       	ld	r24, X
     696:	98 17       	cp	r25, r24
     698:	09 f4       	brne	.+2      	; 0x69c <_fpadd_parts+0x1a2>
     69a:	45 c0       	rjmp	.+138    	; 0x726 <_fpadd_parts+0x22c>
     69c:	99 23       	and	r25, r25
     69e:	39 f0       	breq	.+14     	; 0x6ae <_fpadd_parts+0x1b4>
     6a0:	a8 01       	movw	r20, r16
     6a2:	97 01       	movw	r18, r14
     6a4:	2a 19       	sub	r18, r10
     6a6:	3b 09       	sbc	r19, r11
     6a8:	4c 09       	sbc	r20, r12
     6aa:	5d 09       	sbc	r21, r13
     6ac:	06 c0       	rjmp	.+12     	; 0x6ba <_fpadd_parts+0x1c0>
     6ae:	a6 01       	movw	r20, r12
     6b0:	95 01       	movw	r18, r10
     6b2:	2e 19       	sub	r18, r14
     6b4:	3f 09       	sbc	r19, r15
     6b6:	40 0b       	sbc	r20, r16
     6b8:	51 0b       	sbc	r21, r17
     6ba:	57 fd       	sbrc	r21, 7
     6bc:	08 c0       	rjmp	.+16     	; 0x6ce <_fpadd_parts+0x1d4>
     6be:	11 82       	std	Z+1, r1	; 0x01
     6c0:	33 82       	std	Z+3, r3	; 0x03
     6c2:	22 82       	std	Z+2, r2	; 0x02
     6c4:	24 83       	std	Z+4, r18	; 0x04
     6c6:	35 83       	std	Z+5, r19	; 0x05
     6c8:	46 83       	std	Z+6, r20	; 0x06
     6ca:	57 83       	std	Z+7, r21	; 0x07
     6cc:	1d c0       	rjmp	.+58     	; 0x708 <_fpadd_parts+0x20e>
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	81 83       	std	Z+1, r24	; 0x01
     6d2:	33 82       	std	Z+3, r3	; 0x03
     6d4:	22 82       	std	Z+2, r2	; 0x02
     6d6:	88 27       	eor	r24, r24
     6d8:	99 27       	eor	r25, r25
     6da:	dc 01       	movw	r26, r24
     6dc:	82 1b       	sub	r24, r18
     6de:	93 0b       	sbc	r25, r19
     6e0:	a4 0b       	sbc	r26, r20
     6e2:	b5 0b       	sbc	r27, r21
     6e4:	84 83       	std	Z+4, r24	; 0x04
     6e6:	95 83       	std	Z+5, r25	; 0x05
     6e8:	a6 83       	std	Z+6, r26	; 0x06
     6ea:	b7 83       	std	Z+7, r27	; 0x07
     6ec:	0d c0       	rjmp	.+26     	; 0x708 <_fpadd_parts+0x20e>
     6ee:	22 0f       	add	r18, r18
     6f0:	33 1f       	adc	r19, r19
     6f2:	44 1f       	adc	r20, r20
     6f4:	55 1f       	adc	r21, r21
     6f6:	24 83       	std	Z+4, r18	; 0x04
     6f8:	35 83       	std	Z+5, r19	; 0x05
     6fa:	46 83       	std	Z+6, r20	; 0x06
     6fc:	57 83       	std	Z+7, r21	; 0x07
     6fe:	82 81       	ldd	r24, Z+2	; 0x02
     700:	93 81       	ldd	r25, Z+3	; 0x03
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	93 83       	std	Z+3, r25	; 0x03
     706:	82 83       	std	Z+2, r24	; 0x02
     708:	24 81       	ldd	r18, Z+4	; 0x04
     70a:	35 81       	ldd	r19, Z+5	; 0x05
     70c:	46 81       	ldd	r20, Z+6	; 0x06
     70e:	57 81       	ldd	r21, Z+7	; 0x07
     710:	da 01       	movw	r26, r20
     712:	c9 01       	movw	r24, r18
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	a1 09       	sbc	r26, r1
     718:	b1 09       	sbc	r27, r1
     71a:	8f 5f       	subi	r24, 0xFF	; 255
     71c:	9f 4f       	sbci	r25, 0xFF	; 255
     71e:	af 4f       	sbci	r26, 0xFF	; 255
     720:	bf 43       	sbci	r27, 0x3F	; 63
     722:	28 f3       	brcs	.-54     	; 0x6ee <_fpadd_parts+0x1f4>
     724:	0b c0       	rjmp	.+22     	; 0x73c <_fpadd_parts+0x242>
     726:	91 83       	std	Z+1, r25	; 0x01
     728:	33 82       	std	Z+3, r3	; 0x03
     72a:	22 82       	std	Z+2, r2	; 0x02
     72c:	ea 0c       	add	r14, r10
     72e:	fb 1c       	adc	r15, r11
     730:	0c 1d       	adc	r16, r12
     732:	1d 1d       	adc	r17, r13
     734:	e4 82       	std	Z+4, r14	; 0x04
     736:	f5 82       	std	Z+5, r15	; 0x05
     738:	06 83       	std	Z+6, r16	; 0x06
     73a:	17 83       	std	Z+7, r17	; 0x07
     73c:	83 e0       	ldi	r24, 0x03	; 3
     73e:	80 83       	st	Z, r24
     740:	24 81       	ldd	r18, Z+4	; 0x04
     742:	35 81       	ldd	r19, Z+5	; 0x05
     744:	46 81       	ldd	r20, Z+6	; 0x06
     746:	57 81       	ldd	r21, Z+7	; 0x07
     748:	57 ff       	sbrs	r21, 7
     74a:	1a c0       	rjmp	.+52     	; 0x780 <_fpadd_parts+0x286>
     74c:	c9 01       	movw	r24, r18
     74e:	aa 27       	eor	r26, r26
     750:	97 fd       	sbrc	r25, 7
     752:	a0 95       	com	r26
     754:	ba 2f       	mov	r27, r26
     756:	81 70       	andi	r24, 0x01	; 1
     758:	90 70       	andi	r25, 0x00	; 0
     75a:	a0 70       	andi	r26, 0x00	; 0
     75c:	b0 70       	andi	r27, 0x00	; 0
     75e:	56 95       	lsr	r21
     760:	47 95       	ror	r20
     762:	37 95       	ror	r19
     764:	27 95       	ror	r18
     766:	82 2b       	or	r24, r18
     768:	93 2b       	or	r25, r19
     76a:	a4 2b       	or	r26, r20
     76c:	b5 2b       	or	r27, r21
     76e:	84 83       	std	Z+4, r24	; 0x04
     770:	95 83       	std	Z+5, r25	; 0x05
     772:	a6 83       	std	Z+6, r26	; 0x06
     774:	b7 83       	std	Z+7, r27	; 0x07
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	93 81       	ldd	r25, Z+3	; 0x03
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	93 83       	std	Z+3, r25	; 0x03
     77e:	82 83       	std	Z+2, r24	; 0x02
     780:	df 01       	movw	r26, r30
     782:	01 c0       	rjmp	.+2      	; 0x786 <_fpadd_parts+0x28c>
     784:	d2 01       	movw	r26, r4
     786:	cd 01       	movw	r24, r26
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	e2 e1       	ldi	r30, 0x12	; 18
     78e:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__epilogue_restores__>

00000792 <__subsf3>:
     792:	a0 e2       	ldi	r26, 0x20	; 32
     794:	b0 e0       	ldi	r27, 0x00	; 0
     796:	ef ec       	ldi	r30, 0xCF	; 207
     798:	f3 e0       	ldi	r31, 0x03	; 3
     79a:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__prologue_saves__+0x18>
     79e:	69 83       	std	Y+1, r22	; 0x01
     7a0:	7a 83       	std	Y+2, r23	; 0x02
     7a2:	8b 83       	std	Y+3, r24	; 0x03
     7a4:	9c 83       	std	Y+4, r25	; 0x04
     7a6:	2d 83       	std	Y+5, r18	; 0x05
     7a8:	3e 83       	std	Y+6, r19	; 0x06
     7aa:	4f 83       	std	Y+7, r20	; 0x07
     7ac:	58 87       	std	Y+8, r21	; 0x08
     7ae:	e9 e0       	ldi	r30, 0x09	; 9
     7b0:	ee 2e       	mov	r14, r30
     7b2:	f1 2c       	mov	r15, r1
     7b4:	ec 0e       	add	r14, r28
     7b6:	fd 1e       	adc	r15, r29
     7b8:	ce 01       	movw	r24, r28
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	b7 01       	movw	r22, r14
     7be:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     7c2:	8e 01       	movw	r16, r28
     7c4:	0f 5e       	subi	r16, 0xEF	; 239
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	ce 01       	movw	r24, r28
     7ca:	05 96       	adiw	r24, 0x05	; 5
     7cc:	b8 01       	movw	r22, r16
     7ce:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     7d2:	8a 89       	ldd	r24, Y+18	; 0x12
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	89 27       	eor	r24, r25
     7d8:	8a 8b       	std	Y+18, r24	; 0x12
     7da:	c7 01       	movw	r24, r14
     7dc:	b8 01       	movw	r22, r16
     7de:	ae 01       	movw	r20, r28
     7e0:	47 5e       	subi	r20, 0xE7	; 231
     7e2:	5f 4f       	sbci	r21, 0xFF	; 255
     7e4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_fpadd_parts>
     7e8:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__pack_f>
     7ec:	a0 96       	adiw	r28, 0x20	; 32
     7ee:	e6 e0       	ldi	r30, 0x06	; 6
     7f0:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__epilogue_restores__+0x18>

000007f4 <__addsf3>:
     7f4:	a0 e2       	ldi	r26, 0x20	; 32
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	e0 e0       	ldi	r30, 0x00	; 0
     7fa:	f4 e0       	ldi	r31, 0x04	; 4
     7fc:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__prologue_saves__+0x18>
     800:	69 83       	std	Y+1, r22	; 0x01
     802:	7a 83       	std	Y+2, r23	; 0x02
     804:	8b 83       	std	Y+3, r24	; 0x03
     806:	9c 83       	std	Y+4, r25	; 0x04
     808:	2d 83       	std	Y+5, r18	; 0x05
     80a:	3e 83       	std	Y+6, r19	; 0x06
     80c:	4f 83       	std	Y+7, r20	; 0x07
     80e:	58 87       	std	Y+8, r21	; 0x08
     810:	f9 e0       	ldi	r31, 0x09	; 9
     812:	ef 2e       	mov	r14, r31
     814:	f1 2c       	mov	r15, r1
     816:	ec 0e       	add	r14, r28
     818:	fd 1e       	adc	r15, r29
     81a:	ce 01       	movw	r24, r28
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	b7 01       	movw	r22, r14
     820:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     824:	8e 01       	movw	r16, r28
     826:	0f 5e       	subi	r16, 0xEF	; 239
     828:	1f 4f       	sbci	r17, 0xFF	; 255
     82a:	ce 01       	movw	r24, r28
     82c:	05 96       	adiw	r24, 0x05	; 5
     82e:	b8 01       	movw	r22, r16
     830:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     834:	c7 01       	movw	r24, r14
     836:	b8 01       	movw	r22, r16
     838:	ae 01       	movw	r20, r28
     83a:	47 5e       	subi	r20, 0xE7	; 231
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_fpadd_parts>
     842:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__pack_f>
     846:	a0 96       	adiw	r28, 0x20	; 32
     848:	e6 e0       	ldi	r30, 0x06	; 6
     84a:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__epilogue_restores__+0x18>

0000084e <__mulsf3>:
     84e:	a0 e2       	ldi	r26, 0x20	; 32
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	ed e2       	ldi	r30, 0x2D	; 45
     854:	f4 e0       	ldi	r31, 0x04	; 4
     856:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__prologue_saves__>
     85a:	69 83       	std	Y+1, r22	; 0x01
     85c:	7a 83       	std	Y+2, r23	; 0x02
     85e:	8b 83       	std	Y+3, r24	; 0x03
     860:	9c 83       	std	Y+4, r25	; 0x04
     862:	2d 83       	std	Y+5, r18	; 0x05
     864:	3e 83       	std	Y+6, r19	; 0x06
     866:	4f 83       	std	Y+7, r20	; 0x07
     868:	58 87       	std	Y+8, r21	; 0x08
     86a:	ce 01       	movw	r24, r28
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	be 01       	movw	r22, r28
     870:	67 5f       	subi	r22, 0xF7	; 247
     872:	7f 4f       	sbci	r23, 0xFF	; 255
     874:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     878:	ce 01       	movw	r24, r28
     87a:	05 96       	adiw	r24, 0x05	; 5
     87c:	be 01       	movw	r22, r28
     87e:	6f 5e       	subi	r22, 0xEF	; 239
     880:	7f 4f       	sbci	r23, 0xFF	; 255
     882:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     886:	99 85       	ldd	r25, Y+9	; 0x09
     888:	92 30       	cpi	r25, 0x02	; 2
     88a:	88 f0       	brcs	.+34     	; 0x8ae <__mulsf3+0x60>
     88c:	89 89       	ldd	r24, Y+17	; 0x11
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	c8 f0       	brcs	.+50     	; 0x8c4 <__mulsf3+0x76>
     892:	94 30       	cpi	r25, 0x04	; 4
     894:	19 f4       	brne	.+6      	; 0x89c <__mulsf3+0x4e>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	51 f4       	brne	.+20     	; 0x8ae <__mulsf3+0x60>
     89a:	04 c0       	rjmp	.+8      	; 0x8a4 <__mulsf3+0x56>
     89c:	84 30       	cpi	r24, 0x04	; 4
     89e:	29 f4       	brne	.+10     	; 0x8aa <__mulsf3+0x5c>
     8a0:	92 30       	cpi	r25, 0x02	; 2
     8a2:	81 f4       	brne	.+32     	; 0x8c4 <__mulsf3+0x76>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	c6 c0       	rjmp	.+396    	; 0xa36 <__stack+0x137>
     8aa:	92 30       	cpi	r25, 0x02	; 2
     8ac:	49 f4       	brne	.+18     	; 0x8c0 <__mulsf3+0x72>
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b2:	8a 89       	ldd	r24, Y+18	; 0x12
     8b4:	98 13       	cpse	r25, r24
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	2a 87       	std	Y+10, r18	; 0x0a
     8ba:	ce 01       	movw	r24, r28
     8bc:	09 96       	adiw	r24, 0x09	; 9
     8be:	bb c0       	rjmp	.+374    	; 0xa36 <__stack+0x137>
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	49 f4       	brne	.+18     	; 0x8d6 <__mulsf3+0x88>
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     8c8:	8a 89       	ldd	r24, Y+18	; 0x12
     8ca:	98 13       	cpse	r25, r24
     8cc:	21 e0       	ldi	r18, 0x01	; 1
     8ce:	2a 8b       	std	Y+18, r18	; 0x12
     8d0:	ce 01       	movw	r24, r28
     8d2:	41 96       	adiw	r24, 0x11	; 17
     8d4:	b0 c0       	rjmp	.+352    	; 0xa36 <__stack+0x137>
     8d6:	2d 84       	ldd	r2, Y+13	; 0x0d
     8d8:	3e 84       	ldd	r3, Y+14	; 0x0e
     8da:	4f 84       	ldd	r4, Y+15	; 0x0f
     8dc:	58 88       	ldd	r5, Y+16	; 0x10
     8de:	6d 88       	ldd	r6, Y+21	; 0x15
     8e0:	7e 88       	ldd	r7, Y+22	; 0x16
     8e2:	8f 88       	ldd	r8, Y+23	; 0x17
     8e4:	98 8c       	ldd	r9, Y+24	; 0x18
     8e6:	ee 24       	eor	r14, r14
     8e8:	ff 24       	eor	r15, r15
     8ea:	87 01       	movw	r16, r14
     8ec:	aa 24       	eor	r10, r10
     8ee:	bb 24       	eor	r11, r11
     8f0:	65 01       	movw	r12, r10
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	e0 e0       	ldi	r30, 0x00	; 0
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	c1 01       	movw	r24, r2
     900:	81 70       	andi	r24, 0x01	; 1
     902:	90 70       	andi	r25, 0x00	; 0
     904:	89 2b       	or	r24, r25
     906:	e9 f0       	breq	.+58     	; 0x942 <__stack+0x43>
     908:	e6 0c       	add	r14, r6
     90a:	f7 1c       	adc	r15, r7
     90c:	08 1d       	adc	r16, r8
     90e:	19 1d       	adc	r17, r9
     910:	9a 01       	movw	r18, r20
     912:	ab 01       	movw	r20, r22
     914:	2a 0d       	add	r18, r10
     916:	3b 1d       	adc	r19, r11
     918:	4c 1d       	adc	r20, r12
     91a:	5d 1d       	adc	r21, r13
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	a0 e0       	ldi	r26, 0x00	; 0
     922:	b0 e0       	ldi	r27, 0x00	; 0
     924:	e6 14       	cp	r14, r6
     926:	f7 04       	cpc	r15, r7
     928:	08 05       	cpc	r16, r8
     92a:	19 05       	cpc	r17, r9
     92c:	20 f4       	brcc	.+8      	; 0x936 <__stack+0x37>
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	ba 01       	movw	r22, r20
     938:	a9 01       	movw	r20, r18
     93a:	48 0f       	add	r20, r24
     93c:	59 1f       	adc	r21, r25
     93e:	6a 1f       	adc	r22, r26
     940:	7b 1f       	adc	r23, r27
     942:	aa 0c       	add	r10, r10
     944:	bb 1c       	adc	r11, r11
     946:	cc 1c       	adc	r12, r12
     948:	dd 1c       	adc	r13, r13
     94a:	97 fe       	sbrs	r9, 7
     94c:	08 c0       	rjmp	.+16     	; 0x95e <__stack+0x5f>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	a0 e0       	ldi	r26, 0x00	; 0
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	a8 2a       	or	r10, r24
     958:	b9 2a       	or	r11, r25
     95a:	ca 2a       	or	r12, r26
     95c:	db 2a       	or	r13, r27
     95e:	31 96       	adiw	r30, 0x01	; 1
     960:	e0 32       	cpi	r30, 0x20	; 32
     962:	f1 05       	cpc	r31, r1
     964:	49 f0       	breq	.+18     	; 0x978 <__stack+0x79>
     966:	66 0c       	add	r6, r6
     968:	77 1c       	adc	r7, r7
     96a:	88 1c       	adc	r8, r8
     96c:	99 1c       	adc	r9, r9
     96e:	56 94       	lsr	r5
     970:	47 94       	ror	r4
     972:	37 94       	ror	r3
     974:	27 94       	ror	r2
     976:	c3 cf       	rjmp	.-122    	; 0x8fe <__mulsf3+0xb0>
     978:	fa 85       	ldd	r31, Y+10	; 0x0a
     97a:	ea 89       	ldd	r30, Y+18	; 0x12
     97c:	2b 89       	ldd	r18, Y+19	; 0x13
     97e:	3c 89       	ldd	r19, Y+20	; 0x14
     980:	8b 85       	ldd	r24, Y+11	; 0x0b
     982:	9c 85       	ldd	r25, Y+12	; 0x0c
     984:	28 0f       	add	r18, r24
     986:	39 1f       	adc	r19, r25
     988:	2e 5f       	subi	r18, 0xFE	; 254
     98a:	3f 4f       	sbci	r19, 0xFF	; 255
     98c:	17 c0       	rjmp	.+46     	; 0x9bc <__stack+0xbd>
     98e:	ca 01       	movw	r24, r20
     990:	81 70       	andi	r24, 0x01	; 1
     992:	90 70       	andi	r25, 0x00	; 0
     994:	89 2b       	or	r24, r25
     996:	61 f0       	breq	.+24     	; 0x9b0 <__stack+0xb1>
     998:	16 95       	lsr	r17
     99a:	07 95       	ror	r16
     99c:	f7 94       	ror	r15
     99e:	e7 94       	ror	r14
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e8       	ldi	r27, 0x80	; 128
     9a8:	e8 2a       	or	r14, r24
     9aa:	f9 2a       	or	r15, r25
     9ac:	0a 2b       	or	r16, r26
     9ae:	1b 2b       	or	r17, r27
     9b0:	76 95       	lsr	r23
     9b2:	67 95       	ror	r22
     9b4:	57 95       	ror	r21
     9b6:	47 95       	ror	r20
     9b8:	2f 5f       	subi	r18, 0xFF	; 255
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	77 fd       	sbrc	r23, 7
     9be:	e7 cf       	rjmp	.-50     	; 0x98e <__stack+0x8f>
     9c0:	0c c0       	rjmp	.+24     	; 0x9da <__stack+0xdb>
     9c2:	44 0f       	add	r20, r20
     9c4:	55 1f       	adc	r21, r21
     9c6:	66 1f       	adc	r22, r22
     9c8:	77 1f       	adc	r23, r23
     9ca:	17 fd       	sbrc	r17, 7
     9cc:	41 60       	ori	r20, 0x01	; 1
     9ce:	ee 0c       	add	r14, r14
     9d0:	ff 1c       	adc	r15, r15
     9d2:	00 1f       	adc	r16, r16
     9d4:	11 1f       	adc	r17, r17
     9d6:	21 50       	subi	r18, 0x01	; 1
     9d8:	30 40       	sbci	r19, 0x00	; 0
     9da:	40 30       	cpi	r20, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	59 07       	cpc	r21, r25
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	69 07       	cpc	r22, r25
     9e4:	90 e4       	ldi	r25, 0x40	; 64
     9e6:	79 07       	cpc	r23, r25
     9e8:	60 f3       	brcs	.-40     	; 0x9c2 <__stack+0xc3>
     9ea:	2b 8f       	std	Y+27, r18	; 0x1b
     9ec:	3c 8f       	std	Y+28, r19	; 0x1c
     9ee:	db 01       	movw	r26, r22
     9f0:	ca 01       	movw	r24, r20
     9f2:	8f 77       	andi	r24, 0x7F	; 127
     9f4:	90 70       	andi	r25, 0x00	; 0
     9f6:	a0 70       	andi	r26, 0x00	; 0
     9f8:	b0 70       	andi	r27, 0x00	; 0
     9fa:	80 34       	cpi	r24, 0x40	; 64
     9fc:	91 05       	cpc	r25, r1
     9fe:	a1 05       	cpc	r26, r1
     a00:	b1 05       	cpc	r27, r1
     a02:	61 f4       	brne	.+24     	; 0xa1c <__stack+0x11d>
     a04:	47 fd       	sbrc	r20, 7
     a06:	0a c0       	rjmp	.+20     	; 0xa1c <__stack+0x11d>
     a08:	e1 14       	cp	r14, r1
     a0a:	f1 04       	cpc	r15, r1
     a0c:	01 05       	cpc	r16, r1
     a0e:	11 05       	cpc	r17, r1
     a10:	29 f0       	breq	.+10     	; 0xa1c <__stack+0x11d>
     a12:	40 5c       	subi	r20, 0xC0	; 192
     a14:	5f 4f       	sbci	r21, 0xFF	; 255
     a16:	6f 4f       	sbci	r22, 0xFF	; 255
     a18:	7f 4f       	sbci	r23, 0xFF	; 255
     a1a:	40 78       	andi	r20, 0x80	; 128
     a1c:	1a 8e       	std	Y+26, r1	; 0x1a
     a1e:	fe 17       	cp	r31, r30
     a20:	11 f0       	breq	.+4      	; 0xa26 <__stack+0x127>
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	8a 8f       	std	Y+26, r24	; 0x1a
     a26:	4d 8f       	std	Y+29, r20	; 0x1d
     a28:	5e 8f       	std	Y+30, r21	; 0x1e
     a2a:	6f 8f       	std	Y+31, r22	; 0x1f
     a2c:	78 a3       	std	Y+32, r23	; 0x20
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 8f       	std	Y+25, r24	; 0x19
     a32:	ce 01       	movw	r24, r28
     a34:	49 96       	adiw	r24, 0x19	; 25
     a36:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__pack_f>
     a3a:	a0 96       	adiw	r28, 0x20	; 32
     a3c:	e2 e1       	ldi	r30, 0x12	; 18
     a3e:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__epilogue_restores__>

00000a42 <__gtsf2>:
     a42:	a8 e1       	ldi	r26, 0x18	; 24
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e7 e2       	ldi	r30, 0x27	; 39
     a48:	f5 e0       	ldi	r31, 0x05	; 5
     a4a:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__prologue_saves__+0x18>
     a4e:	69 83       	std	Y+1, r22	; 0x01
     a50:	7a 83       	std	Y+2, r23	; 0x02
     a52:	8b 83       	std	Y+3, r24	; 0x03
     a54:	9c 83       	std	Y+4, r25	; 0x04
     a56:	2d 83       	std	Y+5, r18	; 0x05
     a58:	3e 83       	std	Y+6, r19	; 0x06
     a5a:	4f 83       	std	Y+7, r20	; 0x07
     a5c:	58 87       	std	Y+8, r21	; 0x08
     a5e:	89 e0       	ldi	r24, 0x09	; 9
     a60:	e8 2e       	mov	r14, r24
     a62:	f1 2c       	mov	r15, r1
     a64:	ec 0e       	add	r14, r28
     a66:	fd 1e       	adc	r15, r29
     a68:	ce 01       	movw	r24, r28
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	b7 01       	movw	r22, r14
     a6e:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     a72:	8e 01       	movw	r16, r28
     a74:	0f 5e       	subi	r16, 0xEF	; 239
     a76:	1f 4f       	sbci	r17, 0xFF	; 255
     a78:	ce 01       	movw	r24, r28
     a7a:	05 96       	adiw	r24, 0x05	; 5
     a7c:	b8 01       	movw	r22, r16
     a7e:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     a82:	89 85       	ldd	r24, Y+9	; 0x09
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	40 f0       	brcs	.+16     	; 0xa98 <__gtsf2+0x56>
     a88:	89 89       	ldd	r24, Y+17	; 0x11
     a8a:	82 30       	cpi	r24, 0x02	; 2
     a8c:	28 f0       	brcs	.+10     	; 0xa98 <__gtsf2+0x56>
     a8e:	c7 01       	movw	r24, r14
     a90:	b8 01       	movw	r22, r16
     a92:	0e 94 1a 08 	call	0x1034	; 0x1034 <__fpcmp_parts_f>
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <__gtsf2+0x58>
     a98:	8f ef       	ldi	r24, 0xFF	; 255
     a9a:	68 96       	adiw	r28, 0x18	; 24
     a9c:	e6 e0       	ldi	r30, 0x06	; 6
     a9e:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__epilogue_restores__+0x18>

00000aa2 <__gesf2>:
     aa2:	a8 e1       	ldi	r26, 0x18	; 24
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e7 e5       	ldi	r30, 0x57	; 87
     aa8:	f5 e0       	ldi	r31, 0x05	; 5
     aaa:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__prologue_saves__+0x18>
     aae:	69 83       	std	Y+1, r22	; 0x01
     ab0:	7a 83       	std	Y+2, r23	; 0x02
     ab2:	8b 83       	std	Y+3, r24	; 0x03
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	2d 83       	std	Y+5, r18	; 0x05
     ab8:	3e 83       	std	Y+6, r19	; 0x06
     aba:	4f 83       	std	Y+7, r20	; 0x07
     abc:	58 87       	std	Y+8, r21	; 0x08
     abe:	89 e0       	ldi	r24, 0x09	; 9
     ac0:	e8 2e       	mov	r14, r24
     ac2:	f1 2c       	mov	r15, r1
     ac4:	ec 0e       	add	r14, r28
     ac6:	fd 1e       	adc	r15, r29
     ac8:	ce 01       	movw	r24, r28
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	b7 01       	movw	r22, r14
     ace:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     ad2:	8e 01       	movw	r16, r28
     ad4:	0f 5e       	subi	r16, 0xEF	; 239
     ad6:	1f 4f       	sbci	r17, 0xFF	; 255
     ad8:	ce 01       	movw	r24, r28
     ada:	05 96       	adiw	r24, 0x05	; 5
     adc:	b8 01       	movw	r22, r16
     ade:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     ae2:	89 85       	ldd	r24, Y+9	; 0x09
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	40 f0       	brcs	.+16     	; 0xaf8 <__gesf2+0x56>
     ae8:	89 89       	ldd	r24, Y+17	; 0x11
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	28 f0       	brcs	.+10     	; 0xaf8 <__gesf2+0x56>
     aee:	c7 01       	movw	r24, r14
     af0:	b8 01       	movw	r22, r16
     af2:	0e 94 1a 08 	call	0x1034	; 0x1034 <__fpcmp_parts_f>
     af6:	01 c0       	rjmp	.+2      	; 0xafa <__gesf2+0x58>
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	68 96       	adiw	r28, 0x18	; 24
     afc:	e6 e0       	ldi	r30, 0x06	; 6
     afe:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__epilogue_restores__+0x18>

00000b02 <__ltsf2>:
     b02:	a8 e1       	ldi	r26, 0x18	; 24
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e7 e8       	ldi	r30, 0x87	; 135
     b08:	f5 e0       	ldi	r31, 0x05	; 5
     b0a:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__prologue_saves__+0x18>
     b0e:	69 83       	std	Y+1, r22	; 0x01
     b10:	7a 83       	std	Y+2, r23	; 0x02
     b12:	8b 83       	std	Y+3, r24	; 0x03
     b14:	9c 83       	std	Y+4, r25	; 0x04
     b16:	2d 83       	std	Y+5, r18	; 0x05
     b18:	3e 83       	std	Y+6, r19	; 0x06
     b1a:	4f 83       	std	Y+7, r20	; 0x07
     b1c:	58 87       	std	Y+8, r21	; 0x08
     b1e:	89 e0       	ldi	r24, 0x09	; 9
     b20:	e8 2e       	mov	r14, r24
     b22:	f1 2c       	mov	r15, r1
     b24:	ec 0e       	add	r14, r28
     b26:	fd 1e       	adc	r15, r29
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	b7 01       	movw	r22, r14
     b2e:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     b32:	8e 01       	movw	r16, r28
     b34:	0f 5e       	subi	r16, 0xEF	; 239
     b36:	1f 4f       	sbci	r17, 0xFF	; 255
     b38:	ce 01       	movw	r24, r28
     b3a:	05 96       	adiw	r24, 0x05	; 5
     b3c:	b8 01       	movw	r22, r16
     b3e:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     b42:	89 85       	ldd	r24, Y+9	; 0x09
     b44:	82 30       	cpi	r24, 0x02	; 2
     b46:	40 f0       	brcs	.+16     	; 0xb58 <__ltsf2+0x56>
     b48:	89 89       	ldd	r24, Y+17	; 0x11
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	28 f0       	brcs	.+10     	; 0xb58 <__ltsf2+0x56>
     b4e:	c7 01       	movw	r24, r14
     b50:	b8 01       	movw	r22, r16
     b52:	0e 94 1a 08 	call	0x1034	; 0x1034 <__fpcmp_parts_f>
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <__ltsf2+0x58>
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	68 96       	adiw	r28, 0x18	; 24
     b5c:	e6 e0       	ldi	r30, 0x06	; 6
     b5e:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__epilogue_restores__+0x18>

00000b62 <__fixsfsi>:
     b62:	ac e0       	ldi	r26, 0x0C	; 12
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e7 eb       	ldi	r30, 0xB7	; 183
     b68:	f5 e0       	ldi	r31, 0x05	; 5
     b6a:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__prologue_saves__+0x20>
     b6e:	69 83       	std	Y+1, r22	; 0x01
     b70:	7a 83       	std	Y+2, r23	; 0x02
     b72:	8b 83       	std	Y+3, r24	; 0x03
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	be 01       	movw	r22, r28
     b7c:	6b 5f       	subi	r22, 0xFB	; 251
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	0e 94 a2 07 	call	0xf44	; 0xf44 <__unpack_f>
     b84:	8d 81       	ldd	r24, Y+5	; 0x05
     b86:	82 30       	cpi	r24, 0x02	; 2
     b88:	61 f1       	breq	.+88     	; 0xbe2 <__fixsfsi+0x80>
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	50 f1       	brcs	.+84     	; 0xbe2 <__fixsfsi+0x80>
     b8e:	84 30       	cpi	r24, 0x04	; 4
     b90:	21 f4       	brne	.+8      	; 0xb9a <__fixsfsi+0x38>
     b92:	8e 81       	ldd	r24, Y+6	; 0x06
     b94:	88 23       	and	r24, r24
     b96:	51 f1       	breq	.+84     	; 0xbec <__fixsfsi+0x8a>
     b98:	2e c0       	rjmp	.+92     	; 0xbf6 <__fixsfsi+0x94>
     b9a:	2f 81       	ldd	r18, Y+7	; 0x07
     b9c:	38 85       	ldd	r19, Y+8	; 0x08
     b9e:	37 fd       	sbrc	r19, 7
     ba0:	20 c0       	rjmp	.+64     	; 0xbe2 <__fixsfsi+0x80>
     ba2:	6e 81       	ldd	r22, Y+6	; 0x06
     ba4:	2f 31       	cpi	r18, 0x1F	; 31
     ba6:	31 05       	cpc	r19, r1
     ba8:	1c f0       	brlt	.+6      	; 0xbb0 <__fixsfsi+0x4e>
     baa:	66 23       	and	r22, r22
     bac:	f9 f0       	breq	.+62     	; 0xbec <__fixsfsi+0x8a>
     bae:	23 c0       	rjmp	.+70     	; 0xbf6 <__fixsfsi+0x94>
     bb0:	8e e1       	ldi	r24, 0x1E	; 30
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	82 1b       	sub	r24, r18
     bb6:	93 0b       	sbc	r25, r19
     bb8:	29 85       	ldd	r18, Y+9	; 0x09
     bba:	3a 85       	ldd	r19, Y+10	; 0x0a
     bbc:	4b 85       	ldd	r20, Y+11	; 0x0b
     bbe:	5c 85       	ldd	r21, Y+12	; 0x0c
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <__fixsfsi+0x68>
     bc2:	56 95       	lsr	r21
     bc4:	47 95       	ror	r20
     bc6:	37 95       	ror	r19
     bc8:	27 95       	ror	r18
     bca:	8a 95       	dec	r24
     bcc:	d2 f7       	brpl	.-12     	; 0xbc2 <__fixsfsi+0x60>
     bce:	66 23       	and	r22, r22
     bd0:	b1 f0       	breq	.+44     	; 0xbfe <__fixsfsi+0x9c>
     bd2:	50 95       	com	r21
     bd4:	40 95       	com	r20
     bd6:	30 95       	com	r19
     bd8:	21 95       	neg	r18
     bda:	3f 4f       	sbci	r19, 0xFF	; 255
     bdc:	4f 4f       	sbci	r20, 0xFF	; 255
     bde:	5f 4f       	sbci	r21, 0xFF	; 255
     be0:	0e c0       	rjmp	.+28     	; 0xbfe <__fixsfsi+0x9c>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	09 c0       	rjmp	.+18     	; 0xbfe <__fixsfsi+0x9c>
     bec:	2f ef       	ldi	r18, 0xFF	; 255
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	4f ef       	ldi	r20, 0xFF	; 255
     bf2:	5f e7       	ldi	r21, 0x7F	; 127
     bf4:	04 c0       	rjmp	.+8      	; 0xbfe <__fixsfsi+0x9c>
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e8       	ldi	r21, 0x80	; 128
     bfe:	b9 01       	movw	r22, r18
     c00:	ca 01       	movw	r24, r20
     c02:	2c 96       	adiw	r28, 0x0c	; 12
     c04:	e2 e0       	ldi	r30, 0x02	; 2
     c06:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__epilogue_restores__+0x20>

00000c0a <__floatunsisf>:
     c0a:	a8 e0       	ldi	r26, 0x08	; 8
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	eb e0       	ldi	r30, 0x0B	; 11
     c10:	f6 e0       	ldi	r31, 0x06	; 6
     c12:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__prologue_saves__+0x10>
     c16:	7b 01       	movw	r14, r22
     c18:	8c 01       	movw	r16, r24
     c1a:	61 15       	cp	r22, r1
     c1c:	71 05       	cpc	r23, r1
     c1e:	81 05       	cpc	r24, r1
     c20:	91 05       	cpc	r25, r1
     c22:	19 f4       	brne	.+6      	; 0xc2a <__floatunsisf+0x20>
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	89 83       	std	Y+1, r24	; 0x01
     c28:	60 c0       	rjmp	.+192    	; 0xcea <__floatunsisf+0xe0>
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	89 83       	std	Y+1, r24	; 0x01
     c2e:	8e e1       	ldi	r24, 0x1E	; 30
     c30:	c8 2e       	mov	r12, r24
     c32:	d1 2c       	mov	r13, r1
     c34:	dc 82       	std	Y+4, r13	; 0x04
     c36:	cb 82       	std	Y+3, r12	; 0x03
     c38:	ed 82       	std	Y+5, r14	; 0x05
     c3a:	fe 82       	std	Y+6, r15	; 0x06
     c3c:	0f 83       	std	Y+7, r16	; 0x07
     c3e:	18 87       	std	Y+8, r17	; 0x08
     c40:	c8 01       	movw	r24, r16
     c42:	b7 01       	movw	r22, r14
     c44:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__clzsi2>
     c48:	fc 01       	movw	r30, r24
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	f7 ff       	sbrs	r31, 7
     c4e:	3b c0       	rjmp	.+118    	; 0xcc6 <__floatunsisf+0xbc>
     c50:	22 27       	eor	r18, r18
     c52:	33 27       	eor	r19, r19
     c54:	2e 1b       	sub	r18, r30
     c56:	3f 0b       	sbc	r19, r31
     c58:	57 01       	movw	r10, r14
     c5a:	68 01       	movw	r12, r16
     c5c:	02 2e       	mov	r0, r18
     c5e:	04 c0       	rjmp	.+8      	; 0xc68 <__floatunsisf+0x5e>
     c60:	d6 94       	lsr	r13
     c62:	c7 94       	ror	r12
     c64:	b7 94       	ror	r11
     c66:	a7 94       	ror	r10
     c68:	0a 94       	dec	r0
     c6a:	d2 f7       	brpl	.-12     	; 0xc60 <__floatunsisf+0x56>
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	a0 e0       	ldi	r26, 0x00	; 0
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__floatunsisf+0x7c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	aa 1f       	adc	r26, r26
     c84:	bb 1f       	adc	r27, r27
     c86:	2a 95       	dec	r18
     c88:	d2 f7       	brpl	.-12     	; 0xc7e <__floatunsisf+0x74>
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	a1 09       	sbc	r26, r1
     c8e:	b1 09       	sbc	r27, r1
     c90:	8e 21       	and	r24, r14
     c92:	9f 21       	and	r25, r15
     c94:	a0 23       	and	r26, r16
     c96:	b1 23       	and	r27, r17
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	a1 05       	cpc	r26, r1
     c9c:	b1 05       	cpc	r27, r1
     c9e:	21 f0       	breq	.+8      	; 0xca8 <__floatunsisf+0x9e>
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	4a 29       	or	r20, r10
     caa:	5b 29       	or	r21, r11
     cac:	6c 29       	or	r22, r12
     cae:	7d 29       	or	r23, r13
     cb0:	4d 83       	std	Y+5, r20	; 0x05
     cb2:	5e 83       	std	Y+6, r21	; 0x06
     cb4:	6f 83       	std	Y+7, r22	; 0x07
     cb6:	78 87       	std	Y+8, r23	; 0x08
     cb8:	8e e1       	ldi	r24, 0x1E	; 30
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	8e 1b       	sub	r24, r30
     cbe:	9f 0b       	sbc	r25, r31
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	8b 83       	std	Y+3, r24	; 0x03
     cc4:	12 c0       	rjmp	.+36     	; 0xcea <__floatunsisf+0xe0>
     cc6:	30 97       	sbiw	r30, 0x00	; 0
     cc8:	81 f0       	breq	.+32     	; 0xcea <__floatunsisf+0xe0>
     cca:	0e 2e       	mov	r0, r30
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <__floatunsisf+0xcc>
     cce:	ee 0c       	add	r14, r14
     cd0:	ff 1c       	adc	r15, r15
     cd2:	00 1f       	adc	r16, r16
     cd4:	11 1f       	adc	r17, r17
     cd6:	0a 94       	dec	r0
     cd8:	d2 f7       	brpl	.-12     	; 0xcce <__floatunsisf+0xc4>
     cda:	ed 82       	std	Y+5, r14	; 0x05
     cdc:	fe 82       	std	Y+6, r15	; 0x06
     cde:	0f 83       	std	Y+7, r16	; 0x07
     ce0:	18 87       	std	Y+8, r17	; 0x08
     ce2:	ce 1a       	sub	r12, r30
     ce4:	df 0a       	sbc	r13, r31
     ce6:	dc 82       	std	Y+4, r13	; 0x04
     ce8:	cb 82       	std	Y+3, r12	; 0x03
     cea:	1a 82       	std	Y+2, r1	; 0x02
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__pack_f>
     cf4:	28 96       	adiw	r28, 0x08	; 8
     cf6:	ea e0       	ldi	r30, 0x0A	; 10
     cf8:	0c 94 97 08 	jmp	0x112e	; 0x112e <__epilogue_restores__+0x10>

00000cfc <__clzsi2>:
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	7b 01       	movw	r14, r22
     d06:	8c 01       	movw	r16, r24
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	e8 16       	cp	r14, r24
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	f8 06       	cpc	r15, r24
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	08 07       	cpc	r16, r24
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	18 07       	cpc	r17, r24
     d18:	88 f4       	brcc	.+34     	; 0xd3c <__clzsi2+0x40>
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	e8 16       	cp	r14, r24
     d1e:	f1 04       	cpc	r15, r1
     d20:	01 05       	cpc	r16, r1
     d22:	11 05       	cpc	r17, r1
     d24:	31 f0       	breq	.+12     	; 0xd32 <__clzsi2+0x36>
     d26:	28 f0       	brcs	.+10     	; 0xd32 <__clzsi2+0x36>
     d28:	88 e0       	ldi	r24, 0x08	; 8
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	17 c0       	rjmp	.+46     	; 0xd60 <__clzsi2+0x64>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	12 c0       	rjmp	.+36     	; 0xd60 <__clzsi2+0x64>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	e8 16       	cp	r14, r24
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	f8 06       	cpc	r15, r24
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	08 07       	cpc	r16, r24
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	18 07       	cpc	r17, r24
     d4c:	28 f0       	brcs	.+10     	; 0xd58 <__clzsi2+0x5c>
     d4e:	88 e1       	ldi	r24, 0x18	; 24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	04 c0       	rjmp	.+8      	; 0xd60 <__clzsi2+0x64>
     d58:	80 e1       	ldi	r24, 0x10	; 16
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	a0 e0       	ldi	r26, 0x00	; 0
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	20 e2       	ldi	r18, 0x20	; 32
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	28 1b       	sub	r18, r24
     d6a:	39 0b       	sbc	r19, r25
     d6c:	4a 0b       	sbc	r20, r26
     d6e:	5b 0b       	sbc	r21, r27
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <__clzsi2+0x7e>
     d72:	16 95       	lsr	r17
     d74:	07 95       	ror	r16
     d76:	f7 94       	ror	r15
     d78:	e7 94       	ror	r14
     d7a:	8a 95       	dec	r24
     d7c:	d2 f7       	brpl	.-12     	; 0xd72 <__clzsi2+0x76>
     d7e:	f7 01       	movw	r30, r14
     d80:	e8 5f       	subi	r30, 0xF8	; 248
     d82:	fe 4f       	sbci	r31, 0xFE	; 254
     d84:	80 81       	ld	r24, Z
     d86:	28 1b       	sub	r18, r24
     d88:	31 09       	sbc	r19, r1
     d8a:	41 09       	sbc	r20, r1
     d8c:	51 09       	sbc	r21, r1
     d8e:	c9 01       	movw	r24, r18
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	08 95       	ret

00000d9a <__pack_f>:
     d9a:	df 92       	push	r13
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	fc 01       	movw	r30, r24
     da6:	e4 80       	ldd	r14, Z+4	; 0x04
     da8:	f5 80       	ldd	r15, Z+5	; 0x05
     daa:	06 81       	ldd	r16, Z+6	; 0x06
     dac:	17 81       	ldd	r17, Z+7	; 0x07
     dae:	d1 80       	ldd	r13, Z+1	; 0x01
     db0:	80 81       	ld	r24, Z
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	48 f4       	brcc	.+18     	; 0xdc8 <__pack_f+0x2e>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	a0 e1       	ldi	r26, 0x10	; 16
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e8 2a       	or	r14, r24
     dc0:	f9 2a       	or	r15, r25
     dc2:	0a 2b       	or	r16, r26
     dc4:	1b 2b       	or	r17, r27
     dc6:	a5 c0       	rjmp	.+330    	; 0xf12 <__pack_f+0x178>
     dc8:	84 30       	cpi	r24, 0x04	; 4
     dca:	09 f4       	brne	.+2      	; 0xdce <__pack_f+0x34>
     dcc:	9f c0       	rjmp	.+318    	; 0xf0c <__pack_f+0x172>
     dce:	82 30       	cpi	r24, 0x02	; 2
     dd0:	21 f4       	brne	.+8      	; 0xdda <__pack_f+0x40>
     dd2:	ee 24       	eor	r14, r14
     dd4:	ff 24       	eor	r15, r15
     dd6:	87 01       	movw	r16, r14
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <__pack_f+0x4a>
     dda:	e1 14       	cp	r14, r1
     ddc:	f1 04       	cpc	r15, r1
     dde:	01 05       	cpc	r16, r1
     de0:	11 05       	cpc	r17, r1
     de2:	19 f4       	brne	.+6      	; 0xdea <__pack_f+0x50>
     de4:	e0 e0       	ldi	r30, 0x00	; 0
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	96 c0       	rjmp	.+300    	; 0xf16 <__pack_f+0x17c>
     dea:	62 81       	ldd	r22, Z+2	; 0x02
     dec:	73 81       	ldd	r23, Z+3	; 0x03
     dee:	9f ef       	ldi	r25, 0xFF	; 255
     df0:	62 38       	cpi	r22, 0x82	; 130
     df2:	79 07       	cpc	r23, r25
     df4:	0c f0       	brlt	.+2      	; 0xdf8 <__pack_f+0x5e>
     df6:	5b c0       	rjmp	.+182    	; 0xeae <__pack_f+0x114>
     df8:	22 e8       	ldi	r18, 0x82	; 130
     dfa:	3f ef       	ldi	r19, 0xFF	; 255
     dfc:	26 1b       	sub	r18, r22
     dfe:	37 0b       	sbc	r19, r23
     e00:	2a 31       	cpi	r18, 0x1A	; 26
     e02:	31 05       	cpc	r19, r1
     e04:	2c f0       	brlt	.+10     	; 0xe10 <__pack_f+0x76>
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	2a c0       	rjmp	.+84     	; 0xe64 <__pack_f+0xca>
     e10:	b8 01       	movw	r22, r16
     e12:	a7 01       	movw	r20, r14
     e14:	02 2e       	mov	r0, r18
     e16:	04 c0       	rjmp	.+8      	; 0xe20 <__pack_f+0x86>
     e18:	76 95       	lsr	r23
     e1a:	67 95       	ror	r22
     e1c:	57 95       	ror	r21
     e1e:	47 95       	ror	r20
     e20:	0a 94       	dec	r0
     e22:	d2 f7       	brpl	.-12     	; 0xe18 <__pack_f+0x7e>
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	a0 e0       	ldi	r26, 0x00	; 0
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <__pack_f+0x9c>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	aa 1f       	adc	r26, r26
     e34:	bb 1f       	adc	r27, r27
     e36:	2a 95       	dec	r18
     e38:	d2 f7       	brpl	.-12     	; 0xe2e <__pack_f+0x94>
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	a1 09       	sbc	r26, r1
     e3e:	b1 09       	sbc	r27, r1
     e40:	8e 21       	and	r24, r14
     e42:	9f 21       	and	r25, r15
     e44:	a0 23       	and	r26, r16
     e46:	b1 23       	and	r27, r17
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	a1 05       	cpc	r26, r1
     e4c:	b1 05       	cpc	r27, r1
     e4e:	21 f0       	breq	.+8      	; 0xe58 <__pack_f+0xbe>
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a0 e0       	ldi	r26, 0x00	; 0
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	9a 01       	movw	r18, r20
     e5a:	ab 01       	movw	r20, r22
     e5c:	28 2b       	or	r18, r24
     e5e:	39 2b       	or	r19, r25
     e60:	4a 2b       	or	r20, r26
     e62:	5b 2b       	or	r21, r27
     e64:	da 01       	movw	r26, r20
     e66:	c9 01       	movw	r24, r18
     e68:	8f 77       	andi	r24, 0x7F	; 127
     e6a:	90 70       	andi	r25, 0x00	; 0
     e6c:	a0 70       	andi	r26, 0x00	; 0
     e6e:	b0 70       	andi	r27, 0x00	; 0
     e70:	80 34       	cpi	r24, 0x40	; 64
     e72:	91 05       	cpc	r25, r1
     e74:	a1 05       	cpc	r26, r1
     e76:	b1 05       	cpc	r27, r1
     e78:	39 f4       	brne	.+14     	; 0xe88 <__pack_f+0xee>
     e7a:	27 ff       	sbrs	r18, 7
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <__pack_f+0xf6>
     e7e:	20 5c       	subi	r18, 0xC0	; 192
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	4f 4f       	sbci	r20, 0xFF	; 255
     e84:	5f 4f       	sbci	r21, 0xFF	; 255
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <__pack_f+0xf6>
     e88:	21 5c       	subi	r18, 0xC1	; 193
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	4f 4f       	sbci	r20, 0xFF	; 255
     e8e:	5f 4f       	sbci	r21, 0xFF	; 255
     e90:	e0 e0       	ldi	r30, 0x00	; 0
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	20 30       	cpi	r18, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	3a 07       	cpc	r19, r26
     e9a:	a0 e0       	ldi	r26, 0x00	; 0
     e9c:	4a 07       	cpc	r20, r26
     e9e:	a0 e4       	ldi	r26, 0x40	; 64
     ea0:	5a 07       	cpc	r21, r26
     ea2:	10 f0       	brcs	.+4      	; 0xea8 <__pack_f+0x10e>
     ea4:	e1 e0       	ldi	r30, 0x01	; 1
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	79 01       	movw	r14, r18
     eaa:	8a 01       	movw	r16, r20
     eac:	27 c0       	rjmp	.+78     	; 0xefc <__pack_f+0x162>
     eae:	60 38       	cpi	r22, 0x80	; 128
     eb0:	71 05       	cpc	r23, r1
     eb2:	64 f5       	brge	.+88     	; 0xf0c <__pack_f+0x172>
     eb4:	fb 01       	movw	r30, r22
     eb6:	e1 58       	subi	r30, 0x81	; 129
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	d8 01       	movw	r26, r16
     ebc:	c7 01       	movw	r24, r14
     ebe:	8f 77       	andi	r24, 0x7F	; 127
     ec0:	90 70       	andi	r25, 0x00	; 0
     ec2:	a0 70       	andi	r26, 0x00	; 0
     ec4:	b0 70       	andi	r27, 0x00	; 0
     ec6:	80 34       	cpi	r24, 0x40	; 64
     ec8:	91 05       	cpc	r25, r1
     eca:	a1 05       	cpc	r26, r1
     ecc:	b1 05       	cpc	r27, r1
     ece:	39 f4       	brne	.+14     	; 0xede <__pack_f+0x144>
     ed0:	e7 fe       	sbrs	r14, 7
     ed2:	0d c0       	rjmp	.+26     	; 0xeee <__pack_f+0x154>
     ed4:	80 e4       	ldi	r24, 0x40	; 64
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	a0 e0       	ldi	r26, 0x00	; 0
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <__pack_f+0x14c>
     ede:	8f e3       	ldi	r24, 0x3F	; 63
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e8 0e       	add	r14, r24
     ee8:	f9 1e       	adc	r15, r25
     eea:	0a 1f       	adc	r16, r26
     eec:	1b 1f       	adc	r17, r27
     eee:	17 ff       	sbrs	r17, 7
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <__pack_f+0x162>
     ef2:	16 95       	lsr	r17
     ef4:	07 95       	ror	r16
     ef6:	f7 94       	ror	r15
     ef8:	e7 94       	ror	r14
     efa:	31 96       	adiw	r30, 0x01	; 1
     efc:	87 e0       	ldi	r24, 0x07	; 7
     efe:	16 95       	lsr	r17
     f00:	07 95       	ror	r16
     f02:	f7 94       	ror	r15
     f04:	e7 94       	ror	r14
     f06:	8a 95       	dec	r24
     f08:	d1 f7       	brne	.-12     	; 0xefe <__pack_f+0x164>
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <__pack_f+0x17c>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	ef ef       	ldi	r30, 0xFF	; 255
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	6e 2f       	mov	r22, r30
     f18:	67 95       	ror	r22
     f1a:	66 27       	eor	r22, r22
     f1c:	67 95       	ror	r22
     f1e:	90 2f       	mov	r25, r16
     f20:	9f 77       	andi	r25, 0x7F	; 127
     f22:	d7 94       	ror	r13
     f24:	dd 24       	eor	r13, r13
     f26:	d7 94       	ror	r13
     f28:	8e 2f       	mov	r24, r30
     f2a:	86 95       	lsr	r24
     f2c:	49 2f       	mov	r20, r25
     f2e:	46 2b       	or	r20, r22
     f30:	58 2f       	mov	r21, r24
     f32:	5d 29       	or	r21, r13
     f34:	b7 01       	movw	r22, r14
     f36:	ca 01       	movw	r24, r20
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	ef 90       	pop	r14
     f40:	df 90       	pop	r13
     f42:	08 95       	ret

00000f44 <__unpack_f>:
     f44:	fc 01       	movw	r30, r24
     f46:	db 01       	movw	r26, r22
     f48:	40 81       	ld	r20, Z
     f4a:	51 81       	ldd	r21, Z+1	; 0x01
     f4c:	22 81       	ldd	r18, Z+2	; 0x02
     f4e:	62 2f       	mov	r22, r18
     f50:	6f 77       	andi	r22, 0x7F	; 127
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	22 1f       	adc	r18, r18
     f56:	22 27       	eor	r18, r18
     f58:	22 1f       	adc	r18, r18
     f5a:	93 81       	ldd	r25, Z+3	; 0x03
     f5c:	89 2f       	mov	r24, r25
     f5e:	88 0f       	add	r24, r24
     f60:	82 2b       	or	r24, r18
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	99 1f       	adc	r25, r25
     f68:	99 27       	eor	r25, r25
     f6a:	99 1f       	adc	r25, r25
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	9c 93       	st	X, r25
     f70:	11 97       	sbiw	r26, 0x01	; 1
     f72:	21 15       	cp	r18, r1
     f74:	31 05       	cpc	r19, r1
     f76:	a9 f5       	brne	.+106    	; 0xfe2 <__unpack_f+0x9e>
     f78:	41 15       	cp	r20, r1
     f7a:	51 05       	cpc	r21, r1
     f7c:	61 05       	cpc	r22, r1
     f7e:	71 05       	cpc	r23, r1
     f80:	11 f4       	brne	.+4      	; 0xf86 <__unpack_f+0x42>
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	37 c0       	rjmp	.+110    	; 0xff4 <__unpack_f+0xb0>
     f86:	82 e8       	ldi	r24, 0x82	; 130
     f88:	9f ef       	ldi	r25, 0xFF	; 255
     f8a:	13 96       	adiw	r26, 0x03	; 3
     f8c:	9c 93       	st	X, r25
     f8e:	8e 93       	st	-X, r24
     f90:	12 97       	sbiw	r26, 0x02	; 2
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	67 e0       	ldi	r22, 0x07	; 7
     f98:	22 0f       	add	r18, r18
     f9a:	33 1f       	adc	r19, r19
     f9c:	44 1f       	adc	r20, r20
     f9e:	55 1f       	adc	r21, r21
     fa0:	6a 95       	dec	r22
     fa2:	d1 f7       	brne	.-12     	; 0xf98 <__unpack_f+0x54>
     fa4:	83 e0       	ldi	r24, 0x03	; 3
     fa6:	8c 93       	st	X, r24
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <__unpack_f+0x80>
     faa:	22 0f       	add	r18, r18
     fac:	33 1f       	adc	r19, r19
     fae:	44 1f       	adc	r20, r20
     fb0:	55 1f       	adc	r21, r21
     fb2:	12 96       	adiw	r26, 0x02	; 2
     fb4:	8d 91       	ld	r24, X+
     fb6:	9c 91       	ld	r25, X
     fb8:	13 97       	sbiw	r26, 0x03	; 3
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	13 96       	adiw	r26, 0x03	; 3
     fbe:	9c 93       	st	X, r25
     fc0:	8e 93       	st	-X, r24
     fc2:	12 97       	sbiw	r26, 0x02	; 2
     fc4:	20 30       	cpi	r18, 0x00	; 0
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	38 07       	cpc	r19, r24
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	48 07       	cpc	r20, r24
     fce:	80 e4       	ldi	r24, 0x40	; 64
     fd0:	58 07       	cpc	r21, r24
     fd2:	58 f3       	brcs	.-42     	; 0xfaa <__unpack_f+0x66>
     fd4:	14 96       	adiw	r26, 0x04	; 4
     fd6:	2d 93       	st	X+, r18
     fd8:	3d 93       	st	X+, r19
     fda:	4d 93       	st	X+, r20
     fdc:	5c 93       	st	X, r21
     fde:	17 97       	sbiw	r26, 0x07	; 7
     fe0:	08 95       	ret
     fe2:	2f 3f       	cpi	r18, 0xFF	; 255
     fe4:	31 05       	cpc	r19, r1
     fe6:	79 f4       	brne	.+30     	; 0x1006 <__unpack_f+0xc2>
     fe8:	41 15       	cp	r20, r1
     fea:	51 05       	cpc	r21, r1
     fec:	61 05       	cpc	r22, r1
     fee:	71 05       	cpc	r23, r1
     ff0:	19 f4       	brne	.+6      	; 0xff8 <__unpack_f+0xb4>
     ff2:	84 e0       	ldi	r24, 0x04	; 4
     ff4:	8c 93       	st	X, r24
     ff6:	08 95       	ret
     ff8:	64 ff       	sbrs	r22, 4
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <__unpack_f+0xbe>
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	8c 93       	st	X, r24
    1000:	12 c0       	rjmp	.+36     	; 0x1026 <__unpack_f+0xe2>
    1002:	1c 92       	st	X, r1
    1004:	10 c0       	rjmp	.+32     	; 0x1026 <__unpack_f+0xe2>
    1006:	2f 57       	subi	r18, 0x7F	; 127
    1008:	30 40       	sbci	r19, 0x00	; 0
    100a:	13 96       	adiw	r26, 0x03	; 3
    100c:	3c 93       	st	X, r19
    100e:	2e 93       	st	-X, r18
    1010:	12 97       	sbiw	r26, 0x02	; 2
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	8c 93       	st	X, r24
    1016:	87 e0       	ldi	r24, 0x07	; 7
    1018:	44 0f       	add	r20, r20
    101a:	55 1f       	adc	r21, r21
    101c:	66 1f       	adc	r22, r22
    101e:	77 1f       	adc	r23, r23
    1020:	8a 95       	dec	r24
    1022:	d1 f7       	brne	.-12     	; 0x1018 <__unpack_f+0xd4>
    1024:	70 64       	ori	r23, 0x40	; 64
    1026:	14 96       	adiw	r26, 0x04	; 4
    1028:	4d 93       	st	X+, r20
    102a:	5d 93       	st	X+, r21
    102c:	6d 93       	st	X+, r22
    102e:	7c 93       	st	X, r23
    1030:	17 97       	sbiw	r26, 0x07	; 7
    1032:	08 95       	ret

00001034 <__fpcmp_parts_f>:
    1034:	1f 93       	push	r17
    1036:	dc 01       	movw	r26, r24
    1038:	fb 01       	movw	r30, r22
    103a:	9c 91       	ld	r25, X
    103c:	92 30       	cpi	r25, 0x02	; 2
    103e:	08 f4       	brcc	.+2      	; 0x1042 <__fpcmp_parts_f+0xe>
    1040:	47 c0       	rjmp	.+142    	; 0x10d0 <__fpcmp_parts_f+0x9c>
    1042:	80 81       	ld	r24, Z
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	08 f4       	brcc	.+2      	; 0x104a <__fpcmp_parts_f+0x16>
    1048:	43 c0       	rjmp	.+134    	; 0x10d0 <__fpcmp_parts_f+0x9c>
    104a:	94 30       	cpi	r25, 0x04	; 4
    104c:	51 f4       	brne	.+20     	; 0x1062 <__fpcmp_parts_f+0x2e>
    104e:	11 96       	adiw	r26, 0x01	; 1
    1050:	1c 91       	ld	r17, X
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	99 f5       	brne	.+102    	; 0x10bc <__fpcmp_parts_f+0x88>
    1056:	81 81       	ldd	r24, Z+1	; 0x01
    1058:	68 2f       	mov	r22, r24
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	61 1b       	sub	r22, r17
    105e:	71 09       	sbc	r23, r1
    1060:	3f c0       	rjmp	.+126    	; 0x10e0 <__fpcmp_parts_f+0xac>
    1062:	84 30       	cpi	r24, 0x04	; 4
    1064:	21 f0       	breq	.+8      	; 0x106e <__fpcmp_parts_f+0x3a>
    1066:	92 30       	cpi	r25, 0x02	; 2
    1068:	31 f4       	brne	.+12     	; 0x1076 <__fpcmp_parts_f+0x42>
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	b9 f1       	breq	.+110    	; 0x10dc <__fpcmp_parts_f+0xa8>
    106e:	81 81       	ldd	r24, Z+1	; 0x01
    1070:	88 23       	and	r24, r24
    1072:	89 f1       	breq	.+98     	; 0x10d6 <__fpcmp_parts_f+0xa2>
    1074:	2d c0       	rjmp	.+90     	; 0x10d0 <__fpcmp_parts_f+0x9c>
    1076:	11 96       	adiw	r26, 0x01	; 1
    1078:	1c 91       	ld	r17, X
    107a:	11 97       	sbiw	r26, 0x01	; 1
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	f1 f0       	breq	.+60     	; 0x10bc <__fpcmp_parts_f+0x88>
    1080:	81 81       	ldd	r24, Z+1	; 0x01
    1082:	18 17       	cp	r17, r24
    1084:	d9 f4       	brne	.+54     	; 0x10bc <__fpcmp_parts_f+0x88>
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	2d 91       	ld	r18, X+
    108a:	3c 91       	ld	r19, X
    108c:	13 97       	sbiw	r26, 0x03	; 3
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	82 17       	cp	r24, r18
    1094:	93 07       	cpc	r25, r19
    1096:	94 f0       	brlt	.+36     	; 0x10bc <__fpcmp_parts_f+0x88>
    1098:	28 17       	cp	r18, r24
    109a:	39 07       	cpc	r19, r25
    109c:	bc f0       	brlt	.+46     	; 0x10cc <__fpcmp_parts_f+0x98>
    109e:	14 96       	adiw	r26, 0x04	; 4
    10a0:	8d 91       	ld	r24, X+
    10a2:	9d 91       	ld	r25, X+
    10a4:	0d 90       	ld	r0, X+
    10a6:	bc 91       	ld	r27, X
    10a8:	a0 2d       	mov	r26, r0
    10aa:	24 81       	ldd	r18, Z+4	; 0x04
    10ac:	35 81       	ldd	r19, Z+5	; 0x05
    10ae:	46 81       	ldd	r20, Z+6	; 0x06
    10b0:	57 81       	ldd	r21, Z+7	; 0x07
    10b2:	28 17       	cp	r18, r24
    10b4:	39 07       	cpc	r19, r25
    10b6:	4a 07       	cpc	r20, r26
    10b8:	5b 07       	cpc	r21, r27
    10ba:	18 f4       	brcc	.+6      	; 0x10c2 <__fpcmp_parts_f+0x8e>
    10bc:	11 23       	and	r17, r17
    10be:	41 f0       	breq	.+16     	; 0x10d0 <__fpcmp_parts_f+0x9c>
    10c0:	0a c0       	rjmp	.+20     	; 0x10d6 <__fpcmp_parts_f+0xa2>
    10c2:	82 17       	cp	r24, r18
    10c4:	93 07       	cpc	r25, r19
    10c6:	a4 07       	cpc	r26, r20
    10c8:	b5 07       	cpc	r27, r21
    10ca:	40 f4       	brcc	.+16     	; 0x10dc <__fpcmp_parts_f+0xa8>
    10cc:	11 23       	and	r17, r17
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <__fpcmp_parts_f+0xa2>
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <__fpcmp_parts_f+0xac>
    10d6:	6f ef       	ldi	r22, 0xFF	; 255
    10d8:	7f ef       	ldi	r23, 0xFF	; 255
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <__fpcmp_parts_f+0xac>
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	cb 01       	movw	r24, r22
    10e2:	1f 91       	pop	r17
    10e4:	08 95       	ret

000010e6 <__prologue_saves__>:
    10e6:	2f 92       	push	r2
    10e8:	3f 92       	push	r3
    10ea:	4f 92       	push	r4
    10ec:	5f 92       	push	r5
    10ee:	6f 92       	push	r6
    10f0:	7f 92       	push	r7
    10f2:	8f 92       	push	r8
    10f4:	9f 92       	push	r9
    10f6:	af 92       	push	r10
    10f8:	bf 92       	push	r11
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	ca 1b       	sub	r28, r26
    1110:	db 0b       	sbc	r29, r27
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	09 94       	ijmp

0000111e <__epilogue_restores__>:
    111e:	2a 88       	ldd	r2, Y+18	; 0x12
    1120:	39 88       	ldd	r3, Y+17	; 0x11
    1122:	48 88       	ldd	r4, Y+16	; 0x10
    1124:	5f 84       	ldd	r5, Y+15	; 0x0f
    1126:	6e 84       	ldd	r6, Y+14	; 0x0e
    1128:	7d 84       	ldd	r7, Y+13	; 0x0d
    112a:	8c 84       	ldd	r8, Y+12	; 0x0c
    112c:	9b 84       	ldd	r9, Y+11	; 0x0b
    112e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1130:	b9 84       	ldd	r11, Y+9	; 0x09
    1132:	c8 84       	ldd	r12, Y+8	; 0x08
    1134:	df 80       	ldd	r13, Y+7	; 0x07
    1136:	ee 80       	ldd	r14, Y+6	; 0x06
    1138:	fd 80       	ldd	r15, Y+5	; 0x05
    113a:	0c 81       	ldd	r16, Y+4	; 0x04
    113c:	1b 81       	ldd	r17, Y+3	; 0x03
    113e:	aa 81       	ldd	r26, Y+2	; 0x02
    1140:	b9 81       	ldd	r27, Y+1	; 0x01
    1142:	ce 0f       	add	r28, r30
    1144:	d1 1d       	adc	r29, r1
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	ed 01       	movw	r28, r26
    1152:	08 95       	ret

00001154 <_exit>:
    1154:	f8 94       	cli

00001156 <__stop_program>:
    1156:	ff cf       	rjmp	.-2      	; 0x1156 <__stop_program>
