
IMUtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003cc  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000e0  00000000  00000000  0000048a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005d1  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000023c  00000000  00000000  00000b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000589  00000000  00000000  00000d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ba  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000335  00000000  00000000  000015aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000018df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  8e:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <whoAmI>:

	// any other registers to set up

}

void whoAmI(void) {
  96:	1f 93       	push	r17
	
	char test=0;
	char test2=0;
	char test3=0;

	i2c_start(LSM9DS1_WRITE);
  98:	84 ed       	ldi	r24, 0xD4	; 212
  9a:	0e 94 bd 00 	call	0x17a	; 0x17a <i2c_start>
	//if (test==2) { PORTB |= (1<<PORTB2); }
		
	i2c_write(WHO_AM_I_REG);
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2c_write>
	//if (test2==1) { PORTB |= (1<<PORTB1); }

	i2c_start(LSM9DS1_READ);
  a4:	85 ed       	ldi	r24, 0xD5	; 213
  a6:	0e 94 bd 00 	call	0x17a	; 0x17a <i2c_start>
	//if (test3==1) { PORTB |= (1<<PORTB1); }
	
	who = i2c_read_nack();
  aa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_read_nack>
  ae:	18 2f       	mov	r17, r24
	i2c_stop();
  b0:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <i2c_stop>

	if (who == 0x68) { // who am I register value (0x68)
  b4:	18 36       	cpi	r17, 0x68	; 104
  b6:	11 f0       	breq	.+4      	; 0xbc <whoAmI+0x26>
		PORTB |= (1<<PORTB1);
	} else if (who == 0x00) {
  b8:	11 23       	and	r17, r17
  ba:	11 f4       	brne	.+4      	; 0xc0 <whoAmI+0x2a>
		PORTB |= (1<<PORTB1);
  bc:	29 9a       	sbi	0x05, 1	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <whoAmI+0x2c>
	} else {
		PORTB |= (1<<PORTB2);
  c0:	2a 9a       	sbi	0x05, 2	; 5
  c2:	80 ed       	ldi	r24, 0xD0	; 208
  c4:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c6:	28 ec       	ldi	r18, 0xC8	; 200
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <whoAmI+0x36>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d2:	d9 f7       	brne	.-10     	; 0xca <whoAmI+0x34>
	} 
	//PORTB |= (1<<PORTB2);

	_delay_ms(200);

	PORTB &= ~(1<<PORTB1); // turn off LEDs
  d4:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
  d6:	2a 98       	cbi	0x05, 2	; 5
}
  d8:	1f 91       	pop	r17
  da:	08 95       	ret

000000dc <imu_init>:


void imu_init(void) {
	
	// set gyro control registers
	i2c_writeReg(LSM9DS1_WRITE, CTRL_REG1_G, &gyro_ctrl_reg, 3);
  dc:	84 ed       	ldi	r24, 0xD4	; 212
  de:	60 e1       	ldi	r22, 0x10	; 16
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	51 e0       	ldi	r21, 0x01	; 1
  e4:	23 e0       	ldi	r18, 0x03	; 3
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_writeReg>

	// set accel control registers
	i2c_writeReg(LSM9DS1_WRITE, CTRL_REG4, &xl_ctrl_reg, 7);
  ec:	84 ed       	ldi	r24, 0xD4	; 212
  ee:	6e e1       	ldi	r22, 0x1E	; 30
  f0:	43 e0       	ldi	r20, 0x03	; 3
  f2:	51 e0       	ldi	r21, 0x01	; 1
  f4:	27 e0       	ldi	r18, 0x07	; 7
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <i2c_writeReg>

	// any other registers to set up

}
  fc:	08 95       	ret

000000fe <main>:

/* int get_ax(void);
int get_ay(void);
int get_gz(void); */

int main(void) {
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29

	cli(); // disable interrupts
 102:	f8 94       	cli

	DDRB=0;
 104:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
 106:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
 108:	87 e0       	ldi	r24, 0x07	; 7
 10a:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7);
 10c:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
 10e:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
 110:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
 112:	2f 98       	cbi	0x05, 7	; 5

	// declare i2c pins as inputs
	DDRC=0;
 114:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
 116:	18 b8       	out	0x08, r1	; 8
	PORTC |= (1<<PORTC4);
 118:	44 9a       	sbi	0x08, 4	; 8
	PORTC |= (1<<PORTC5);
 11a:	45 9a       	sbi	0x08, 5	; 8

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
 11c:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
 11e:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
 120:	2a 9a       	sbi	0x05, 2	; 5
 122:	80 ed       	ldi	r24, 0xD0	; 208
 124:	97 e0       	ldi	r25, 0x07	; 7
 126:	28 ec       	ldi	r18, 0xC8	; 200
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 130:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 132:	d9 f7       	brne	.-10     	; 0x12a <main+0x2c>
	//PORTC |= (1<<PORTC3); // IR
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
 134:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
 136:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
 138:	2a 98       	cbi	0x05, 2	; 5
	//PORTC &= ~(1<<PORTC3);

	i2c_init();
 13a:	0e 94 b9 00 	call	0x172	; 0x172 <i2c_init>
	
	imu_init();
 13e:	0e 94 6e 00 	call	0xdc	; 0xdc <imu_init>

	PORTB |= (1<<PORTB0); // turn on one LED for imu init success
 142:	28 9a       	sbi	0x05, 0	; 5

	sei(); // enable interrupts
 144:	78 94       	sei
 146:	c8 ec       	ldi	r28, 0xC8	; 200
 148:	d0 e0       	ldi	r29, 0x00	; 0

		// integrate gyroscope

		// turn on LEDs based on heading position

		PORTB |= (1<<PORTB0);
 14a:	28 9a       	sbi	0x05, 0	; 5

		whoAmI(); // test comms
 14c:	0e 94 4b 00 	call	0x96	; 0x96 <whoAmI>

		PORTB &= ~(1<<PORTB0);
 150:	28 98       	cbi	0x05, 0	; 5
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	0a c0       	rjmp	.+20     	; 0x16c <main+0x6e>
 158:	fe 01       	movw	r30, r28
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 160:	d9 f7       	brne	.-10     	; 0x158 <main+0x5a>

		int ii=0;
		while(ii<10) {
			_delay_ms(100); // delay to keep loop from running too quickly
			ii++;
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	3f 4f       	sbci	r19, 0xFF	; 255
		whoAmI(); // test comms

		PORTB &= ~(1<<PORTB0);

		int ii=0;
		while(ii<10) {
 166:	2a 30       	cpi	r18, 0x0A	; 10
 168:	31 05       	cpc	r19, r1
 16a:	79 f3       	breq	.-34     	; 0x14a <main+0x4c>
 16c:	88 ee       	ldi	r24, 0xE8	; 232
 16e:	93 e0       	ldi	r25, 0x03	; 3
 170:	f3 cf       	rjmp	.-26     	; 0x158 <main+0x5a>

00000172 <i2c_init>:
#define Prescaler 1
#define TWBR_val 0x20 // calculated: ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
	TWBR = (char)TWBR_val;
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	80 93 b8 00 	sts	0x00B8, r24
}
 178:	08 95       	ret

0000017a <i2c_start>:

char i2c_start(char address)
{
 17a:	98 2f       	mov	r25, r24
	// reset TWI control register
	//TWCR = 0;
	// transmit START condition 
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 17c:	84 ea       	ldi	r24, 0xA4	; 164
 17e:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 182:	80 91 bc 00 	lds	r24, 0x00BC
 186:	87 ff       	sbrs	r24, 7
 188:	fc cf       	rjmp	.-8      	; 0x182 <i2c_start+0x8>
	
	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
 18a:	80 91 b9 00 	lds	r24, 0x00B9
 18e:	88 7f       	andi	r24, 0xF8	; 248
 190:	88 30       	cpi	r24, 0x08	; 8
 192:	11 f0       	breq	.+4      	; 0x198 <i2c_start+0x1e>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	08 95       	ret
	
	// load slave address into data register
	TWDR = address;
 198:	90 93 bb 00 	sts	0x00BB, r25
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
 19c:	84 e8       	ldi	r24, 0x84	; 132
 19e:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 1a2:	80 91 bc 00 	lds	r24, 0x00BC
 1a6:	87 ff       	sbrs	r24, 7
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <i2c_start+0x28>
	
	// check if the device has acknowledged the READ / WRITE mode
	char twst = TW_STATUS & 0xF8;
 1aa:	80 91 b9 00 	lds	r24, 0x00B9
 1ae:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {return 2;}
 1b0:	88 31       	cpi	r24, 0x18	; 24
 1b2:	21 f0       	breq	.+8      	; 0x1bc <i2c_start+0x42>
 1b4:	80 34       	cpi	r24, 0x40	; 64
 1b6:	11 f0       	breq	.+4      	; 0x1bc <i2c_start+0x42>
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	08 95       	ret
 1bc:	80 e0       	ldi	r24, 0x00	; 0
	

	return 0;
}
 1be:	08 95       	ret

000001c0 <i2c_write>:

char i2c_write(char data)
{
	// load data into data register
	TWDR = data;
 1c0:	80 93 bb 00 	sts	0x00BB, r24
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
 1c4:	84 e8       	ldi	r24, 0x84	; 132
 1c6:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
 1ca:	80 91 bc 00 	lds	r24, 0x00BC
 1ce:	87 ff       	sbrs	r24, 7
 1d0:	fc cf       	rjmp	.-8      	; 0x1ca <i2c_write+0xa>
	
	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
 1d2:	80 91 b9 00 	lds	r24, 0x00B9
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	88 7f       	andi	r24, 0xF8	; 248
 1da:	88 32       	cpi	r24, 0x28	; 40
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <i2c_write+0x20>
 1de:	91 e0       	ldi	r25, 0x01	; 1
	
	return 0;
}
 1e0:	89 2f       	mov	r24, r25
 1e2:	08 95       	ret

000001e4 <i2c_read_ack>:

char i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 1e4:	84 ec       	ldi	r24, 0xC4	; 196
 1e6:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 1ea:	80 91 bc 00 	lds	r24, 0x00BC
 1ee:	87 ff       	sbrs	r24, 7
 1f0:	fc cf       	rjmp	.-8      	; 0x1ea <i2c_read_ack+0x6>
	// return received data from TWDR
	return TWDR;
 1f2:	80 91 bb 00 	lds	r24, 0x00BB
}
 1f6:	08 95       	ret

000001f8 <i2c_read_nack>:

char i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 1f8:	84 e8       	ldi	r24, 0x84	; 132
 1fa:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 1fe:	80 91 bc 00 	lds	r24, 0x00BC
 202:	87 ff       	sbrs	r24, 7
 204:	fc cf       	rjmp	.-8      	; 0x1fe <i2c_read_nack+0x6>
	// return received data from TWDR
	return TWDR;
 206:	80 91 bb 00 	lds	r24, 0x00BB
}
 20a:	08 95       	ret

0000020c <i2c_transmit>:

char i2c_transmit(char address, char* data, int length)
{
 20c:	ef 92       	push	r14
 20e:	ff 92       	push	r15
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	7b 01       	movw	r14, r22
 21a:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) {return 1;}
 21c:	0e 94 bd 00 	call	0x17a	; 0x17a <i2c_start>
 220:	88 23       	and	r24, r24
 222:	a1 f4       	brne	.+40     	; 0x24c <i2c_transmit+0x40>
 224:	c0 e0       	ldi	r28, 0x00	; 0
 226:	d0 e0       	ldi	r29, 0x00	; 0
 228:	09 c0       	rjmp	.+18     	; 0x23c <i2c_transmit+0x30>
	
	for (int i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) {return 1;}
 22a:	f7 01       	movw	r30, r14
 22c:	ec 0f       	add	r30, r28
 22e:	fd 1f       	adc	r31, r29
 230:	80 81       	ld	r24, Z
 232:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2c_write>
 236:	88 23       	and	r24, r24
 238:	49 f4       	brne	.+18     	; 0x24c <i2c_transmit+0x40>

char i2c_transmit(char address, char* data, int length)
{
	if (i2c_start(address | I2C_WRITE)) {return 1;}
	
	for (int i = 0; i < length; i++)
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	c0 17       	cp	r28, r16
 23e:	d1 07       	cpc	r29, r17
 240:	a4 f3       	brlt	.-24     	; 0x22a <i2c_transmit+0x1e>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 242:	84 e9       	ldi	r24, 0x94	; 148
 244:	80 93 bc 00 	sts	0x00BC, r24
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	01 c0       	rjmp	.+2      	; 0x24e <i2c_transmit+0x42>
		if (i2c_write(data[i])) {return 1;}
	}
	
	i2c_stop();
	
	return 0;
 24c:	81 e0       	ldi	r24, 0x01	; 1
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	08 95       	ret

0000025c <i2c_receive>:

char i2c_receive(char address, char* data, int length)
{
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	eb 01       	movw	r28, r22
 266:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_READ)) {return 1;}
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	0e 94 bd 00 	call	0x17a	; 0x17a <i2c_start>
 26e:	88 23       	and	r24, r24
 270:	11 f0       	breq	.+4      	; 0x276 <i2c_receive+0x1a>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	29 c0       	rjmp	.+82     	; 0x2c8 <i2c_receive+0x6c>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int i = 0; i < (length-1); i++)
 27a:	a8 01       	movw	r20, r16
 27c:	41 50       	subi	r20, 0x01	; 1
 27e:	50 40       	sbci	r21, 0x00	; 0

char i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 280:	94 ec       	ldi	r25, 0xC4	; 196
 282:	0e c0       	rjmp	.+28     	; 0x2a0 <i2c_receive+0x44>
 284:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 288:	80 91 bc 00 	lds	r24, 0x00BC
 28c:	87 ff       	sbrs	r24, 7
 28e:	fc cf       	rjmp	.-8      	; 0x288 <i2c_receive+0x2c>
	// return received data from TWDR
	return TWDR;
 290:	80 91 bb 00 	lds	r24, 0x00BB
{
	if (i2c_start(address | I2C_READ)) {return 1;}
	
	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 294:	fe 01       	movw	r30, r28
 296:	e2 0f       	add	r30, r18
 298:	f3 1f       	adc	r31, r19
 29a:	80 83       	st	Z, r24

char i2c_receive(char address, char* data, int length)
{
	if (i2c_start(address | I2C_READ)) {return 1;}
	
	for (int i = 0; i < (length-1); i++)
 29c:	2f 5f       	subi	r18, 0xFF	; 255
 29e:	3f 4f       	sbci	r19, 0xFF	; 255
 2a0:	24 17       	cp	r18, r20
 2a2:	35 07       	cpc	r19, r21
 2a4:	7c f3       	brlt	.-34     	; 0x284 <i2c_receive+0x28>

char i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 2a6:	84 e8       	ldi	r24, 0x84	; 132
 2a8:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 2ac:	80 91 bc 00 	lds	r24, 0x00BC
 2b0:	87 ff       	sbrs	r24, 7
 2b2:	fc cf       	rjmp	.-8      	; 0x2ac <i2c_receive+0x50>
	// return received data from TWDR
	return TWDR;
 2b4:	80 91 bb 00 	lds	r24, 0x00BB
	
	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 2b8:	c0 0f       	add	r28, r16
 2ba:	d1 1f       	adc	r29, r17
 2bc:	21 97       	sbiw	r28, 0x01	; 1
 2be:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 2c0:	84 e9       	ldi	r24, 0x94	; 148
 2c2:	80 93 bc 00 	sts	0x00BC, r24
 2c6:	80 e0       	ldi	r24, 0x00	; 0
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <i2c_writeReg>:

char i2c_writeReg(char devaddr, char regaddr, char* data, int length)
{
 2d2:	cf 92       	push	r12
 2d4:	df 92       	push	r13
 2d6:	ef 92       	push	r14
 2d8:	ff 92       	push	r15
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	16 2f       	mov	r17, r22
 2e2:	6a 01       	movw	r12, r20
 2e4:	79 01       	movw	r14, r18
	if (i2c_start(devaddr | 0x00)) { return 1; }
 2e6:	0e 94 bd 00 	call	0x17a	; 0x17a <i2c_start>
 2ea:	88 23       	and	r24, r24
 2ec:	b9 f4       	brne	.+46     	; 0x31c <i2c_writeReg+0x4a>

	i2c_write(regaddr);
 2ee:	81 2f       	mov	r24, r17
 2f0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2c_write>
 2f4:	c0 e0       	ldi	r28, 0x00	; 0
 2f6:	d0 e0       	ldi	r29, 0x00	; 0
 2f8:	09 c0       	rjmp	.+18     	; 0x30c <i2c_writeReg+0x3a>

	for (int i = 0; i < length; i++)
	{
		if (i2c_write(data[i])){ return 1; }
 2fa:	f6 01       	movw	r30, r12
 2fc:	ec 0f       	add	r30, r28
 2fe:	fd 1f       	adc	r31, r29
 300:	80 81       	ld	r24, Z
 302:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2c_write>
 306:	88 23       	and	r24, r24
 308:	49 f4       	brne	.+18     	; 0x31c <i2c_writeReg+0x4a>
{
	if (i2c_start(devaddr | 0x00)) { return 1; }

	i2c_write(regaddr);

	for (int i = 0; i < length; i++)
 30a:	21 96       	adiw	r28, 0x01	; 1
 30c:	ce 15       	cp	r28, r14
 30e:	df 05       	cpc	r29, r15
 310:	a4 f3       	brlt	.-24     	; 0x2fa <i2c_writeReg+0x28>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 312:	84 e9       	ldi	r24, 0x94	; 148
 314:	80 93 bc 00 	sts	0x00BC, r24
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	01 c0       	rjmp	.+2      	; 0x31e <i2c_writeReg+0x4c>
		if (i2c_write(data[i])){ return 1; }
	}

	i2c_stop();

	return 0;
 31c:	81 e0       	ldi	r24, 0x01	; 1
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	df 90       	pop	r13
 32a:	cf 90       	pop	r12
 32c:	08 95       	ret

0000032e <i2c_readReg>:

char i2c_readReg(char devaddr, char regaddr, char* data, int length)
{
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	18 2f       	mov	r17, r24
 33c:	06 2f       	mov	r16, r22
 33e:	ea 01       	movw	r28, r20
 340:	79 01       	movw	r14, r18
	if (i2c_start(devaddr)) { return 1; }
 342:	0e 94 bd 00 	call	0x17a	; 0x17a <i2c_start>
 346:	88 23       	and	r24, r24
 348:	99 f5       	brne	.+102    	; 0x3b0 <i2c_readReg+0x82>

	i2c_write(regaddr);
 34a:	80 2f       	mov	r24, r16
 34c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <i2c_write>

	if (i2c_start(devaddr | 0x01)) { return 1; }
 350:	81 2f       	mov	r24, r17
 352:	81 60       	ori	r24, 0x01	; 1
 354:	0e 94 bd 00 	call	0x17a	; 0x17a <i2c_start>
 358:	88 23       	and	r24, r24
 35a:	51 f5       	brne	.+84     	; 0x3b0 <i2c_readReg+0x82>
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0

	for (int i = 0; i < (length-1); i++)
 360:	a7 01       	movw	r20, r14
 362:	41 50       	subi	r20, 0x01	; 1
 364:	50 40       	sbci	r21, 0x00	; 0

char i2c_read_ack(void)
{
	
	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); 
 366:	94 ec       	ldi	r25, 0xC4	; 196
 368:	0e c0       	rjmp	.+28     	; 0x386 <i2c_readReg+0x58>
 36a:	90 93 bc 00 	sts	0x00BC, r25
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 36e:	80 91 bc 00 	lds	r24, 0x00BC
 372:	87 ff       	sbrs	r24, 7
 374:	fc cf       	rjmp	.-8      	; 0x36e <i2c_readReg+0x40>
	// return received data from TWDR
	return TWDR;
 376:	80 91 bb 00 	lds	r24, 0x00BB

	if (i2c_start(devaddr | 0x01)) { return 1; }

	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
 37a:	fe 01       	movw	r30, r28
 37c:	e2 0f       	add	r30, r18
 37e:	f3 1f       	adc	r31, r19
 380:	80 83       	st	Z, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) { return 1; }

	for (int i = 0; i < (length-1); i++)
 382:	2f 5f       	subi	r18, 0xFF	; 255
 384:	3f 4f       	sbci	r19, 0xFF	; 255
 386:	24 17       	cp	r18, r20
 388:	35 07       	cpc	r19, r21
 38a:	7c f3       	brlt	.-34     	; 0x36a <i2c_readReg+0x3c>

char i2c_read_nack(void)
{
	
	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
 38c:	84 e8       	ldi	r24, 0x84	; 132
 38e:	80 93 bc 00 	sts	0x00BC, r24
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) ) {;}
 392:	80 91 bc 00 	lds	r24, 0x00BC
 396:	87 ff       	sbrs	r24, 7
 398:	fc cf       	rjmp	.-8      	; 0x392 <i2c_readReg+0x64>
	// return received data from TWDR
	return TWDR;
 39a:	80 91 bb 00 	lds	r24, 0x00BB

	for (int i = 0; i < (length-1); i++)
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 39e:	ce 0d       	add	r28, r14
 3a0:	df 1d       	adc	r29, r15
 3a2:	21 97       	sbiw	r28, 0x01	; 1
 3a4:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3a6:	84 e9       	ldi	r24, 0x94	; 148
 3a8:	80 93 bc 00 	sts	0x00BC, r24
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <i2c_readReg+0x84>
	}
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	ff 90       	pop	r15
 3bc:	ef 90       	pop	r14
 3be:	08 95       	ret

000003c0 <i2c_stop>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3c0:	84 e9       	ldi	r24, 0x94	; 148
 3c2:	80 93 bc 00 	sts	0x00BC, r24
}
 3c6:	08 95       	ret

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
