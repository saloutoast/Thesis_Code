
TriCentering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  000017a6  0000183a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800210  00800210  0000194a  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  0000194a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000234  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000263a  00000000  00000000  00001d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000130d  00000000  00000000  00004358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001826  00000000  00000000  00005665  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00006e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a2  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b4a  00000000  00000000  0000753e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_23>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ea       	ldi	r30, 0xA6	; 166
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 32       	cpi	r26, 0x28	; 40
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 0f 02 	call	0x41e	; 0x41e <main>
      9e:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_23>:

	}

}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25

	if (rcving==0) {
      b8:	80 91 16 02 	lds	r24, 0x0216
      bc:	88 23       	and	r24, r24
      be:	81 f4       	brne	.+32     	; 0xe0 <__vector_23+0x3a>

		TCNT2=0;
      c0:	10 92 b2 00 	sts	0x00B2, r1
		rcving=1;
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	80 93 16 02 	sts	0x0216, r24
		rcvd=0x80;
      ca:	80 e8       	ldi	r24, 0x80	; 128
      cc:	80 93 17 02 	sts	0x0217, r24
		ACSR &= ~(1<<ACIS0); // change to falling edge
      d0:	80 b7       	in	r24, 0x30	; 48
      d2:	8e 7f       	andi	r24, 0xFE	; 254
      d4:	80 bf       	out	0x30, r24	; 48
		rcv_sx = 0; // reset success flag
      d6:	10 92 19 02 	sts	0x0219, r1
      da:	10 92 18 02 	sts	0x0218, r1
      de:	aa c0       	rjmp	.+340    	; 0x234 <__vector_23+0x18e>
		//PORTB &= ~(1<<PORTB1);
		//PORTB &= ~(1<<PORTB2);

	} else { // first rising edge has been detected (rcving=1)

		if (!(ACSR&(1<<ACIS0))) { // check for first falling edge
      e0:	00 b6       	in	r0, 0x30	; 48
      e2:	00 fc       	sbrc	r0, 0
      e4:	0d c0       	rjmp	.+26     	; 0x100 <__vector_23+0x5a>

			distance = 0;
      e6:	10 92 1a 02 	sts	0x021A, r1
			distance |= TCNT2; // use timer value for distance
      ea:	80 91 1a 02 	lds	r24, 0x021A
      ee:	90 91 b2 00 	lds	r25, 0x00B2
      f2:	98 2b       	or	r25, r24
      f4:	90 93 1a 02 	sts	0x021A, r25
			ACSR |= (1<<ACIS0); // switch back to rising edge
      f8:	80 b7       	in	r24, 0x30	; 48
      fa:	81 60       	ori	r24, 0x01	; 1
      fc:	80 bf       	out	0x30, r24	; 48
      fe:	9a c0       	rjmp	.+308    	; 0x234 <__vector_23+0x18e>
		} else { // on subsequent rising edges
			// TODO: add LED debugging for each bit
			//PORTB |= (1<<PORTB0);

			// match rising edges to closest expected time in rcvd
			bit_time = 0;
     100:	10 92 1b 02 	sts	0x021B, r1
			bit_time |= TCNT2; // time that rising edge was detected
     104:	80 91 1b 02 	lds	r24, 0x021B
     108:	90 91 b2 00 	lds	r25, 0x00B2
     10c:	98 2b       	or	r25, r24
     10e:	90 93 1b 02 	sts	0x021B, r25
			
			if ((bit_time>=10)&(bit_time<=17)) { rcvd |= 0x40; }
     112:	80 91 1b 02 	lds	r24, 0x021B
     116:	90 91 1b 02 	lds	r25, 0x021B
     11a:	8a 30       	cpi	r24, 0x0A	; 10
     11c:	30 f0       	brcs	.+12     	; 0x12a <__vector_23+0x84>
     11e:	92 31       	cpi	r25, 0x12	; 18
     120:	20 f4       	brcc	.+8      	; 0x12a <__vector_23+0x84>
     122:	80 91 17 02 	lds	r24, 0x0217
     126:	80 64       	ori	r24, 0x40	; 64
     128:	3b c0       	rjmp	.+118    	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=22)&(bit_time<=29)) { rcvd |= 0x20; }
     12a:	80 91 1b 02 	lds	r24, 0x021B
     12e:	90 91 1b 02 	lds	r25, 0x021B
     132:	86 31       	cpi	r24, 0x16	; 22
     134:	30 f0       	brcs	.+12     	; 0x142 <__vector_23+0x9c>
     136:	9e 31       	cpi	r25, 0x1E	; 30
     138:	20 f4       	brcc	.+8      	; 0x142 <__vector_23+0x9c>
     13a:	80 91 17 02 	lds	r24, 0x0217
     13e:	80 62       	ori	r24, 0x20	; 32
     140:	2f c0       	rjmp	.+94     	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=35)&(bit_time<=42)) { rcvd |= 0x10; }
     142:	80 91 1b 02 	lds	r24, 0x021B
     146:	90 91 1b 02 	lds	r25, 0x021B
     14a:	83 32       	cpi	r24, 0x23	; 35
     14c:	30 f0       	brcs	.+12     	; 0x15a <__vector_23+0xb4>
     14e:	9b 32       	cpi	r25, 0x2B	; 43
     150:	20 f4       	brcc	.+8      	; 0x15a <__vector_23+0xb4>
     152:	80 91 17 02 	lds	r24, 0x0217
     156:	80 61       	ori	r24, 0x10	; 16
     158:	23 c0       	rjmp	.+70     	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=47)&(bit_time<=54)) { rcvd |= 0x08; }
     15a:	80 91 1b 02 	lds	r24, 0x021B
     15e:	90 91 1b 02 	lds	r25, 0x021B
     162:	8f 32       	cpi	r24, 0x2F	; 47
     164:	30 f0       	brcs	.+12     	; 0x172 <__vector_23+0xcc>
     166:	97 33       	cpi	r25, 0x37	; 55
     168:	20 f4       	brcc	.+8      	; 0x172 <__vector_23+0xcc>
     16a:	80 91 17 02 	lds	r24, 0x0217
     16e:	88 60       	ori	r24, 0x08	; 8
     170:	17 c0       	rjmp	.+46     	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=60)&(bit_time<=67)) { rcvd |= 0x04; }
     172:	80 91 1b 02 	lds	r24, 0x021B
     176:	90 91 1b 02 	lds	r25, 0x021B
     17a:	8c 33       	cpi	r24, 0x3C	; 60
     17c:	30 f0       	brcs	.+12     	; 0x18a <__vector_23+0xe4>
     17e:	94 34       	cpi	r25, 0x44	; 68
     180:	20 f4       	brcc	.+8      	; 0x18a <__vector_23+0xe4>
     182:	80 91 17 02 	lds	r24, 0x0217
     186:	84 60       	ori	r24, 0x04	; 4
     188:	0b c0       	rjmp	.+22     	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=72)&(bit_time<=79)) { rcvd |= 0x02; }
     18a:	80 91 1b 02 	lds	r24, 0x021B
     18e:	90 91 1b 02 	lds	r25, 0x021B
     192:	88 34       	cpi	r24, 0x48	; 72
     194:	40 f0       	brcs	.+16     	; 0x1a6 <__vector_23+0x100>
     196:	90 35       	cpi	r25, 0x50	; 80
     198:	30 f4       	brcc	.+12     	; 0x1a6 <__vector_23+0x100>
     19a:	80 91 17 02 	lds	r24, 0x0217
     19e:	82 60       	ori	r24, 0x02	; 2
     1a0:	80 93 17 02 	sts	0x0217, r24
     1a4:	47 c0       	rjmp	.+142    	; 0x234 <__vector_23+0x18e>
			else if ((bit_time>=85)&(bit_time<=92)) { // eighth bit has been received
     1a6:	80 91 1b 02 	lds	r24, 0x021B
     1aa:	90 91 1b 02 	lds	r25, 0x021B
     1ae:	85 35       	cpi	r24, 0x55	; 85
     1b0:	d8 f1       	brcs	.+118    	; 0x228 <__vector_23+0x182>
     1b2:	9d 35       	cpi	r25, 0x5D	; 93
     1b4:	c8 f5       	brcc	.+114    	; 0x228 <__vector_23+0x182>
				rcvd |= 0x01; 
     1b6:	80 91 17 02 	lds	r24, 0x0217
     1ba:	81 60       	ori	r24, 0x01	; 1
     1bc:	80 93 17 02 	sts	0x0217, r24
				rcv_sx = 1;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	90 93 19 02 	sts	0x0219, r25
     1c8:	80 93 18 02 	sts	0x0218, r24
				lastRcv = 0;
     1cc:	10 92 1c 02 	sts	0x021C, r1
				lastRcv |= rcvd; // store message
     1d0:	90 91 1c 02 	lds	r25, 0x021C
     1d4:	80 91 17 02 	lds	r24, 0x0217
     1d8:	89 2b       	or	r24, r25
     1da:	80 93 1c 02 	sts	0x021C, r24
				//PORTB |= (1<<PORTB1);
				//PORTB &= ~(1<<PORTB0);
				//if (lastRcv==toRcv1) { PORTB |= (1<<PORTB2); }
				//if (lastRcv==toRcv2) { PORTB |= (1<<PORTB0); }

				if (rcv_ct<10) { // during calibration
     1de:	80 91 1d 02 	lds	r24, 0x021D
     1e2:	8a 30       	cpi	r24, 0x0A	; 10
     1e4:	58 f4       	brcc	.+22     	; 0x1fc <__vector_23+0x156>
					if (lastRcv==beaconID1) {
     1e6:	90 91 1c 02 	lds	r25, 0x021C
     1ea:	80 91 01 01 	lds	r24, 0x0101
     1ee:	98 17       	cp	r25, r24
     1f0:	29 f0       	breq	.+10     	; 0x1fc <__vector_23+0x156>
						//PORTB |= (1<<PORTB1);
						rcv_time = 0;
						rcv_time |= TCNT1;
						TCNT1 = 0; // reset timer1 on received messages
					} else { // ignore message
						rcv_sx = 0;
     1f2:	10 92 19 02 	sts	0x0219, r1
     1f6:	10 92 18 02 	sts	0x0218, r1
     1fa:	16 c0       	rjmp	.+44     	; 0x228 <__vector_23+0x182>
					}
				} else { // after calibration
					rcv_time = 0;
     1fc:	10 92 1f 02 	sts	0x021F, r1
     200:	10 92 1e 02 	sts	0x021E, r1
					rcv_time |= TCNT1;
     204:	80 91 1e 02 	lds	r24, 0x021E
     208:	90 91 1f 02 	lds	r25, 0x021F
     20c:	20 91 84 00 	lds	r18, 0x0084
     210:	30 91 85 00 	lds	r19, 0x0085
     214:	82 2b       	or	r24, r18
     216:	93 2b       	or	r25, r19
     218:	90 93 1f 02 	sts	0x021F, r25
     21c:	80 93 1e 02 	sts	0x021E, r24
					TCNT1 = 0; // reset timer1 on received messages
     220:	10 92 85 00 	sts	0x0085, r1
     224:	10 92 84 00 	sts	0x0084, r1
				rcving = 0; // reset receiving variables
				TCNT2 = 0;
				rcvd = 0;

			}  else { // bad rising edge means message is bad, discard and reset
				rcving = 0; // reset receiving variables
     228:	10 92 16 02 	sts	0x0216, r1
				TCNT2 = 0;
     22c:	10 92 b2 00 	sts	0x00B2, r1
				rcvd = 0;
     230:	10 92 17 02 	sts	0x0217, r1
	/* while(ACSR & (1<<ACO)) {
		PORTB |= (1<<PORTB0);
	}
	PORTB &= ~(1<<PORTB0); */

} 
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	3f 91       	pop	r19
     23a:	2f 91       	pop	r18
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_7>:

// reset routine for message reception
ISR(TIMER2_COMPA_vect) { // timer2 interrupt routine
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1

	rcving = 0;
     250:	10 92 16 02 	sts	0x0216, r1
	rcvd = 0;
     254:	10 92 17 02 	sts	0x0217, r1
	//PORTB &= ~(1<<PORTB0);
	//PORTB &= ~(1<<PORTB1);

}
     258:	0f 90       	pop	r0
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	0f 90       	pop	r0
     25e:	1f 90       	pop	r1
     260:	18 95       	reti

00000262 <__vector_14>:

// routine for timer0 to send messages, pause for a longer time between messages
ISR(TIMER0_COMPA_vect) { // timer0 interrupt routine
     262:	1f 92       	push	r1
     264:	0f 92       	push	r0
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	0f 92       	push	r0
     26a:	11 24       	eor	r1, r1
     26c:	2f 93       	push	r18
     26e:	3f 93       	push	r19
     270:	4f 93       	push	r20
     272:	5f 93       	push	r21
     274:	6f 93       	push	r22
     276:	7f 93       	push	r23
     278:	8f 93       	push	r24
     27a:	9f 93       	push	r25
     27c:	ef 93       	push	r30
     27e:	ff 93       	push	r31

	if (bits_sent<8) { // if the whole message has not been sent
     280:	80 91 10 02 	lds	r24, 0x0210
     284:	90 91 11 02 	lds	r25, 0x0211
     288:	08 97       	sbiw	r24, 0x08	; 8
     28a:	0c f0       	brlt	.+2      	; 0x28e <__vector_14+0x2c>
     28c:	40 c0       	rjmp	.+128    	; 0x30e <__vector_14+0xac>
		if (pause==0) { // 0,1 half of bit to be sent
     28e:	80 91 12 02 	lds	r24, 0x0212
     292:	90 91 13 02 	lds	r25, 0x0213
     296:	89 2b       	or	r24, r25
     298:	a1 f5       	brne	.+104    	; 0x302 <__vector_14+0xa0>
			new_bit = (toSend & (1<<(7-bits_sent))) >> (7-bits_sent);
     29a:	40 91 00 01 	lds	r20, 0x0100
     29e:	80 91 10 02 	lds	r24, 0x0210
     2a2:	90 91 11 02 	lds	r25, 0x0211
     2a6:	e0 91 10 02 	lds	r30, 0x0210
     2aa:	f0 91 11 02 	lds	r31, 0x0211
     2ae:	27 e0       	ldi	r18, 0x07	; 7
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	b9 01       	movw	r22, r18
     2b4:	68 1b       	sub	r22, r24
     2b6:	79 0b       	sbc	r23, r25
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <__vector_14+0x60>
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	6a 95       	dec	r22
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <__vector_14+0x5c>
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	84 23       	and	r24, r20
     2ca:	95 23       	and	r25, r21
     2cc:	2e 1b       	sub	r18, r30
     2ce:	3f 0b       	sbc	r19, r31
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <__vector_14+0x74>
     2d2:	95 95       	asr	r25
     2d4:	87 95       	ror	r24
     2d6:	2a 95       	dec	r18
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <__vector_14+0x70>
     2da:	90 93 15 02 	sts	0x0215, r25
     2de:	80 93 14 02 	sts	0x0214, r24
			if(new_bit==1) { // turn on LEDs
     2e2:	80 91 14 02 	lds	r24, 0x0214
     2e6:	90 91 15 02 	lds	r25, 0x0215
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	11 f4       	brne	.+4      	; 0x2f2 <__vector_14+0x90>
				PORTC |= (1<<PORTC3);
     2ee:	43 9a       	sbi	0x08, 3	; 8
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <__vector_14+0x92>
				//PORTB |= (1<<PORTB2);
			} else { // turn off LEDs
				PORTC &= ~(1<<PORTC3);
     2f2:	43 98       	cbi	0x08, 3	; 8
				//PORTB &= ~(1<<PORTB2);
			}
			pause = 1; // pause after sending a bit
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	90 93 13 02 	sts	0x0213, r25
     2fc:	80 93 12 02 	sts	0x0212, r24
     300:	1a c0       	rjmp	.+52     	; 0x336 <__vector_14+0xd4>
		} else { // pausing between bits
			pause = 0; // send new bit on next interrupt
     302:	10 92 13 02 	sts	0x0213, r1
     306:	10 92 12 02 	sts	0x0212, r1
			PORTC &= ~(1<<PORTC3); // ensure LEDs are low for pause
     30a:	43 98       	cbi	0x08, 3	; 8
     30c:	0b c0       	rjmp	.+22     	; 0x324 <__vector_14+0xc2>
			//PORTB &= ~(1<<PORTB2);
			bits_sent += 1; // increment bits_sent after each pause
		}
	} else { // if bits_sent >= 8, reset variables and pause for a bit
		if (bits_sent>=40) { // wait for 2 messages, send again
     30e:	80 91 10 02 	lds	r24, 0x0210
     312:	90 91 11 02 	lds	r25, 0x0211
     316:	88 97       	sbiw	r24, 0x28	; 40
     318:	2c f0       	brlt	.+10     	; 0x324 <__vector_14+0xc2>
			bits_sent = 0; 
     31a:	10 92 11 02 	sts	0x0211, r1
     31e:	10 92 10 02 	sts	0x0210, r1
     322:	09 c0       	rjmp	.+18     	; 0x336 <__vector_14+0xd4>
		} else {
			bits_sent+=1; // increment bits_sent for timing between messages
     324:	80 91 10 02 	lds	r24, 0x0210
     328:	90 91 11 02 	lds	r25, 0x0211
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	90 93 11 02 	sts	0x0211, r25
     332:	80 93 10 02 	sts	0x0210, r24
		}
		
		// TODO: could disable ISR here, for send_msg function?
	}

}
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	7f 91       	pop	r23
     340:	6f 91       	pop	r22
     342:	5f 91       	pop	r21
     344:	4f 91       	pop	r20
     346:	3f 91       	pop	r19
     348:	2f 91       	pop	r18
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <detach>:

// "move" by detaching magnet for a specified time in ms
void detach(double time) {
     354:	af 92       	push	r10
     356:	bf 92       	push	r11
     358:	cf 92       	push	r12
     35a:	df 92       	push	r13
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	5b 01       	movw	r10, r22
     366:	6c 01       	movw	r12, r24

	//switch E.P.M. direction 1 (detach)
	//PORTB |= (1<<PORTB0); // set inner LED, indicating direction 1
	PORTB |= (1<<6);//activate E.P.M direction 1
     368:	2e 9a       	sbi	0x05, 6	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     36a:	80 ef       	ldi	r24, 0xF0	; 240
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <detach+0x1a>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     372:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     374:	2f 98       	cbi	0x05, 7	; 5
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     376:	c6 01       	movw	r24, r12
     378:	b5 01       	movw	r22, r10
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	4a ef       	ldi	r20, 0xFA	; 250
     380:	54 e4       	ldi	r21, 0x44	; 68
     382:	0e 94 42 07 	call	0xe84	; 0xe84 <__mulsf3>
     386:	7b 01       	movw	r14, r22
     388:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	40 e8       	ldi	r20, 0x80	; 128
     390:	5f e3       	ldi	r21, 0x3F	; 63
     392:	0e 94 9c 08 	call	0x1138	; 0x1138 <__ltsf2>
     396:	88 23       	and	r24, r24
     398:	1c f4       	brge	.+6      	; 0x3a0 <detach+0x4c>
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	24 c0       	rjmp	.+72     	; 0x3e8 <detach+0x94>
		__ticks = 1;
	else if (__tmp > 65535)
     3a0:	c8 01       	movw	r24, r16
     3a2:	b7 01       	movw	r22, r14
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	3f ef       	ldi	r19, 0xFF	; 255
     3a8:	4f e7       	ldi	r20, 0x7F	; 127
     3aa:	57 e4       	ldi	r21, 0x47	; 71
     3ac:	0e 94 3c 08 	call	0x1078	; 0x1078 <__gtsf2>
     3b0:	18 16       	cp	r1, r24
     3b2:	b4 f4       	brge	.+44     	; 0x3e0 <detach+0x8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3b4:	c6 01       	movw	r24, r12
     3b6:	b5 01       	movw	r22, r10
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	40 e2       	ldi	r20, 0x20	; 32
     3be:	51 e4       	ldi	r21, 0x41	; 65
     3c0:	0e 94 42 07 	call	0xe84	; 0xe84 <__mulsf3>
     3c4:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fixunssfsi>
     3c8:	88 ec       	ldi	r24, 0xC8	; 200
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <detach+0x84>
     3ce:	fc 01       	movw	r30, r24
     3d0:	31 97       	sbiw	r30, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <detach+0x7c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3d4:	61 50       	subi	r22, 0x01	; 1
     3d6:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3d8:	61 15       	cp	r22, r1
     3da:	71 05       	cpc	r23, r1
     3dc:	c1 f7       	brne	.-16     	; 0x3ce <detach+0x7a>
     3de:	07 c0       	rjmp	.+14     	; 0x3ee <detach+0x9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3e0:	c8 01       	movw	r24, r16
     3e2:	b7 01       	movw	r22, r14
     3e4:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fixunssfsi>
     3e8:	cb 01       	movw	r24, r22
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <detach+0x96>

	_delay_ms(time); // stay detached for desired time

	//switch E.P.M. direction 2 (re-attach)
	//PORTB &= ~(1<<PORTB0); // clear inner LED, indicating direction 2
	PORTB |= (1<<7);//activate E.P.M direction 2
     3ee:	2f 9a       	sbi	0x05, 7	; 5
     3f0:	80 ef       	ldi	r24, 0xF0	; 240
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <detach+0xa0>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     3f8:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     3fa:	2f 98       	cbi	0x05, 7	; 5

	return;
}
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	bf 90       	pop	r11
     40a:	af 90       	pop	r10
     40c:	08 95       	ret

0000040e <reset_EPM>:
// reset EPM in case of robot/code malfunction
void reset_EPM(void) {

	//switch E.P.M. direction 2 (re-attach)
	//PORTB &= ~(1<<PORTB0); // clear inner LED, indicating direction 2
	PORTB |= (1<<7);//activate E.P.M direction 2
     40e:	2f 9a       	sbi	0x05, 7	; 5
     410:	80 ef       	ldi	r24, 0xF0	; 240
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <reset_EPM+0x6>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     418:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     41a:	2f 98       	cbi	0x05, 7	; 5

	return;

}
     41c:	08 95       	ret

0000041e <main>:
static volatile int beaconID3_time = 0;
static volatile char beacons_rcvd = 0;
static volatile char desired_beacon = 0;
static volatile int center_threshold = 100;

int main(void) {
     41e:	4f 92       	push	r4
     420:	5f 92       	push	r5
     422:	6f 92       	push	r6
     424:	7f 92       	push	r7
     426:	8f 92       	push	r8
     428:	9f 92       	push	r9
     42a:	af 92       	push	r10
     42c:	bf 92       	push	r11
     42e:	cf 92       	push	r12
     430:	df 92       	push	r13
     432:	ef 92       	push	r14
     434:	ff 92       	push	r15
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29

	DDRB=0;
     43e:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
     440:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
     442:	87 e0       	ldi	r24, 0x07	; 7
     444:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7); // enable EPM pins
     446:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
     448:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
     44a:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
     44c:	2f 98       	cbi	0x05, 7	; 5

	DDRC=0; // enable IR LED
     44e:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
     450:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
     452:	88 e0       	ldi	r24, 0x08	; 8
     454:	87 b9       	out	0x07, r24	; 7

	cli(); // disable interrupts
     456:	f8 94       	cli

	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
     458:	83 e0       	ldi	r24, 0x03	; 3
     45a:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
     45e:	8b e0       	ldi	r24, 0x0B	; 11
     460:	80 bf       	out	0x30, r24	; 48

	// Initialize timer0 for timing sending of messages (1/8 prescaler, 8-bit timer rolls over at ~3.9 kHz Hz)
	TCCR0A |= (1<<WGM01); // // do not change any output pin, clear at compare match with OCR0A
     462:	84 b5       	in	r24, 0x24	; 36
     464:	82 60       	ori	r24, 0x02	; 2
     466:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0<<CS02)|(1<<CS01)|(0<<CS00); // prescaler of 1/8
     468:	85 b5       	in	r24, 0x25	; 37
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	85 bd       	out	0x25, r24	; 37
	OCR0A = 100; // interrupt every 100 counts, for sending a new bit every 2 cycles
     46e:	84 e6       	ldi	r24, 0x64	; 100
     470:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
     472:	80 91 6e 00 	lds	r24, 0x006E
     476:	82 60       	ori	r24, 0x02	; 2
     478:	80 93 6e 00 	sts	0x006E, r24

	// Initialize timer1 for neighbor-marking, based on times of received messages
	TCCR1B |= (1<<CS12)|(0<<CS11)|(1<<CS10); // 1/1024 prescaler, counts at ~7.8kHz (1 count is 0.128 ms), 16-bit timer
     47c:	80 91 81 00 	lds	r24, 0x0081
     480:	85 60       	ori	r24, 0x05	; 5
     482:	80 93 81 00 	sts	0x0081, r24

	// Initialize timer2 for timing receiving of messages (1/128 prescaler, 8-bit timer rolls over at ~250 Hz )
	TCCR2A |= (1<<WGM21); // do not change any output pin, clear at compare match with OCR2A
     486:	80 91 b0 00 	lds	r24, 0x00B0
     48a:	82 60       	ori	r24, 0x02	; 2
     48c:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = (1<<OCIE2A); // compare match on OCR2A
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	80 93 70 00 	sts	0x0070, r24
    OCR2A = 200; // compare every 200 counts (every 3.2ms, 2x length of message)
     496:	88 ec       	ldi	r24, 0xC8	; 200
     498:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= (1<<CS22)|(0<<CS21)|(1<<CS20); // prescaler of 1/128: count every 16us
     49c:	80 91 b1 00 	lds	r24, 0x00B1
     4a0:	85 60       	ori	r24, 0x05	; 5
     4a2:	80 93 b1 00 	sts	0x00B1, r24

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
     4a6:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
     4a8:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
     4aa:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<PORTC3);
     4ac:	43 9a       	sbi	0x08, 3	; 8
     4ae:	80 ed       	ldi	r24, 0xD0	; 208
     4b0:	97 e0       	ldi	r25, 0x07	; 7
     4b2:	28 ec       	ldi	r18, 0xC8	; 200
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	f9 01       	movw	r30, r18
     4b8:	31 97       	sbiw	r30, 0x01	; 1
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <main+0x9a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4be:	d9 f7       	brne	.-10     	; 0x4b6 <main+0x98>
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
     4c0:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     4c2:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
     4c4:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1<<PORTC3);
     4c6:	43 98       	cbi	0x08, 3	; 8

	// make sure EPM is activated at startup
	if (toSend==mobileID) {
     4c8:	90 91 00 01 	lds	r25, 0x0100
     4cc:	80 91 02 01 	lds	r24, 0x0102
     4d0:	98 17       	cp	r25, r24
     4d2:	11 f4       	brne	.+4      	; 0x4d8 <main+0xba>
		reset_EPM();
     4d4:	0e 94 07 02 	call	0x40e	; 0x40e <reset_EPM>
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	48 ec       	ldi	r20, 0xC8	; 200
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	0b c0       	rjmp	.+22     	; 0x4f8 <main+0xda>
     4e2:	fa 01       	movw	r30, r20
     4e4:	31 97       	sbiw	r30, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <main+0xc6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ea:	d9 f7       	brne	.-10     	; 0x4e2 <main+0xc4>
	// wait here for a time (~30s) until all modules are spinning, then blink LEDs again
	int ww=0;
	while (ww<300) {

		_delay_ms(100);
		ww+=1;
     4ec:	2f 5f       	subi	r18, 0xFF	; 255
     4ee:	3f 4f       	sbci	r19, 0xFF	; 255
		reset_EPM();
	}

	// wait here for a time (~30s) until all modules are spinning, then blink LEDs again
	int ww=0;
	while (ww<300) {
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	2c 32       	cpi	r18, 0x2C	; 44
     4f4:	38 07       	cpc	r19, r24
     4f6:	19 f0       	breq	.+6      	; 0x4fe <main+0xe0>
     4f8:	88 ee       	ldi	r24, 0xE8	; 232
     4fa:	93 e0       	ldi	r25, 0x03	; 3
     4fc:	f2 cf       	rjmp	.-28     	; 0x4e2 <main+0xc4>
		_delay_ms(100);
		ww+=1;

	}

	PORTB |= (1<<PORTB0); // green
     4fe:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
     500:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
     502:	2a 9a       	sbi	0x05, 2	; 5
     504:	80 ed       	ldi	r24, 0xD0	; 208
     506:	97 e0       	ldi	r25, 0x07	; 7
     508:	28 ec       	ldi	r18, 0xC8	; 200
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	f9 01       	movw	r30, r18
     50e:	31 97       	sbiw	r30, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <main+0xf0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     512:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     514:	d9 f7       	brne	.-10     	; 0x50c <main+0xee>
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
     516:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     518:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
     51a:	2a 98       	cbi	0x05, 2	; 5

	// turn on LED corresponing to beacon number
	if (toSend==beaconID1) { PORTB |= (1<<PORTB0); }
     51c:	90 91 00 01 	lds	r25, 0x0100
     520:	80 91 01 01 	lds	r24, 0x0101
     524:	98 17       	cp	r25, r24
     526:	09 f4       	brne	.+2      	; 0x52a <main+0x10c>
     528:	28 9a       	sbi	0x05, 0	; 5
	if (toSend==beaconID2) { PORTB |= (1<<PORTB1); }
     52a:	90 91 00 01 	lds	r25, 0x0100
     52e:	80 91 03 01 	lds	r24, 0x0103
     532:	98 17       	cp	r25, r24
     534:	09 f4       	brne	.+2      	; 0x538 <main+0x11a>
     536:	29 9a       	sbi	0x05, 1	; 5
	if (toSend==beaconID3) { PORTB |= (1<<PORTB2); }
     538:	90 91 00 01 	lds	r25, 0x0100
     53c:	80 91 04 01 	lds	r24, 0x0104
     540:	98 17       	cp	r25, r24
     542:	09 f4       	brne	.+2      	; 0x546 <main+0x128>
     544:	2a 9a       	sbi	0x05, 2	; 5

	sei(); // enable interrupts
     546:	78 94       	sei
	int per = 0;
	//int cur_time = 0;
	int detach_time = 0;
	int dd = 0;

	rcv_ct = 0;
     548:	10 92 1d 02 	sts	0x021D, r1
     54c:	c0 e0       	ldi	r28, 0x00	; 0
     54e:	d0 e0       	ldi	r29, 0x00	; 0
     550:	e0 e0       	ldi	r30, 0x00	; 0
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	38 ec       	ldi	r19, 0xC8	; 200
     556:	83 2e       	mov	r8, r19
     558:	91 2c       	mov	r9, r1
							PORTB |= (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2); 
							toSend = centered;
						}
					}

					beacons_rcvd=4; // indicated that direction of motion has been decided
     55a:	24 e0       	ldi	r18, 0x04	; 4
     55c:	72 2e       	mov	r7, r18
						}
					}
					else if (lastRcv==beaconID3) { // if other two times are not zero, store time and add to beacons rcvd; else ignore
						if ((beacons_rcvd==2) && (beaconID1_time>0) && (beaconID2_time>0)) {
							beaconID3_time |= rcv_time;
							beacons_rcvd = 3;
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	69 2e       	mov	r6, r25
						}
					}
					else if (lastRcv==beaconID2) { // if time3 is zero and time1 is not 0, store time and add to beacons rcvd; else ignore
						if ((beacons_rcvd==1) && (beaconID3_time==0) && (beaconID1_time>0)) {
							beaconID2_time |= rcv_time;
							beacons_rcvd = 2;
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	58 2e       	mov	r5, r24

				if (beacons_rcvd < 3) { // store times from the three beacons in a row
					if (lastRcv==beaconID1) { // if other two times are 0, store time and add to beacons rcvd; else reset
						if ((beacons_rcvd==0) && (beaconID2_time==0) && (beaconID3_time==0)) {
							beaconID1_time |= rcv_time;
							beacons_rcvd = 1;
     566:	44 24       	eor	r4, r4
     568:	43 94       	inc	r4

	rcv_ct = 0;
	
	while(1) { // main loop

		if (toSend==mobileID) { // don't bother trying to track beacons if you are not the mobile robot
     56a:	90 91 00 01 	lds	r25, 0x0100
     56e:	80 91 02 01 	lds	r24, 0x0102
     572:	98 17       	cp	r25, r24
     574:	d1 f7       	brne	.-12     	; 0x56a <main+0x14c>
		
			// take 10 messages to calculate period		
			if ((rcv_sx==1) && (rcv_ct<10)) {
     576:	80 91 18 02 	lds	r24, 0x0218
     57a:	90 91 19 02 	lds	r25, 0x0219
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	91 f5       	brne	.+100    	; 0x5e6 <main+0x1c8>
     582:	80 91 1d 02 	lds	r24, 0x021D
     586:	8a 30       	cpi	r24, 0x0A	; 10
     588:	70 f5       	brcc	.+92     	; 0x5e6 <main+0x1c8>
				if (lastRcv==beaconID1) { // only messages from beacon 1 for calculating period
     58a:	90 91 1c 02 	lds	r25, 0x021C
     58e:	80 91 01 01 	lds	r24, 0x0101
     592:	98 17       	cp	r25, r24
     594:	41 f5       	brne	.+80     	; 0x5e6 <main+0x1c8>
					PORTB |= (1<<PORTB2); // turn on LED to indicate calibration
     596:	2a 9a       	sbi	0x05, 2	; 5
					if ((rcv_time>1000)&&(rcv_time<4000)) {
     598:	80 91 1e 02 	lds	r24, 0x021E
     59c:	90 91 1f 02 	lds	r25, 0x021F
     5a0:	89 5e       	subi	r24, 0xE9	; 233
     5a2:	93 40       	sbci	r25, 0x03	; 3
     5a4:	e4 f0       	brlt	.+56     	; 0x5de <main+0x1c0>
     5a6:	80 91 1e 02 	lds	r24, 0x021E
     5aa:	90 91 1f 02 	lds	r25, 0x021F
     5ae:	80 5a       	subi	r24, 0xA0	; 160
     5b0:	9f 40       	sbci	r25, 0x0F	; 15
     5b2:	ac f4       	brge	.+42     	; 0x5de <main+0x1c0>
						per = per + (rcv_time/10);
     5b4:	20 91 1e 02 	lds	r18, 0x021E
     5b8:	30 91 1f 02 	lds	r19, 0x021F
						if (rcv_ct==9) {
     5bc:	80 91 1d 02 	lds	r24, 0x021D
     5c0:	89 30       	cpi	r24, 0x09	; 9
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <main+0x1a8>
							//detach_time = per/5; // time after receiving a message that it will detach the EPM
							//detach_time = detach_time/8; // convert roughly to ms
							PORTB &= ~(1<<PORTB2); // clear LED to indicate end of calibration
     5c4:	2a 98       	cbi	0x05, 2	; 5
			// take 10 messages to calculate period		
			if ((rcv_sx==1) && (rcv_ct<10)) {
				if (lastRcv==beaconID1) { // only messages from beacon 1 for calculating period
					PORTB |= (1<<PORTB2); // turn on LED to indicate calibration
					if ((rcv_time>1000)&&(rcv_time<4000)) {
						per = per + (rcv_time/10);
     5c6:	c9 01       	movw	r24, r18
     5c8:	6a e0       	ldi	r22, 0x0A	; 10
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divmodhi4>
     5d0:	c6 0f       	add	r28, r22
     5d2:	d7 1f       	adc	r29, r23
						if (rcv_ct==9) {
							//detach_time = per/5; // time after receiving a message that it will detach the EPM
							//detach_time = detach_time/8; // convert roughly to ms
							PORTB &= ~(1<<PORTB2); // clear LED to indicate end of calibration
						}
						rcv_ct+=1;	
     5d4:	80 91 1d 02 	lds	r24, 0x021D
     5d8:	8f 5f       	subi	r24, 0xFF	; 255
     5da:	80 93 1d 02 	sts	0x021D, r24
					}
					rcv_sx=0;
     5de:	10 92 19 02 	sts	0x0219, r1
     5e2:	10 92 18 02 	sts	0x0218, r1

			// calculate angles based on times between beacon messages, then pick beacon to move towards
			// rotation A: take in three messages, calculate "angles" (times between receptions)
			// rotation B: move towards selected beacon (towards beacon not asociated with the largest angle)
		
			if ((rcv_sx==1) && (rcv_ct==10)) { // got a new message and already calibrated
     5e6:	80 91 18 02 	lds	r24, 0x0218
     5ea:	90 91 19 02 	lds	r25, 0x0219
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <main+0x1d6>
     5f2:	f0 c1       	rjmp	.+992    	; 0x9d4 <__stack+0xd5>
     5f4:	80 91 1d 02 	lds	r24, 0x021D
     5f8:	8a 30       	cpi	r24, 0x0A	; 10
     5fa:	09 f0       	breq	.+2      	; 0x5fe <main+0x1e0>
     5fc:	eb c1       	rjmp	.+982    	; 0x9d4 <__stack+0xd5>

				if (beacons_rcvd < 3) { // store times from the three beacons in a row
     5fe:	80 91 20 02 	lds	r24, 0x0220
     602:	83 30       	cpi	r24, 0x03	; 3
     604:	08 f0       	brcs	.+2      	; 0x608 <main+0x1ea>
     606:	92 c0       	rjmp	.+292    	; 0x72c <main+0x30e>
					if (lastRcv==beaconID1) { // if other two times are 0, store time and add to beacons rcvd; else reset
     608:	90 91 1c 02 	lds	r25, 0x021C
     60c:	80 91 01 01 	lds	r24, 0x0101
     610:	98 17       	cp	r25, r24
     612:	21 f5       	brne	.+72     	; 0x65c <main+0x23e>
						if ((beacons_rcvd==0) && (beaconID2_time==0) && (beaconID3_time==0)) {
     614:	80 91 20 02 	lds	r24, 0x0220
     618:	88 23       	and	r24, r24
     61a:	09 f0       	breq	.+2      	; 0x61e <main+0x200>
     61c:	72 c0       	rjmp	.+228    	; 0x702 <main+0x2e4>
     61e:	80 91 21 02 	lds	r24, 0x0221
     622:	90 91 22 02 	lds	r25, 0x0222
     626:	89 2b       	or	r24, r25
     628:	09 f0       	breq	.+2      	; 0x62c <main+0x20e>
     62a:	6b c0       	rjmp	.+214    	; 0x702 <main+0x2e4>
     62c:	80 91 23 02 	lds	r24, 0x0223
     630:	90 91 24 02 	lds	r25, 0x0224
     634:	89 2b       	or	r24, r25
     636:	09 f0       	breq	.+2      	; 0x63a <main+0x21c>
     638:	64 c0       	rjmp	.+200    	; 0x702 <main+0x2e4>
							beaconID1_time |= rcv_time;
     63a:	20 91 25 02 	lds	r18, 0x0225
     63e:	30 91 26 02 	lds	r19, 0x0226
     642:	80 91 1e 02 	lds	r24, 0x021E
     646:	90 91 1f 02 	lds	r25, 0x021F
     64a:	82 2b       	or	r24, r18
     64c:	93 2b       	or	r25, r19
     64e:	90 93 26 02 	sts	0x0226, r25
     652:	80 93 25 02 	sts	0x0225, r24
							beacons_rcvd = 1;
     656:	40 92 20 02 	sts	0x0220, r4
     65a:	68 c0       	rjmp	.+208    	; 0x72c <main+0x30e>
								beacons_rcvd = 0;
								//PORTB &= ~( (1<<PORTB0) | (1<<PORTB2) );
							}
						}
					}
					else if (lastRcv==beaconID2) { // if time3 is zero and time1 is not 0, store time and add to beacons rcvd; else ignore
     65c:	90 91 1c 02 	lds	r25, 0x021C
     660:	80 91 03 01 	lds	r24, 0x0103
     664:	98 17       	cp	r25, r24
     666:	21 f5       	brne	.+72     	; 0x6b0 <main+0x292>
						if ((beacons_rcvd==1) && (beaconID3_time==0) && (beaconID1_time>0)) {
     668:	80 91 20 02 	lds	r24, 0x0220
     66c:	81 30       	cpi	r24, 0x01	; 1
     66e:	09 f0       	breq	.+2      	; 0x672 <main+0x254>
     670:	48 c0       	rjmp	.+144    	; 0x702 <main+0x2e4>
     672:	80 91 23 02 	lds	r24, 0x0223
     676:	90 91 24 02 	lds	r25, 0x0224
     67a:	89 2b       	or	r24, r25
     67c:	09 f0       	breq	.+2      	; 0x680 <main+0x262>
     67e:	41 c0       	rjmp	.+130    	; 0x702 <main+0x2e4>
     680:	80 91 25 02 	lds	r24, 0x0225
     684:	90 91 26 02 	lds	r25, 0x0226
     688:	18 16       	cp	r1, r24
     68a:	19 06       	cpc	r1, r25
     68c:	d4 f5       	brge	.+116    	; 0x702 <main+0x2e4>
							beaconID2_time |= rcv_time;
     68e:	20 91 21 02 	lds	r18, 0x0221
     692:	30 91 22 02 	lds	r19, 0x0222
     696:	80 91 1e 02 	lds	r24, 0x021E
     69a:	90 91 1f 02 	lds	r25, 0x021F
     69e:	82 2b       	or	r24, r18
     6a0:	93 2b       	or	r25, r19
     6a2:	90 93 22 02 	sts	0x0222, r25
     6a6:	80 93 21 02 	sts	0x0221, r24
							beacons_rcvd = 2;
     6aa:	50 92 20 02 	sts	0x0220, r5
     6ae:	3e c0       	rjmp	.+124    	; 0x72c <main+0x30e>
								beacons_rcvd = 0;
								//PORTB &= ~( (1<<PORTB0) | (1<<PORTB2) );
							}
						}
					}
					else if (lastRcv==beaconID3) { // if other two times are not zero, store time and add to beacons rcvd; else ignore
     6b0:	90 91 1c 02 	lds	r25, 0x021C
     6b4:	80 91 04 01 	lds	r24, 0x0104
     6b8:	98 17       	cp	r25, r24
     6ba:	c1 f5       	brne	.+112    	; 0x72c <main+0x30e>
						if ((beacons_rcvd==2) && (beaconID1_time>0) && (beaconID2_time>0)) {
     6bc:	80 91 20 02 	lds	r24, 0x0220
     6c0:	82 30       	cpi	r24, 0x02	; 2
     6c2:	f9 f4       	brne	.+62     	; 0x702 <main+0x2e4>
     6c4:	80 91 25 02 	lds	r24, 0x0225
     6c8:	90 91 26 02 	lds	r25, 0x0226
     6cc:	18 16       	cp	r1, r24
     6ce:	19 06       	cpc	r1, r25
     6d0:	c4 f4       	brge	.+48     	; 0x702 <main+0x2e4>
     6d2:	80 91 21 02 	lds	r24, 0x0221
     6d6:	90 91 22 02 	lds	r25, 0x0222
     6da:	18 16       	cp	r1, r24
     6dc:	19 06       	cpc	r1, r25
     6de:	8c f4       	brge	.+34     	; 0x702 <main+0x2e4>
							beaconID3_time |= rcv_time;
     6e0:	20 91 23 02 	lds	r18, 0x0223
     6e4:	30 91 24 02 	lds	r19, 0x0224
     6e8:	80 91 1e 02 	lds	r24, 0x021E
     6ec:	90 91 1f 02 	lds	r25, 0x021F
     6f0:	82 2b       	or	r24, r18
     6f2:	93 2b       	or	r25, r19
     6f4:	90 93 24 02 	sts	0x0224, r25
     6f8:	80 93 23 02 	sts	0x0223, r24
							beacons_rcvd = 3;
     6fc:	60 92 20 02 	sts	0x0220, r6
     700:	15 c0       	rjmp	.+42     	; 0x72c <main+0x30e>
							//PORTB |= (1<<PORTB2)|(1<<PORTB0);
						} else {
							if (rcv_time > 100) {
     702:	80 91 1e 02 	lds	r24, 0x021E
     706:	90 91 1f 02 	lds	r25, 0x021F
     70a:	85 36       	cpi	r24, 0x65	; 101
     70c:	91 05       	cpc	r25, r1
     70e:	74 f0       	brlt	.+28     	; 0x72c <main+0x30e>
								beaconID1_time = 0;
     710:	10 92 26 02 	sts	0x0226, r1
     714:	10 92 25 02 	sts	0x0225, r1
								beaconID2_time = 0;
     718:	10 92 22 02 	sts	0x0222, r1
     71c:	10 92 21 02 	sts	0x0221, r1
								beaconID3_time = 0;
     720:	10 92 24 02 	sts	0x0224, r1
     724:	10 92 23 02 	sts	0x0223, r1
								beacons_rcvd = 0;
     728:	10 92 20 02 	sts	0x0220, r1
				// if 3->1 (beaconID1_time) is the longest time, move to beacon 2
				// if 1->2 (beaconID2_time) is the longest time, move to beacon 3
				// if 2->3 (beaconID3_time) is the longest time, move to beacon 1

				// calculate movement
				if (beacons_rcvd==3) {
     72c:	80 91 20 02 	lds	r24, 0x0220
     730:	83 30       	cpi	r24, 0x03	; 3
     732:	09 f0       	breq	.+2      	; 0x736 <main+0x318>
     734:	4b c1       	rjmp	.+662    	; 0x9cc <__stack+0xcd>

					//PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );

					if ((beaconID1_time>(beaconID2_time+center_threshold)) && (beaconID1_time>(beaconID2_time+center_threshold))) {
     736:	40 91 25 02 	lds	r20, 0x0225
     73a:	50 91 26 02 	lds	r21, 0x0226
     73e:	20 91 21 02 	lds	r18, 0x0221
     742:	30 91 22 02 	lds	r19, 0x0222
     746:	80 91 05 01 	lds	r24, 0x0105
     74a:	90 91 06 01 	lds	r25, 0x0106
     74e:	82 0f       	add	r24, r18
     750:	93 1f       	adc	r25, r19
     752:	84 17       	cp	r24, r20
     754:	95 07       	cpc	r25, r21
     756:	fc f4       	brge	.+62     	; 0x796 <main+0x378>
     758:	40 91 25 02 	lds	r20, 0x0225
     75c:	50 91 26 02 	lds	r21, 0x0226
     760:	20 91 21 02 	lds	r18, 0x0221
     764:	30 91 22 02 	lds	r19, 0x0222
     768:	80 91 05 01 	lds	r24, 0x0105
     76c:	90 91 06 01 	lds	r25, 0x0106
     770:	82 0f       	add	r24, r18
     772:	93 1f       	adc	r25, r19
     774:	84 17       	cp	r24, r20
     776:	95 07       	cpc	r25, r21
     778:	74 f4       	brge	.+28     	; 0x796 <main+0x378>
						desired_beacon |= beaconID2;
     77a:	90 91 27 02 	lds	r25, 0x0227
     77e:	80 91 03 01 	lds	r24, 0x0103
     782:	89 2b       	or	r24, r25
     784:	80 93 27 02 	sts	0x0227, r24
						detach_time = per/5; // move towards beacon 2
     788:	ce 01       	movw	r24, r28
     78a:	65 e0       	ldi	r22, 0x05	; 5
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divmodhi4>
     792:	fb 01       	movw	r30, r22
     794:	0c c1       	rjmp	.+536    	; 0x9ae <__stack+0xaf>
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
						PORTB |= (1<<PORTB1);
					} else if ((beaconID2_time>(beaconID1_time+center_threshold)) && (beaconID2_time>(beaconID3_time+center_threshold))) {
     796:	40 91 21 02 	lds	r20, 0x0221
     79a:	50 91 22 02 	lds	r21, 0x0222
     79e:	20 91 25 02 	lds	r18, 0x0225
     7a2:	30 91 26 02 	lds	r19, 0x0226
     7a6:	80 91 05 01 	lds	r24, 0x0105
     7aa:	90 91 06 01 	lds	r25, 0x0106
     7ae:	82 0f       	add	r24, r18
     7b0:	93 1f       	adc	r25, r19
     7b2:	84 17       	cp	r24, r20
     7b4:	95 07       	cpc	r25, r21
     7b6:	fc f4       	brge	.+62     	; 0x7f6 <main+0x3d8>
     7b8:	40 91 21 02 	lds	r20, 0x0221
     7bc:	50 91 22 02 	lds	r21, 0x0222
     7c0:	20 91 23 02 	lds	r18, 0x0223
     7c4:	30 91 24 02 	lds	r19, 0x0224
     7c8:	80 91 05 01 	lds	r24, 0x0105
     7cc:	90 91 06 01 	lds	r25, 0x0106
     7d0:	82 0f       	add	r24, r18
     7d2:	93 1f       	adc	r25, r19
     7d4:	84 17       	cp	r24, r20
     7d6:	95 07       	cpc	r25, r21
     7d8:	74 f4       	brge	.+28     	; 0x7f6 <main+0x3d8>
						desired_beacon |= beaconID3;
     7da:	90 91 27 02 	lds	r25, 0x0227
     7de:	80 91 04 01 	lds	r24, 0x0104
     7e2:	89 2b       	or	r24, r25
     7e4:	80 93 27 02 	sts	0x0227, r24
						detach_time = per/5; // move towards beacon 3
     7e8:	ce 01       	movw	r24, r28
     7ea:	65 e0       	ldi	r22, 0x05	; 5
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divmodhi4>
     7f2:	fb 01       	movw	r30, r22
     7f4:	66 c0       	rjmp	.+204    	; 0x8c2 <main+0x4a4>
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
						PORTB |= (1<<PORTB2);
					} else if ((beaconID3_time>(beaconID1_time+center_threshold)) && (beaconID3_time>(beaconID1_time+center_threshold))) {
     7f6:	40 91 23 02 	lds	r20, 0x0223
     7fa:	50 91 24 02 	lds	r21, 0x0224
     7fe:	20 91 25 02 	lds	r18, 0x0225
     802:	30 91 26 02 	lds	r19, 0x0226
     806:	80 91 05 01 	lds	r24, 0x0105
     80a:	90 91 06 01 	lds	r25, 0x0106
     80e:	82 0f       	add	r24, r18
     810:	93 1f       	adc	r25, r19
     812:	84 17       	cp	r24, r20
     814:	95 07       	cpc	r25, r21
     816:	fc f4       	brge	.+62     	; 0x856 <main+0x438>
     818:	40 91 23 02 	lds	r20, 0x0223
     81c:	50 91 24 02 	lds	r21, 0x0224
     820:	20 91 25 02 	lds	r18, 0x0225
     824:	30 91 26 02 	lds	r19, 0x0226
     828:	80 91 05 01 	lds	r24, 0x0105
     82c:	90 91 06 01 	lds	r25, 0x0106
     830:	82 0f       	add	r24, r18
     832:	93 1f       	adc	r25, r19
     834:	84 17       	cp	r24, r20
     836:	95 07       	cpc	r25, r21
     838:	74 f4       	brge	.+28     	; 0x856 <main+0x438>
						desired_beacon |= beaconID1;
     83a:	90 91 27 02 	lds	r25, 0x0227
     83e:	80 91 01 01 	lds	r24, 0x0101
     842:	89 2b       	or	r24, r25
     844:	80 93 27 02 	sts	0x0227, r24
						detach_time = per/5; // move towards beacon 1
     848:	ce 01       	movw	r24, r28
     84a:	65 e0       	ldi	r22, 0x05	; 5
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divmodhi4>
     852:	fb 01       	movw	r30, r22
     854:	71 c0       	rjmp	.+226    	; 0x938 <__stack+0x39>
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
						PORTB |= (1<<PORTB0);
					} else if ((beaconID1_time<(beaconID2_time-(center_threshold))) && (beaconID1_time<(beaconID2_time-(center_threshold)))) {
     856:	80 91 25 02 	lds	r24, 0x0225
     85a:	90 91 26 02 	lds	r25, 0x0226
     85e:	20 91 21 02 	lds	r18, 0x0221
     862:	30 91 22 02 	lds	r19, 0x0222
     866:	40 91 05 01 	lds	r20, 0x0105
     86a:	50 91 06 01 	lds	r21, 0x0106
     86e:	24 1b       	sub	r18, r20
     870:	35 0b       	sbc	r19, r21
     872:	82 17       	cp	r24, r18
     874:	93 07       	cpc	r25, r19
     876:	54 f5       	brge	.+84     	; 0x8cc <main+0x4ae>
     878:	80 91 25 02 	lds	r24, 0x0225
     87c:	90 91 26 02 	lds	r25, 0x0226
     880:	20 91 21 02 	lds	r18, 0x0221
     884:	30 91 22 02 	lds	r19, 0x0222
     888:	40 91 05 01 	lds	r20, 0x0105
     88c:	50 91 06 01 	lds	r21, 0x0106
     890:	24 1b       	sub	r18, r20
     892:	35 0b       	sbc	r19, r21
     894:	82 17       	cp	r24, r18
     896:	93 07       	cpc	r25, r19
     898:	cc f4       	brge	.+50     	; 0x8cc <main+0x4ae>
						desired_beacon |= beaconID3;
     89a:	90 91 27 02 	lds	r25, 0x0227
     89e:	80 91 04 01 	lds	r24, 0x0104
     8a2:	89 2b       	or	r24, r25
     8a4:	80 93 27 02 	sts	0x0227, r24
						detach_time = (per/5)+(per/2); // move away from beacon 3
     8a8:	ce 01       	movw	r24, r28
     8aa:	62 e0       	ldi	r22, 0x02	; 2
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divmodhi4>
     8b2:	fb 01       	movw	r30, r22
     8b4:	ce 01       	movw	r24, r28
     8b6:	65 e0       	ldi	r22, 0x05	; 5
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divmodhi4>
     8be:	e6 0f       	add	r30, r22
     8c0:	f7 1f       	adc	r31, r23
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     8c2:	85 b1       	in	r24, 0x05	; 5
     8c4:	88 7f       	andi	r24, 0xF8	; 248
     8c6:	85 b9       	out	0x05, r24	; 5
						PORTB |= (1<<PORTB2);
     8c8:	2a 9a       	sbi	0x05, 2	; 5
     8ca:	7e c0       	rjmp	.+252    	; 0x9c8 <__stack+0xc9>
					} else if ((beaconID2_time<(beaconID1_time-(center_threshold))) && (beaconID2_time<(beaconID3_time-(center_threshold)))) {
     8cc:	80 91 21 02 	lds	r24, 0x0221
     8d0:	90 91 22 02 	lds	r25, 0x0222
     8d4:	20 91 25 02 	lds	r18, 0x0225
     8d8:	30 91 26 02 	lds	r19, 0x0226
     8dc:	40 91 05 01 	lds	r20, 0x0105
     8e0:	50 91 06 01 	lds	r21, 0x0106
     8e4:	24 1b       	sub	r18, r20
     8e6:	35 0b       	sbc	r19, r21
     8e8:	82 17       	cp	r24, r18
     8ea:	93 07       	cpc	r25, r19
     8ec:	54 f5       	brge	.+84     	; 0x942 <__stack+0x43>
     8ee:	80 91 21 02 	lds	r24, 0x0221
     8f2:	90 91 22 02 	lds	r25, 0x0222
     8f6:	20 91 23 02 	lds	r18, 0x0223
     8fa:	30 91 24 02 	lds	r19, 0x0224
     8fe:	40 91 05 01 	lds	r20, 0x0105
     902:	50 91 06 01 	lds	r21, 0x0106
     906:	24 1b       	sub	r18, r20
     908:	35 0b       	sbc	r19, r21
     90a:	82 17       	cp	r24, r18
     90c:	93 07       	cpc	r25, r19
     90e:	cc f4       	brge	.+50     	; 0x942 <__stack+0x43>
						desired_beacon |= beaconID1; 
     910:	90 91 27 02 	lds	r25, 0x0227
     914:	80 91 01 01 	lds	r24, 0x0101
     918:	89 2b       	or	r24, r25
     91a:	80 93 27 02 	sts	0x0227, r24
						detach_time = (per/5)+(per/2); // move away from beacon 1
     91e:	ce 01       	movw	r24, r28
     920:	62 e0       	ldi	r22, 0x02	; 2
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divmodhi4>
     928:	fb 01       	movw	r30, r22
     92a:	ce 01       	movw	r24, r28
     92c:	65 e0       	ldi	r22, 0x05	; 5
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divmodhi4>
     934:	e6 0f       	add	r30, r22
     936:	f7 1f       	adc	r31, r23
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     938:	85 b1       	in	r24, 0x05	; 5
     93a:	88 7f       	andi	r24, 0xF8	; 248
     93c:	85 b9       	out	0x05, r24	; 5
						PORTB |= (1<<PORTB0);
     93e:	28 9a       	sbi	0x05, 0	; 5
     940:	43 c0       	rjmp	.+134    	; 0x9c8 <__stack+0xc9>
					} else if ((beaconID3_time<(beaconID1_time-(center_threshold))) && (beaconID3_time<(beaconID1_time-(center_threshold)))) {
     942:	80 91 23 02 	lds	r24, 0x0223
     946:	90 91 24 02 	lds	r25, 0x0224
     94a:	20 91 25 02 	lds	r18, 0x0225
     94e:	30 91 26 02 	lds	r19, 0x0226
     952:	40 91 05 01 	lds	r20, 0x0105
     956:	50 91 06 01 	lds	r21, 0x0106
     95a:	24 1b       	sub	r18, r20
     95c:	35 0b       	sbc	r19, r21
     95e:	82 17       	cp	r24, r18
     960:	93 07       	cpc	r25, r19
     962:	54 f5       	brge	.+84     	; 0x9b8 <__stack+0xb9>
     964:	80 91 23 02 	lds	r24, 0x0223
     968:	90 91 24 02 	lds	r25, 0x0224
     96c:	20 91 25 02 	lds	r18, 0x0225
     970:	30 91 26 02 	lds	r19, 0x0226
     974:	40 91 05 01 	lds	r20, 0x0105
     978:	50 91 06 01 	lds	r21, 0x0106
     97c:	24 1b       	sub	r18, r20
     97e:	35 0b       	sbc	r19, r21
     980:	82 17       	cp	r24, r18
     982:	93 07       	cpc	r25, r19
     984:	cc f4       	brge	.+50     	; 0x9b8 <__stack+0xb9>
						desired_beacon |= beaconID2; 
     986:	90 91 27 02 	lds	r25, 0x0227
     98a:	80 91 03 01 	lds	r24, 0x0103
     98e:	89 2b       	or	r24, r25
     990:	80 93 27 02 	sts	0x0227, r24
						detach_time = (per/5)+(per/2); // move away from beacon 2
     994:	ce 01       	movw	r24, r28
     996:	62 e0       	ldi	r22, 0x02	; 2
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divmodhi4>
     99e:	fb 01       	movw	r30, r22
     9a0:	ce 01       	movw	r24, r28
     9a2:	65 e0       	ldi	r22, 0x05	; 5
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divmodhi4>
     9aa:	e6 0f       	add	r30, r22
     9ac:	f7 1f       	adc	r31, r23
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     9ae:	85 b1       	in	r24, 0x05	; 5
     9b0:	88 7f       	andi	r24, 0xF8	; 248
     9b2:	85 b9       	out	0x05, r24	; 5
						PORTB |= (1<<PORTB1);
     9b4:	29 9a       	sbi	0x05, 1	; 5
     9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <__stack+0xc9>
					} else { // within centering threshold, end of program
						while(1) { 
							PORTB |= (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2); 
     9b8:	85 b1       	in	r24, 0x05	; 5
     9ba:	87 60       	ori	r24, 0x07	; 7
     9bc:	85 b9       	out	0x05, r24	; 5
							toSend = centered;
     9be:	80 91 07 01 	lds	r24, 0x0107
     9c2:	80 93 00 01 	sts	0x0100, r24
     9c6:	f8 cf       	rjmp	.-16     	; 0x9b8 <__stack+0xb9>
						}
					}

					beacons_rcvd=4; // indicated that direction of motion has been decided
     9c8:	70 92 20 02 	sts	0x0220, r7
					
				}
				rcv_sx = 0; // wait for next rotation to execute movement
     9cc:	10 92 19 02 	sts	0x0219, r1
     9d0:	10 92 18 02 	sts	0x0218, r1
			}

			if ((rcv_sx==1)&&(beacons_rcvd==4)) { // now, execute the movement, to ensure correct direction	
     9d4:	80 91 18 02 	lds	r24, 0x0218
     9d8:	90 91 19 02 	lds	r25, 0x0219
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	09 f0       	breq	.+2      	; 0x9e2 <__stack+0xe3>
     9e0:	c4 cd       	rjmp	.-1144   	; 0x56a <main+0x14c>
     9e2:	80 91 20 02 	lds	r24, 0x0220
     9e6:	84 30       	cpi	r24, 0x04	; 4
     9e8:	09 f0       	breq	.+2      	; 0x9ec <__stack+0xed>
     9ea:	bf cd       	rjmp	.-1154   	; 0x56a <main+0x14c>
				// execute movement
				if((lastRcv==desired_beacon)&&(rcv_time>100)) { // if last message is from desired beacon -> start movement sequence
     9ec:	90 91 1c 02 	lds	r25, 0x021C
     9f0:	80 91 27 02 	lds	r24, 0x0227
     9f4:	98 17       	cp	r25, r24
     9f6:	09 f0       	breq	.+2      	; 0x9fa <__stack+0xfb>
     9f8:	6a c0       	rjmp	.+212    	; 0xace <__stack+0x1cf>
     9fa:	80 91 1e 02 	lds	r24, 0x021E
     9fe:	90 91 1f 02 	lds	r25, 0x021F
     a02:	85 36       	cpi	r24, 0x65	; 101
     a04:	91 05       	cpc	r25, r1
     a06:	0c f4       	brge	.+2      	; 0xa0a <__stack+0x10b>
     a08:	62 c0       	rjmp	.+196    	; 0xace <__stack+0x1cf>
					cli(); // disable all interrupts so that movement can be executed
     a0a:	f8 94       	cli
					/* dd = 0;
					while (dd<detach_time) {
						_delay_us(140);
						dd+=1;
					} */
					_delay_ms((detach_time/8)); // delay for detach time
     a0c:	cf 01       	movw	r24, r30
     a0e:	68 e0       	ldi	r22, 0x08	; 8
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__divmodhi4>
     a16:	88 27       	eor	r24, r24
     a18:	77 fd       	sbrc	r23, 7
     a1a:	80 95       	com	r24
     a1c:	98 2f       	mov	r25, r24
     a1e:	0e 94 cc 08 	call	0x1198	; 0x1198 <__floatsisf>
     a22:	5b 01       	movw	r10, r22
     a24:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	4a ef       	ldi	r20, 0xFA	; 250
     a2c:	54 e4       	ldi	r21, 0x44	; 68
     a2e:	0e 94 42 07 	call	0xe84	; 0xe84 <__mulsf3>
     a32:	7b 01       	movw	r14, r22
     a34:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e8       	ldi	r20, 0x80	; 128
     a3c:	5f e3       	ldi	r21, 0x3F	; 63
     a3e:	0e 94 9c 08 	call	0x1138	; 0x1138 <__ltsf2>
     a42:	88 23       	and	r24, r24
     a44:	1c f4       	brge	.+6      	; 0xa4c <__stack+0x14d>
     a46:	61 e0       	ldi	r22, 0x01	; 1
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	22 c0       	rjmp	.+68     	; 0xa90 <__stack+0x191>
		__ticks = 1;
	else if (__tmp > 65535)
     a4c:	c8 01       	movw	r24, r16
     a4e:	b7 01       	movw	r22, r14
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f e7       	ldi	r20, 0x7F	; 127
     a56:	57 e4       	ldi	r21, 0x47	; 71
     a58:	0e 94 3c 08 	call	0x1078	; 0x1078 <__gtsf2>
     a5c:	18 16       	cp	r1, r24
     a5e:	a4 f4       	brge	.+40     	; 0xa88 <__stack+0x189>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a60:	c6 01       	movw	r24, r12
     a62:	b5 01       	movw	r22, r10
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e2       	ldi	r20, 0x20	; 32
     a6a:	51 e4       	ldi	r21, 0x41	; 65
     a6c:	0e 94 42 07 	call	0xe84	; 0xe84 <__mulsf3>
     a70:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fixunssfsi>
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <__stack+0x181>
     a76:	c4 01       	movw	r24, r8
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <__stack+0x179>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a7c:	61 50       	subi	r22, 0x01	; 1
     a7e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a80:	61 15       	cp	r22, r1
     a82:	71 05       	cpc	r23, r1
     a84:	c1 f7       	brne	.-16     	; 0xa76 <__stack+0x177>
     a86:	07 c0       	rjmp	.+14     	; 0xa96 <__stack+0x197>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a88:	c8 01       	movw	r24, r16
     a8a:	b7 01       	movw	r22, r14
     a8c:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fixunssfsi>
     a90:	cb 01       	movw	r24, r22
     a92:	01 97       	sbiw	r24, 0x01	; 1
     a94:	f1 f7       	brne	.-4      	; 0xa92 <__stack+0x193>
					//_delay_ms(80); // hard-coded delay based on 72 deg at ~165 rpm					
					detach(80);
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	80 ea       	ldi	r24, 0xA0	; 160
     a9c:	92 e4       	ldi	r25, 0x42	; 66
     a9e:	0e 94 aa 01 	call	0x354	; 0x354 <detach>
					// reset movement variables
					beaconID1_time = 0;
     aa2:	10 92 26 02 	sts	0x0226, r1
     aa6:	10 92 25 02 	sts	0x0225, r1
					beaconID2_time = 0;
     aaa:	10 92 22 02 	sts	0x0222, r1
     aae:	10 92 21 02 	sts	0x0221, r1
					beaconID3_time = 0;
     ab2:	10 92 24 02 	sts	0x0224, r1
     ab6:	10 92 23 02 	sts	0x0223, r1
					beacons_rcvd = 0;
     aba:	10 92 20 02 	sts	0x0220, r1
					desired_beacon = 0;
     abe:	10 92 27 02 	sts	0x0227, r1
					detach_time = 0;
					PORTB &= ~( (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0) );
     ac2:	85 b1       	in	r24, 0x05	; 5
     ac4:	88 7f       	andi	r24, 0xF8	; 248
     ac6:	85 b9       	out	0x05, r24	; 5
					sei(); // re-enable interrupts again to plan next movement
     ac8:	78 94       	sei
     aca:	e0 e0       	ldi	r30, 0x00	; 0
     acc:	f0 e0       	ldi	r31, 0x00	; 0
				}
				rcv_sx = 0;
     ace:	10 92 19 02 	sts	0x0219, r1
     ad2:	10 92 18 02 	sts	0x0218, r1
     ad6:	49 cd       	rjmp	.-1390   	; 0x56a <main+0x14c>

00000ad8 <__fixunssfsi>:
     ad8:	ef 92       	push	r14
     ada:	ff 92       	push	r15
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	7b 01       	movw	r14, r22
     ae2:	8c 01       	movw	r16, r24
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	5f e4       	ldi	r21, 0x4F	; 79
     aec:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__gesf2>
     af0:	88 23       	and	r24, r24
     af2:	8c f0       	brlt	.+34     	; 0xb16 <__fixunssfsi+0x3e>
     af4:	c8 01       	movw	r24, r16
     af6:	b7 01       	movw	r22, r14
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	5f e4       	ldi	r21, 0x4F	; 79
     b00:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__subsf3>
     b04:	0e 94 2a 09 	call	0x1254	; 0x1254 <__fixsfsi>
     b08:	9b 01       	movw	r18, r22
     b0a:	ac 01       	movw	r20, r24
     b0c:	20 50       	subi	r18, 0x00	; 0
     b0e:	30 40       	sbci	r19, 0x00	; 0
     b10:	40 40       	sbci	r20, 0x00	; 0
     b12:	50 48       	sbci	r21, 0x80	; 128
     b14:	06 c0       	rjmp	.+12     	; 0xb22 <__fixunssfsi+0x4a>
     b16:	c8 01       	movw	r24, r16
     b18:	b7 01       	movw	r22, r14
     b1a:	0e 94 2a 09 	call	0x1254	; 0x1254 <__fixsfsi>
     b1e:	9b 01       	movw	r18, r22
     b20:	ac 01       	movw	r20, r24
     b22:	b9 01       	movw	r22, r18
     b24:	ca 01       	movw	r24, r20
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	ff 90       	pop	r15
     b2c:	ef 90       	pop	r14
     b2e:	08 95       	ret

00000b30 <_fpadd_parts>:
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	ee e9       	ldi	r30, 0x9E	; 158
     b36:	f5 e0       	ldi	r31, 0x05	; 5
     b38:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__prologue_saves__>
     b3c:	dc 01       	movw	r26, r24
     b3e:	2b 01       	movw	r4, r22
     b40:	fa 01       	movw	r30, r20
     b42:	9c 91       	ld	r25, X
     b44:	92 30       	cpi	r25, 0x02	; 2
     b46:	08 f4       	brcc	.+2      	; 0xb4a <_fpadd_parts+0x1a>
     b48:	39 c1       	rjmp	.+626    	; 0xdbc <_fpadd_parts+0x28c>
     b4a:	eb 01       	movw	r28, r22
     b4c:	88 81       	ld	r24, Y
     b4e:	82 30       	cpi	r24, 0x02	; 2
     b50:	08 f4       	brcc	.+2      	; 0xb54 <_fpadd_parts+0x24>
     b52:	33 c1       	rjmp	.+614    	; 0xdba <_fpadd_parts+0x28a>
     b54:	94 30       	cpi	r25, 0x04	; 4
     b56:	69 f4       	brne	.+26     	; 0xb72 <_fpadd_parts+0x42>
     b58:	84 30       	cpi	r24, 0x04	; 4
     b5a:	09 f0       	breq	.+2      	; 0xb5e <_fpadd_parts+0x2e>
     b5c:	2f c1       	rjmp	.+606    	; 0xdbc <_fpadd_parts+0x28c>
     b5e:	11 96       	adiw	r26, 0x01	; 1
     b60:	9c 91       	ld	r25, X
     b62:	11 97       	sbiw	r26, 0x01	; 1
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	98 17       	cp	r25, r24
     b68:	09 f4       	brne	.+2      	; 0xb6c <_fpadd_parts+0x3c>
     b6a:	28 c1       	rjmp	.+592    	; 0xdbc <_fpadd_parts+0x28c>
     b6c:	a8 e0       	ldi	r26, 0x08	; 8
     b6e:	b1 e0       	ldi	r27, 0x01	; 1
     b70:	25 c1       	rjmp	.+586    	; 0xdbc <_fpadd_parts+0x28c>
     b72:	84 30       	cpi	r24, 0x04	; 4
     b74:	09 f4       	brne	.+2      	; 0xb78 <_fpadd_parts+0x48>
     b76:	21 c1       	rjmp	.+578    	; 0xdba <_fpadd_parts+0x28a>
     b78:	82 30       	cpi	r24, 0x02	; 2
     b7a:	a9 f4       	brne	.+42     	; 0xba6 <_fpadd_parts+0x76>
     b7c:	92 30       	cpi	r25, 0x02	; 2
     b7e:	09 f0       	breq	.+2      	; 0xb82 <_fpadd_parts+0x52>
     b80:	1d c1       	rjmp	.+570    	; 0xdbc <_fpadd_parts+0x28c>
     b82:	9a 01       	movw	r18, r20
     b84:	ad 01       	movw	r20, r26
     b86:	88 e0       	ldi	r24, 0x08	; 8
     b88:	ea 01       	movw	r28, r20
     b8a:	09 90       	ld	r0, Y+
     b8c:	ae 01       	movw	r20, r28
     b8e:	e9 01       	movw	r28, r18
     b90:	09 92       	st	Y+, r0
     b92:	9e 01       	movw	r18, r28
     b94:	81 50       	subi	r24, 0x01	; 1
     b96:	c1 f7       	brne	.-16     	; 0xb88 <_fpadd_parts+0x58>
     b98:	e2 01       	movw	r28, r4
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	11 96       	adiw	r26, 0x01	; 1
     b9e:	9c 91       	ld	r25, X
     ba0:	89 23       	and	r24, r25
     ba2:	81 83       	std	Z+1, r24	; 0x01
     ba4:	08 c1       	rjmp	.+528    	; 0xdb6 <_fpadd_parts+0x286>
     ba6:	92 30       	cpi	r25, 0x02	; 2
     ba8:	09 f4       	brne	.+2      	; 0xbac <_fpadd_parts+0x7c>
     baa:	07 c1       	rjmp	.+526    	; 0xdba <_fpadd_parts+0x28a>
     bac:	12 96       	adiw	r26, 0x02	; 2
     bae:	2d 90       	ld	r2, X+
     bb0:	3c 90       	ld	r3, X
     bb2:	13 97       	sbiw	r26, 0x03	; 3
     bb4:	eb 01       	movw	r28, r22
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	9b 81       	ldd	r25, Y+3	; 0x03
     bba:	14 96       	adiw	r26, 0x04	; 4
     bbc:	ad 90       	ld	r10, X+
     bbe:	bd 90       	ld	r11, X+
     bc0:	cd 90       	ld	r12, X+
     bc2:	dc 90       	ld	r13, X
     bc4:	17 97       	sbiw	r26, 0x07	; 7
     bc6:	ec 80       	ldd	r14, Y+4	; 0x04
     bc8:	fd 80       	ldd	r15, Y+5	; 0x05
     bca:	0e 81       	ldd	r16, Y+6	; 0x06
     bcc:	1f 81       	ldd	r17, Y+7	; 0x07
     bce:	91 01       	movw	r18, r2
     bd0:	28 1b       	sub	r18, r24
     bd2:	39 0b       	sbc	r19, r25
     bd4:	b9 01       	movw	r22, r18
     bd6:	37 ff       	sbrs	r19, 7
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <_fpadd_parts+0xb2>
     bda:	66 27       	eor	r22, r22
     bdc:	77 27       	eor	r23, r23
     bde:	62 1b       	sub	r22, r18
     be0:	73 0b       	sbc	r23, r19
     be2:	60 32       	cpi	r22, 0x20	; 32
     be4:	71 05       	cpc	r23, r1
     be6:	0c f0       	brlt	.+2      	; 0xbea <_fpadd_parts+0xba>
     be8:	61 c0       	rjmp	.+194    	; 0xcac <_fpadd_parts+0x17c>
     bea:	12 16       	cp	r1, r18
     bec:	13 06       	cpc	r1, r19
     bee:	6c f5       	brge	.+90     	; 0xc4a <_fpadd_parts+0x11a>
     bf0:	37 01       	movw	r6, r14
     bf2:	48 01       	movw	r8, r16
     bf4:	06 2e       	mov	r0, r22
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <_fpadd_parts+0xd0>
     bf8:	96 94       	lsr	r9
     bfa:	87 94       	ror	r8
     bfc:	77 94       	ror	r7
     bfe:	67 94       	ror	r6
     c00:	0a 94       	dec	r0
     c02:	d2 f7       	brpl	.-12     	; 0xbf8 <_fpadd_parts+0xc8>
     c04:	21 e0       	ldi	r18, 0x01	; 1
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	04 c0       	rjmp	.+8      	; 0xc16 <_fpadd_parts+0xe6>
     c0e:	22 0f       	add	r18, r18
     c10:	33 1f       	adc	r19, r19
     c12:	44 1f       	adc	r20, r20
     c14:	55 1f       	adc	r21, r21
     c16:	6a 95       	dec	r22
     c18:	d2 f7       	brpl	.-12     	; 0xc0e <_fpadd_parts+0xde>
     c1a:	21 50       	subi	r18, 0x01	; 1
     c1c:	30 40       	sbci	r19, 0x00	; 0
     c1e:	40 40       	sbci	r20, 0x00	; 0
     c20:	50 40       	sbci	r21, 0x00	; 0
     c22:	2e 21       	and	r18, r14
     c24:	3f 21       	and	r19, r15
     c26:	40 23       	and	r20, r16
     c28:	51 23       	and	r21, r17
     c2a:	21 15       	cp	r18, r1
     c2c:	31 05       	cpc	r19, r1
     c2e:	41 05       	cpc	r20, r1
     c30:	51 05       	cpc	r21, r1
     c32:	21 f0       	breq	.+8      	; 0xc3c <_fpadd_parts+0x10c>
     c34:	21 e0       	ldi	r18, 0x01	; 1
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	79 01       	movw	r14, r18
     c3e:	8a 01       	movw	r16, r20
     c40:	e6 28       	or	r14, r6
     c42:	f7 28       	or	r15, r7
     c44:	08 29       	or	r16, r8
     c46:	19 29       	or	r17, r9
     c48:	3c c0       	rjmp	.+120    	; 0xcc2 <_fpadd_parts+0x192>
     c4a:	23 2b       	or	r18, r19
     c4c:	d1 f1       	breq	.+116    	; 0xcc2 <_fpadd_parts+0x192>
     c4e:	26 0e       	add	r2, r22
     c50:	37 1e       	adc	r3, r23
     c52:	35 01       	movw	r6, r10
     c54:	46 01       	movw	r8, r12
     c56:	06 2e       	mov	r0, r22
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <_fpadd_parts+0x132>
     c5a:	96 94       	lsr	r9
     c5c:	87 94       	ror	r8
     c5e:	77 94       	ror	r7
     c60:	67 94       	ror	r6
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <_fpadd_parts+0x12a>
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <_fpadd_parts+0x148>
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	44 1f       	adc	r20, r20
     c76:	55 1f       	adc	r21, r21
     c78:	6a 95       	dec	r22
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <_fpadd_parts+0x140>
     c7c:	21 50       	subi	r18, 0x01	; 1
     c7e:	30 40       	sbci	r19, 0x00	; 0
     c80:	40 40       	sbci	r20, 0x00	; 0
     c82:	50 40       	sbci	r21, 0x00	; 0
     c84:	2a 21       	and	r18, r10
     c86:	3b 21       	and	r19, r11
     c88:	4c 21       	and	r20, r12
     c8a:	5d 21       	and	r21, r13
     c8c:	21 15       	cp	r18, r1
     c8e:	31 05       	cpc	r19, r1
     c90:	41 05       	cpc	r20, r1
     c92:	51 05       	cpc	r21, r1
     c94:	21 f0       	breq	.+8      	; 0xc9e <_fpadd_parts+0x16e>
     c96:	21 e0       	ldi	r18, 0x01	; 1
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	59 01       	movw	r10, r18
     ca0:	6a 01       	movw	r12, r20
     ca2:	a6 28       	or	r10, r6
     ca4:	b7 28       	or	r11, r7
     ca6:	c8 28       	or	r12, r8
     ca8:	d9 28       	or	r13, r9
     caa:	0b c0       	rjmp	.+22     	; 0xcc2 <_fpadd_parts+0x192>
     cac:	82 15       	cp	r24, r2
     cae:	93 05       	cpc	r25, r3
     cb0:	2c f0       	brlt	.+10     	; 0xcbc <_fpadd_parts+0x18c>
     cb2:	1c 01       	movw	r2, r24
     cb4:	aa 24       	eor	r10, r10
     cb6:	bb 24       	eor	r11, r11
     cb8:	65 01       	movw	r12, r10
     cba:	03 c0       	rjmp	.+6      	; 0xcc2 <_fpadd_parts+0x192>
     cbc:	ee 24       	eor	r14, r14
     cbe:	ff 24       	eor	r15, r15
     cc0:	87 01       	movw	r16, r14
     cc2:	11 96       	adiw	r26, 0x01	; 1
     cc4:	9c 91       	ld	r25, X
     cc6:	d2 01       	movw	r26, r4
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	8c 91       	ld	r24, X
     ccc:	98 17       	cp	r25, r24
     cce:	09 f4       	brne	.+2      	; 0xcd2 <_fpadd_parts+0x1a2>
     cd0:	45 c0       	rjmp	.+138    	; 0xd5c <_fpadd_parts+0x22c>
     cd2:	99 23       	and	r25, r25
     cd4:	39 f0       	breq	.+14     	; 0xce4 <_fpadd_parts+0x1b4>
     cd6:	a8 01       	movw	r20, r16
     cd8:	97 01       	movw	r18, r14
     cda:	2a 19       	sub	r18, r10
     cdc:	3b 09       	sbc	r19, r11
     cde:	4c 09       	sbc	r20, r12
     ce0:	5d 09       	sbc	r21, r13
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <_fpadd_parts+0x1c0>
     ce4:	a6 01       	movw	r20, r12
     ce6:	95 01       	movw	r18, r10
     ce8:	2e 19       	sub	r18, r14
     cea:	3f 09       	sbc	r19, r15
     cec:	40 0b       	sbc	r20, r16
     cee:	51 0b       	sbc	r21, r17
     cf0:	57 fd       	sbrc	r21, 7
     cf2:	08 c0       	rjmp	.+16     	; 0xd04 <_fpadd_parts+0x1d4>
     cf4:	11 82       	std	Z+1, r1	; 0x01
     cf6:	33 82       	std	Z+3, r3	; 0x03
     cf8:	22 82       	std	Z+2, r2	; 0x02
     cfa:	24 83       	std	Z+4, r18	; 0x04
     cfc:	35 83       	std	Z+5, r19	; 0x05
     cfe:	46 83       	std	Z+6, r20	; 0x06
     d00:	57 83       	std	Z+7, r21	; 0x07
     d02:	1d c0       	rjmp	.+58     	; 0xd3e <_fpadd_parts+0x20e>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	81 83       	std	Z+1, r24	; 0x01
     d08:	33 82       	std	Z+3, r3	; 0x03
     d0a:	22 82       	std	Z+2, r2	; 0x02
     d0c:	88 27       	eor	r24, r24
     d0e:	99 27       	eor	r25, r25
     d10:	dc 01       	movw	r26, r24
     d12:	82 1b       	sub	r24, r18
     d14:	93 0b       	sbc	r25, r19
     d16:	a4 0b       	sbc	r26, r20
     d18:	b5 0b       	sbc	r27, r21
     d1a:	84 83       	std	Z+4, r24	; 0x04
     d1c:	95 83       	std	Z+5, r25	; 0x05
     d1e:	a6 83       	std	Z+6, r26	; 0x06
     d20:	b7 83       	std	Z+7, r27	; 0x07
     d22:	0d c0       	rjmp	.+26     	; 0xd3e <_fpadd_parts+0x20e>
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	44 1f       	adc	r20, r20
     d2a:	55 1f       	adc	r21, r21
     d2c:	24 83       	std	Z+4, r18	; 0x04
     d2e:	35 83       	std	Z+5, r19	; 0x05
     d30:	46 83       	std	Z+6, r20	; 0x06
     d32:	57 83       	std	Z+7, r21	; 0x07
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	93 81       	ldd	r25, Z+3	; 0x03
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	93 83       	std	Z+3, r25	; 0x03
     d3c:	82 83       	std	Z+2, r24	; 0x02
     d3e:	24 81       	ldd	r18, Z+4	; 0x04
     d40:	35 81       	ldd	r19, Z+5	; 0x05
     d42:	46 81       	ldd	r20, Z+6	; 0x06
     d44:	57 81       	ldd	r21, Z+7	; 0x07
     d46:	da 01       	movw	r26, r20
     d48:	c9 01       	movw	r24, r18
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	a1 09       	sbc	r26, r1
     d4e:	b1 09       	sbc	r27, r1
     d50:	8f 5f       	subi	r24, 0xFF	; 255
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	af 4f       	sbci	r26, 0xFF	; 255
     d56:	bf 43       	sbci	r27, 0x3F	; 63
     d58:	28 f3       	brcs	.-54     	; 0xd24 <_fpadd_parts+0x1f4>
     d5a:	0b c0       	rjmp	.+22     	; 0xd72 <_fpadd_parts+0x242>
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	33 82       	std	Z+3, r3	; 0x03
     d60:	22 82       	std	Z+2, r2	; 0x02
     d62:	ea 0c       	add	r14, r10
     d64:	fb 1c       	adc	r15, r11
     d66:	0c 1d       	adc	r16, r12
     d68:	1d 1d       	adc	r17, r13
     d6a:	e4 82       	std	Z+4, r14	; 0x04
     d6c:	f5 82       	std	Z+5, r15	; 0x05
     d6e:	06 83       	std	Z+6, r16	; 0x06
     d70:	17 83       	std	Z+7, r17	; 0x07
     d72:	83 e0       	ldi	r24, 0x03	; 3
     d74:	80 83       	st	Z, r24
     d76:	24 81       	ldd	r18, Z+4	; 0x04
     d78:	35 81       	ldd	r19, Z+5	; 0x05
     d7a:	46 81       	ldd	r20, Z+6	; 0x06
     d7c:	57 81       	ldd	r21, Z+7	; 0x07
     d7e:	57 ff       	sbrs	r21, 7
     d80:	1a c0       	rjmp	.+52     	; 0xdb6 <_fpadd_parts+0x286>
     d82:	c9 01       	movw	r24, r18
     d84:	aa 27       	eor	r26, r26
     d86:	97 fd       	sbrc	r25, 7
     d88:	a0 95       	com	r26
     d8a:	ba 2f       	mov	r27, r26
     d8c:	81 70       	andi	r24, 0x01	; 1
     d8e:	90 70       	andi	r25, 0x00	; 0
     d90:	a0 70       	andi	r26, 0x00	; 0
     d92:	b0 70       	andi	r27, 0x00	; 0
     d94:	56 95       	lsr	r21
     d96:	47 95       	ror	r20
     d98:	37 95       	ror	r19
     d9a:	27 95       	ror	r18
     d9c:	82 2b       	or	r24, r18
     d9e:	93 2b       	or	r25, r19
     da0:	a4 2b       	or	r26, r20
     da2:	b5 2b       	or	r27, r21
     da4:	84 83       	std	Z+4, r24	; 0x04
     da6:	95 83       	std	Z+5, r25	; 0x05
     da8:	a6 83       	std	Z+6, r26	; 0x06
     daa:	b7 83       	std	Z+7, r27	; 0x07
     dac:	82 81       	ldd	r24, Z+2	; 0x02
     dae:	93 81       	ldd	r25, Z+3	; 0x03
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	93 83       	std	Z+3, r25	; 0x03
     db4:	82 83       	std	Z+2, r24	; 0x02
     db6:	df 01       	movw	r26, r30
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <_fpadd_parts+0x28c>
     dba:	d2 01       	movw	r26, r4
     dbc:	cd 01       	movw	r24, r26
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	e2 e1       	ldi	r30, 0x12	; 18
     dc4:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__epilogue_restores__>

00000dc8 <__subsf3>:
     dc8:	a0 e2       	ldi	r26, 0x20	; 32
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	ea ee       	ldi	r30, 0xEA	; 234
     dce:	f6 e0       	ldi	r31, 0x06	; 6
     dd0:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__prologue_saves__+0x18>
     dd4:	69 83       	std	Y+1, r22	; 0x01
     dd6:	7a 83       	std	Y+2, r23	; 0x02
     dd8:	8b 83       	std	Y+3, r24	; 0x03
     dda:	9c 83       	std	Y+4, r25	; 0x04
     ddc:	2d 83       	std	Y+5, r18	; 0x05
     dde:	3e 83       	std	Y+6, r19	; 0x06
     de0:	4f 83       	std	Y+7, r20	; 0x07
     de2:	58 87       	std	Y+8, r21	; 0x08
     de4:	e9 e0       	ldi	r30, 0x09	; 9
     de6:	ee 2e       	mov	r14, r30
     de8:	f1 2c       	mov	r15, r1
     dea:	ec 0e       	add	r14, r28
     dec:	fd 1e       	adc	r15, r29
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	b7 01       	movw	r22, r14
     df4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
     df8:	8e 01       	movw	r16, r28
     dfa:	0f 5e       	subi	r16, 0xEF	; 239
     dfc:	1f 4f       	sbci	r17, 0xFF	; 255
     dfe:	ce 01       	movw	r24, r28
     e00:	05 96       	adiw	r24, 0x05	; 5
     e02:	b8 01       	movw	r22, r16
     e04:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
     e08:	8a 89       	ldd	r24, Y+18	; 0x12
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	89 27       	eor	r24, r25
     e0e:	8a 8b       	std	Y+18, r24	; 0x12
     e10:	c7 01       	movw	r24, r14
     e12:	b8 01       	movw	r22, r16
     e14:	ae 01       	movw	r20, r28
     e16:	47 5e       	subi	r20, 0xE7	; 231
     e18:	5f 4f       	sbci	r21, 0xFF	; 255
     e1a:	0e 94 98 05 	call	0xb30	; 0xb30 <_fpadd_parts>
     e1e:	0e 94 cd 09 	call	0x139a	; 0x139a <__pack_f>
     e22:	a0 96       	adiw	r28, 0x20	; 32
     e24:	e6 e0       	ldi	r30, 0x06	; 6
     e26:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__epilogue_restores__+0x18>

00000e2a <__addsf3>:
     e2a:	a0 e2       	ldi	r26, 0x20	; 32
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	eb e1       	ldi	r30, 0x1B	; 27
     e30:	f7 e0       	ldi	r31, 0x07	; 7
     e32:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__prologue_saves__+0x18>
     e36:	69 83       	std	Y+1, r22	; 0x01
     e38:	7a 83       	std	Y+2, r23	; 0x02
     e3a:	8b 83       	std	Y+3, r24	; 0x03
     e3c:	9c 83       	std	Y+4, r25	; 0x04
     e3e:	2d 83       	std	Y+5, r18	; 0x05
     e40:	3e 83       	std	Y+6, r19	; 0x06
     e42:	4f 83       	std	Y+7, r20	; 0x07
     e44:	58 87       	std	Y+8, r21	; 0x08
     e46:	f9 e0       	ldi	r31, 0x09	; 9
     e48:	ef 2e       	mov	r14, r31
     e4a:	f1 2c       	mov	r15, r1
     e4c:	ec 0e       	add	r14, r28
     e4e:	fd 1e       	adc	r15, r29
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	b7 01       	movw	r22, r14
     e56:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
     e5a:	8e 01       	movw	r16, r28
     e5c:	0f 5e       	subi	r16, 0xEF	; 239
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	ce 01       	movw	r24, r28
     e62:	05 96       	adiw	r24, 0x05	; 5
     e64:	b8 01       	movw	r22, r16
     e66:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
     e6a:	c7 01       	movw	r24, r14
     e6c:	b8 01       	movw	r22, r16
     e6e:	ae 01       	movw	r20, r28
     e70:	47 5e       	subi	r20, 0xE7	; 231
     e72:	5f 4f       	sbci	r21, 0xFF	; 255
     e74:	0e 94 98 05 	call	0xb30	; 0xb30 <_fpadd_parts>
     e78:	0e 94 cd 09 	call	0x139a	; 0x139a <__pack_f>
     e7c:	a0 96       	adiw	r28, 0x20	; 32
     e7e:	e6 e0       	ldi	r30, 0x06	; 6
     e80:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__epilogue_restores__+0x18>

00000e84 <__mulsf3>:
     e84:	a0 e2       	ldi	r26, 0x20	; 32
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e8 e4       	ldi	r30, 0x48	; 72
     e8a:	f7 e0       	ldi	r31, 0x07	; 7
     e8c:	0c 94 9a 0b 	jmp	0x1734	; 0x1734 <__prologue_saves__>
     e90:	69 83       	std	Y+1, r22	; 0x01
     e92:	7a 83       	std	Y+2, r23	; 0x02
     e94:	8b 83       	std	Y+3, r24	; 0x03
     e96:	9c 83       	std	Y+4, r25	; 0x04
     e98:	2d 83       	std	Y+5, r18	; 0x05
     e9a:	3e 83       	std	Y+6, r19	; 0x06
     e9c:	4f 83       	std	Y+7, r20	; 0x07
     e9e:	58 87       	std	Y+8, r21	; 0x08
     ea0:	ce 01       	movw	r24, r28
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	be 01       	movw	r22, r28
     ea6:	67 5f       	subi	r22, 0xF7	; 247
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
     eae:	ce 01       	movw	r24, r28
     eb0:	05 96       	adiw	r24, 0x05	; 5
     eb2:	be 01       	movw	r22, r28
     eb4:	6f 5e       	subi	r22, 0xEF	; 239
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
     ebc:	99 85       	ldd	r25, Y+9	; 0x09
     ebe:	92 30       	cpi	r25, 0x02	; 2
     ec0:	88 f0       	brcs	.+34     	; 0xee4 <__mulsf3+0x60>
     ec2:	89 89       	ldd	r24, Y+17	; 0x11
     ec4:	82 30       	cpi	r24, 0x02	; 2
     ec6:	c8 f0       	brcs	.+50     	; 0xefa <__mulsf3+0x76>
     ec8:	94 30       	cpi	r25, 0x04	; 4
     eca:	19 f4       	brne	.+6      	; 0xed2 <__mulsf3+0x4e>
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	51 f4       	brne	.+20     	; 0xee4 <__mulsf3+0x60>
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <__mulsf3+0x56>
     ed2:	84 30       	cpi	r24, 0x04	; 4
     ed4:	29 f4       	brne	.+10     	; 0xee0 <__mulsf3+0x5c>
     ed6:	92 30       	cpi	r25, 0x02	; 2
     ed8:	81 f4       	brne	.+32     	; 0xefa <__mulsf3+0x76>
     eda:	88 e0       	ldi	r24, 0x08	; 8
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	c6 c0       	rjmp	.+396    	; 0x106c <__mulsf3+0x1e8>
     ee0:	92 30       	cpi	r25, 0x02	; 2
     ee2:	49 f4       	brne	.+18     	; 0xef6 <__mulsf3+0x72>
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee8:	8a 89       	ldd	r24, Y+18	; 0x12
     eea:	98 13       	cpse	r25, r24
     eec:	21 e0       	ldi	r18, 0x01	; 1
     eee:	2a 87       	std	Y+10, r18	; 0x0a
     ef0:	ce 01       	movw	r24, r28
     ef2:	09 96       	adiw	r24, 0x09	; 9
     ef4:	bb c0       	rjmp	.+374    	; 0x106c <__mulsf3+0x1e8>
     ef6:	82 30       	cpi	r24, 0x02	; 2
     ef8:	49 f4       	brne	.+18     	; 0xf0c <__mulsf3+0x88>
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	9a 85       	ldd	r25, Y+10	; 0x0a
     efe:	8a 89       	ldd	r24, Y+18	; 0x12
     f00:	98 13       	cpse	r25, r24
     f02:	21 e0       	ldi	r18, 0x01	; 1
     f04:	2a 8b       	std	Y+18, r18	; 0x12
     f06:	ce 01       	movw	r24, r28
     f08:	41 96       	adiw	r24, 0x11	; 17
     f0a:	b0 c0       	rjmp	.+352    	; 0x106c <__mulsf3+0x1e8>
     f0c:	2d 84       	ldd	r2, Y+13	; 0x0d
     f0e:	3e 84       	ldd	r3, Y+14	; 0x0e
     f10:	4f 84       	ldd	r4, Y+15	; 0x0f
     f12:	58 88       	ldd	r5, Y+16	; 0x10
     f14:	6d 88       	ldd	r6, Y+21	; 0x15
     f16:	7e 88       	ldd	r7, Y+22	; 0x16
     f18:	8f 88       	ldd	r8, Y+23	; 0x17
     f1a:	98 8c       	ldd	r9, Y+24	; 0x18
     f1c:	ee 24       	eor	r14, r14
     f1e:	ff 24       	eor	r15, r15
     f20:	87 01       	movw	r16, r14
     f22:	aa 24       	eor	r10, r10
     f24:	bb 24       	eor	r11, r11
     f26:	65 01       	movw	r12, r10
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	e0 e0       	ldi	r30, 0x00	; 0
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	c1 01       	movw	r24, r2
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	90 70       	andi	r25, 0x00	; 0
     f3a:	89 2b       	or	r24, r25
     f3c:	e9 f0       	breq	.+58     	; 0xf78 <__mulsf3+0xf4>
     f3e:	e6 0c       	add	r14, r6
     f40:	f7 1c       	adc	r15, r7
     f42:	08 1d       	adc	r16, r8
     f44:	19 1d       	adc	r17, r9
     f46:	9a 01       	movw	r18, r20
     f48:	ab 01       	movw	r20, r22
     f4a:	2a 0d       	add	r18, r10
     f4c:	3b 1d       	adc	r19, r11
     f4e:	4c 1d       	adc	r20, r12
     f50:	5d 1d       	adc	r21, r13
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a0 e0       	ldi	r26, 0x00	; 0
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e6 14       	cp	r14, r6
     f5c:	f7 04       	cpc	r15, r7
     f5e:	08 05       	cpc	r16, r8
     f60:	19 05       	cpc	r17, r9
     f62:	20 f4       	brcc	.+8      	; 0xf6c <__mulsf3+0xe8>
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a0 e0       	ldi	r26, 0x00	; 0
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ba 01       	movw	r22, r20
     f6e:	a9 01       	movw	r20, r18
     f70:	48 0f       	add	r20, r24
     f72:	59 1f       	adc	r21, r25
     f74:	6a 1f       	adc	r22, r26
     f76:	7b 1f       	adc	r23, r27
     f78:	aa 0c       	add	r10, r10
     f7a:	bb 1c       	adc	r11, r11
     f7c:	cc 1c       	adc	r12, r12
     f7e:	dd 1c       	adc	r13, r13
     f80:	97 fe       	sbrs	r9, 7
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <__mulsf3+0x110>
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a0 e0       	ldi	r26, 0x00	; 0
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	a8 2a       	or	r10, r24
     f8e:	b9 2a       	or	r11, r25
     f90:	ca 2a       	or	r12, r26
     f92:	db 2a       	or	r13, r27
     f94:	31 96       	adiw	r30, 0x01	; 1
     f96:	e0 32       	cpi	r30, 0x20	; 32
     f98:	f1 05       	cpc	r31, r1
     f9a:	49 f0       	breq	.+18     	; 0xfae <__mulsf3+0x12a>
     f9c:	66 0c       	add	r6, r6
     f9e:	77 1c       	adc	r7, r7
     fa0:	88 1c       	adc	r8, r8
     fa2:	99 1c       	adc	r9, r9
     fa4:	56 94       	lsr	r5
     fa6:	47 94       	ror	r4
     fa8:	37 94       	ror	r3
     faa:	27 94       	ror	r2
     fac:	c3 cf       	rjmp	.-122    	; 0xf34 <__mulsf3+0xb0>
     fae:	fa 85       	ldd	r31, Y+10	; 0x0a
     fb0:	ea 89       	ldd	r30, Y+18	; 0x12
     fb2:	2b 89       	ldd	r18, Y+19	; 0x13
     fb4:	3c 89       	ldd	r19, Y+20	; 0x14
     fb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     fba:	28 0f       	add	r18, r24
     fbc:	39 1f       	adc	r19, r25
     fbe:	2e 5f       	subi	r18, 0xFE	; 254
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	17 c0       	rjmp	.+46     	; 0xff2 <__mulsf3+0x16e>
     fc4:	ca 01       	movw	r24, r20
     fc6:	81 70       	andi	r24, 0x01	; 1
     fc8:	90 70       	andi	r25, 0x00	; 0
     fca:	89 2b       	or	r24, r25
     fcc:	61 f0       	breq	.+24     	; 0xfe6 <__mulsf3+0x162>
     fce:	16 95       	lsr	r17
     fd0:	07 95       	ror	r16
     fd2:	f7 94       	ror	r15
     fd4:	e7 94       	ror	r14
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a0 e0       	ldi	r26, 0x00	; 0
     fdc:	b0 e8       	ldi	r27, 0x80	; 128
     fde:	e8 2a       	or	r14, r24
     fe0:	f9 2a       	or	r15, r25
     fe2:	0a 2b       	or	r16, r26
     fe4:	1b 2b       	or	r17, r27
     fe6:	76 95       	lsr	r23
     fe8:	67 95       	ror	r22
     fea:	57 95       	ror	r21
     fec:	47 95       	ror	r20
     fee:	2f 5f       	subi	r18, 0xFF	; 255
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	77 fd       	sbrc	r23, 7
     ff4:	e7 cf       	rjmp	.-50     	; 0xfc4 <__mulsf3+0x140>
     ff6:	0c c0       	rjmp	.+24     	; 0x1010 <__mulsf3+0x18c>
     ff8:	44 0f       	add	r20, r20
     ffa:	55 1f       	adc	r21, r21
     ffc:	66 1f       	adc	r22, r22
     ffe:	77 1f       	adc	r23, r23
    1000:	17 fd       	sbrc	r17, 7
    1002:	41 60       	ori	r20, 0x01	; 1
    1004:	ee 0c       	add	r14, r14
    1006:	ff 1c       	adc	r15, r15
    1008:	00 1f       	adc	r16, r16
    100a:	11 1f       	adc	r17, r17
    100c:	21 50       	subi	r18, 0x01	; 1
    100e:	30 40       	sbci	r19, 0x00	; 0
    1010:	40 30       	cpi	r20, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	59 07       	cpc	r21, r25
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	69 07       	cpc	r22, r25
    101a:	90 e4       	ldi	r25, 0x40	; 64
    101c:	79 07       	cpc	r23, r25
    101e:	60 f3       	brcs	.-40     	; 0xff8 <__mulsf3+0x174>
    1020:	2b 8f       	std	Y+27, r18	; 0x1b
    1022:	3c 8f       	std	Y+28, r19	; 0x1c
    1024:	db 01       	movw	r26, r22
    1026:	ca 01       	movw	r24, r20
    1028:	8f 77       	andi	r24, 0x7F	; 127
    102a:	90 70       	andi	r25, 0x00	; 0
    102c:	a0 70       	andi	r26, 0x00	; 0
    102e:	b0 70       	andi	r27, 0x00	; 0
    1030:	80 34       	cpi	r24, 0x40	; 64
    1032:	91 05       	cpc	r25, r1
    1034:	a1 05       	cpc	r26, r1
    1036:	b1 05       	cpc	r27, r1
    1038:	61 f4       	brne	.+24     	; 0x1052 <__mulsf3+0x1ce>
    103a:	47 fd       	sbrc	r20, 7
    103c:	0a c0       	rjmp	.+20     	; 0x1052 <__mulsf3+0x1ce>
    103e:	e1 14       	cp	r14, r1
    1040:	f1 04       	cpc	r15, r1
    1042:	01 05       	cpc	r16, r1
    1044:	11 05       	cpc	r17, r1
    1046:	29 f0       	breq	.+10     	; 0x1052 <__mulsf3+0x1ce>
    1048:	40 5c       	subi	r20, 0xC0	; 192
    104a:	5f 4f       	sbci	r21, 0xFF	; 255
    104c:	6f 4f       	sbci	r22, 0xFF	; 255
    104e:	7f 4f       	sbci	r23, 0xFF	; 255
    1050:	40 78       	andi	r20, 0x80	; 128
    1052:	1a 8e       	std	Y+26, r1	; 0x1a
    1054:	fe 17       	cp	r31, r30
    1056:	11 f0       	breq	.+4      	; 0x105c <__mulsf3+0x1d8>
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	8a 8f       	std	Y+26, r24	; 0x1a
    105c:	4d 8f       	std	Y+29, r20	; 0x1d
    105e:	5e 8f       	std	Y+30, r21	; 0x1e
    1060:	6f 8f       	std	Y+31, r22	; 0x1f
    1062:	78 a3       	std	Y+32, r23	; 0x20
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	89 8f       	std	Y+25, r24	; 0x19
    1068:	ce 01       	movw	r24, r28
    106a:	49 96       	adiw	r24, 0x19	; 25
    106c:	0e 94 cd 09 	call	0x139a	; 0x139a <__pack_f>
    1070:	a0 96       	adiw	r28, 0x20	; 32
    1072:	e2 e1       	ldi	r30, 0x12	; 18
    1074:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__epilogue_restores__>

00001078 <__gtsf2>:
    1078:	a8 e1       	ldi	r26, 0x18	; 24
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e2 e4       	ldi	r30, 0x42	; 66
    107e:	f8 e0       	ldi	r31, 0x08	; 8
    1080:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__prologue_saves__+0x18>
    1084:	69 83       	std	Y+1, r22	; 0x01
    1086:	7a 83       	std	Y+2, r23	; 0x02
    1088:	8b 83       	std	Y+3, r24	; 0x03
    108a:	9c 83       	std	Y+4, r25	; 0x04
    108c:	2d 83       	std	Y+5, r18	; 0x05
    108e:	3e 83       	std	Y+6, r19	; 0x06
    1090:	4f 83       	std	Y+7, r20	; 0x07
    1092:	58 87       	std	Y+8, r21	; 0x08
    1094:	89 e0       	ldi	r24, 0x09	; 9
    1096:	e8 2e       	mov	r14, r24
    1098:	f1 2c       	mov	r15, r1
    109a:	ec 0e       	add	r14, r28
    109c:	fd 1e       	adc	r15, r29
    109e:	ce 01       	movw	r24, r28
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	b7 01       	movw	r22, r14
    10a4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
    10a8:	8e 01       	movw	r16, r28
    10aa:	0f 5e       	subi	r16, 0xEF	; 239
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	ce 01       	movw	r24, r28
    10b0:	05 96       	adiw	r24, 0x05	; 5
    10b2:	b8 01       	movw	r22, r16
    10b4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
    10b8:	89 85       	ldd	r24, Y+9	; 0x09
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	40 f0       	brcs	.+16     	; 0x10ce <__gtsf2+0x56>
    10be:	89 89       	ldd	r24, Y+17	; 0x11
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	28 f0       	brcs	.+10     	; 0x10ce <__gtsf2+0x56>
    10c4:	c7 01       	movw	r24, r14
    10c6:	b8 01       	movw	r22, r16
    10c8:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fpcmp_parts_f>
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <__gtsf2+0x58>
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	68 96       	adiw	r28, 0x18	; 24
    10d2:	e6 e0       	ldi	r30, 0x06	; 6
    10d4:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__epilogue_restores__+0x18>

000010d8 <__gesf2>:
    10d8:	a8 e1       	ldi	r26, 0x18	; 24
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e2 e7       	ldi	r30, 0x72	; 114
    10de:	f8 e0       	ldi	r31, 0x08	; 8
    10e0:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__prologue_saves__+0x18>
    10e4:	69 83       	std	Y+1, r22	; 0x01
    10e6:	7a 83       	std	Y+2, r23	; 0x02
    10e8:	8b 83       	std	Y+3, r24	; 0x03
    10ea:	9c 83       	std	Y+4, r25	; 0x04
    10ec:	2d 83       	std	Y+5, r18	; 0x05
    10ee:	3e 83       	std	Y+6, r19	; 0x06
    10f0:	4f 83       	std	Y+7, r20	; 0x07
    10f2:	58 87       	std	Y+8, r21	; 0x08
    10f4:	89 e0       	ldi	r24, 0x09	; 9
    10f6:	e8 2e       	mov	r14, r24
    10f8:	f1 2c       	mov	r15, r1
    10fa:	ec 0e       	add	r14, r28
    10fc:	fd 1e       	adc	r15, r29
    10fe:	ce 01       	movw	r24, r28
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	b7 01       	movw	r22, r14
    1104:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
    1108:	8e 01       	movw	r16, r28
    110a:	0f 5e       	subi	r16, 0xEF	; 239
    110c:	1f 4f       	sbci	r17, 0xFF	; 255
    110e:	ce 01       	movw	r24, r28
    1110:	05 96       	adiw	r24, 0x05	; 5
    1112:	b8 01       	movw	r22, r16
    1114:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	82 30       	cpi	r24, 0x02	; 2
    111c:	40 f0       	brcs	.+16     	; 0x112e <__gesf2+0x56>
    111e:	89 89       	ldd	r24, Y+17	; 0x11
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	28 f0       	brcs	.+10     	; 0x112e <__gesf2+0x56>
    1124:	c7 01       	movw	r24, r14
    1126:	b8 01       	movw	r22, r16
    1128:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fpcmp_parts_f>
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <__gesf2+0x58>
    112e:	8f ef       	ldi	r24, 0xFF	; 255
    1130:	68 96       	adiw	r28, 0x18	; 24
    1132:	e6 e0       	ldi	r30, 0x06	; 6
    1134:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__epilogue_restores__+0x18>

00001138 <__ltsf2>:
    1138:	a8 e1       	ldi	r26, 0x18	; 24
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e2 ea       	ldi	r30, 0xA2	; 162
    113e:	f8 e0       	ldi	r31, 0x08	; 8
    1140:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__prologue_saves__+0x18>
    1144:	69 83       	std	Y+1, r22	; 0x01
    1146:	7a 83       	std	Y+2, r23	; 0x02
    1148:	8b 83       	std	Y+3, r24	; 0x03
    114a:	9c 83       	std	Y+4, r25	; 0x04
    114c:	2d 83       	std	Y+5, r18	; 0x05
    114e:	3e 83       	std	Y+6, r19	; 0x06
    1150:	4f 83       	std	Y+7, r20	; 0x07
    1152:	58 87       	std	Y+8, r21	; 0x08
    1154:	89 e0       	ldi	r24, 0x09	; 9
    1156:	e8 2e       	mov	r14, r24
    1158:	f1 2c       	mov	r15, r1
    115a:	ec 0e       	add	r14, r28
    115c:	fd 1e       	adc	r15, r29
    115e:	ce 01       	movw	r24, r28
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	b7 01       	movw	r22, r14
    1164:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
    1168:	8e 01       	movw	r16, r28
    116a:	0f 5e       	subi	r16, 0xEF	; 239
    116c:	1f 4f       	sbci	r17, 0xFF	; 255
    116e:	ce 01       	movw	r24, r28
    1170:	05 96       	adiw	r24, 0x05	; 5
    1172:	b8 01       	movw	r22, r16
    1174:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	82 30       	cpi	r24, 0x02	; 2
    117c:	40 f0       	brcs	.+16     	; 0x118e <__ltsf2+0x56>
    117e:	89 89       	ldd	r24, Y+17	; 0x11
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	28 f0       	brcs	.+10     	; 0x118e <__ltsf2+0x56>
    1184:	c7 01       	movw	r24, r14
    1186:	b8 01       	movw	r22, r16
    1188:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fpcmp_parts_f>
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <__ltsf2+0x58>
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	68 96       	adiw	r28, 0x18	; 24
    1192:	e6 e0       	ldi	r30, 0x06	; 6
    1194:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__epilogue_restores__+0x18>

00001198 <__floatsisf>:
    1198:	a8 e0       	ldi	r26, 0x08	; 8
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e2 ed       	ldi	r30, 0xD2	; 210
    119e:	f8 e0       	ldi	r31, 0x08	; 8
    11a0:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__prologue_saves__+0x12>
    11a4:	9b 01       	movw	r18, r22
    11a6:	ac 01       	movw	r20, r24
    11a8:	83 e0       	ldi	r24, 0x03	; 3
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	da 01       	movw	r26, r20
    11ae:	c9 01       	movw	r24, r18
    11b0:	88 27       	eor	r24, r24
    11b2:	b7 fd       	sbrc	r27, 7
    11b4:	83 95       	inc	r24
    11b6:	99 27       	eor	r25, r25
    11b8:	aa 27       	eor	r26, r26
    11ba:	bb 27       	eor	r27, r27
    11bc:	b8 2e       	mov	r11, r24
    11be:	21 15       	cp	r18, r1
    11c0:	31 05       	cpc	r19, r1
    11c2:	41 05       	cpc	r20, r1
    11c4:	51 05       	cpc	r21, r1
    11c6:	19 f4       	brne	.+6      	; 0x11ce <__floatsisf+0x36>
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	3a c0       	rjmp	.+116    	; 0x1242 <__floatsisf+0xaa>
    11ce:	88 23       	and	r24, r24
    11d0:	a9 f0       	breq	.+42     	; 0x11fc <__floatsisf+0x64>
    11d2:	20 30       	cpi	r18, 0x00	; 0
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	38 07       	cpc	r19, r24
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	48 07       	cpc	r20, r24
    11dc:	80 e8       	ldi	r24, 0x80	; 128
    11de:	58 07       	cpc	r21, r24
    11e0:	29 f4       	brne	.+10     	; 0x11ec <__floatsisf+0x54>
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	9f ec       	ldi	r25, 0xCF	; 207
    11ea:	30 c0       	rjmp	.+96     	; 0x124c <__floatsisf+0xb4>
    11ec:	ee 24       	eor	r14, r14
    11ee:	ff 24       	eor	r15, r15
    11f0:	87 01       	movw	r16, r14
    11f2:	e2 1a       	sub	r14, r18
    11f4:	f3 0a       	sbc	r15, r19
    11f6:	04 0b       	sbc	r16, r20
    11f8:	15 0b       	sbc	r17, r21
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <__floatsisf+0x68>
    11fc:	79 01       	movw	r14, r18
    11fe:	8a 01       	movw	r16, r20
    1200:	8e e1       	ldi	r24, 0x1E	; 30
    1202:	c8 2e       	mov	r12, r24
    1204:	d1 2c       	mov	r13, r1
    1206:	dc 82       	std	Y+4, r13	; 0x04
    1208:	cb 82       	std	Y+3, r12	; 0x03
    120a:	ed 82       	std	Y+5, r14	; 0x05
    120c:	fe 82       	std	Y+6, r15	; 0x06
    120e:	0f 83       	std	Y+7, r16	; 0x07
    1210:	18 87       	std	Y+8, r17	; 0x08
    1212:	c8 01       	movw	r24, r16
    1214:	b7 01       	movw	r22, r14
    1216:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__clzsi2>
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	18 16       	cp	r1, r24
    121e:	19 06       	cpc	r1, r25
    1220:	84 f4       	brge	.+32     	; 0x1242 <__floatsisf+0xaa>
    1222:	08 2e       	mov	r0, r24
    1224:	04 c0       	rjmp	.+8      	; 0x122e <__floatsisf+0x96>
    1226:	ee 0c       	add	r14, r14
    1228:	ff 1c       	adc	r15, r15
    122a:	00 1f       	adc	r16, r16
    122c:	11 1f       	adc	r17, r17
    122e:	0a 94       	dec	r0
    1230:	d2 f7       	brpl	.-12     	; 0x1226 <__floatsisf+0x8e>
    1232:	ed 82       	std	Y+5, r14	; 0x05
    1234:	fe 82       	std	Y+6, r15	; 0x06
    1236:	0f 83       	std	Y+7, r16	; 0x07
    1238:	18 87       	std	Y+8, r17	; 0x08
    123a:	c8 1a       	sub	r12, r24
    123c:	d9 0a       	sbc	r13, r25
    123e:	dc 82       	std	Y+4, r13	; 0x04
    1240:	cb 82       	std	Y+3, r12	; 0x03
    1242:	ba 82       	std	Y+2, r11	; 0x02
    1244:	ce 01       	movw	r24, r28
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	0e 94 cd 09 	call	0x139a	; 0x139a <__pack_f>
    124c:	28 96       	adiw	r28, 0x08	; 8
    124e:	e9 e0       	ldi	r30, 0x09	; 9
    1250:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__epilogue_restores__+0x12>

00001254 <__fixsfsi>:
    1254:	ac e0       	ldi	r26, 0x0C	; 12
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e0 e3       	ldi	r30, 0x30	; 48
    125a:	f9 e0       	ldi	r31, 0x09	; 9
    125c:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__prologue_saves__+0x20>
    1260:	69 83       	std	Y+1, r22	; 0x01
    1262:	7a 83       	std	Y+2, r23	; 0x02
    1264:	8b 83       	std	Y+3, r24	; 0x03
    1266:	9c 83       	std	Y+4, r25	; 0x04
    1268:	ce 01       	movw	r24, r28
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	be 01       	movw	r22, r28
    126e:	6b 5f       	subi	r22, 0xFB	; 251
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__unpack_f>
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	61 f1       	breq	.+88     	; 0x12d4 <__fixsfsi+0x80>
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	50 f1       	brcs	.+84     	; 0x12d4 <__fixsfsi+0x80>
    1280:	84 30       	cpi	r24, 0x04	; 4
    1282:	21 f4       	brne	.+8      	; 0x128c <__fixsfsi+0x38>
    1284:	8e 81       	ldd	r24, Y+6	; 0x06
    1286:	88 23       	and	r24, r24
    1288:	51 f1       	breq	.+84     	; 0x12de <__fixsfsi+0x8a>
    128a:	2e c0       	rjmp	.+92     	; 0x12e8 <__fixsfsi+0x94>
    128c:	2f 81       	ldd	r18, Y+7	; 0x07
    128e:	38 85       	ldd	r19, Y+8	; 0x08
    1290:	37 fd       	sbrc	r19, 7
    1292:	20 c0       	rjmp	.+64     	; 0x12d4 <__fixsfsi+0x80>
    1294:	6e 81       	ldd	r22, Y+6	; 0x06
    1296:	2f 31       	cpi	r18, 0x1F	; 31
    1298:	31 05       	cpc	r19, r1
    129a:	1c f0       	brlt	.+6      	; 0x12a2 <__fixsfsi+0x4e>
    129c:	66 23       	and	r22, r22
    129e:	f9 f0       	breq	.+62     	; 0x12de <__fixsfsi+0x8a>
    12a0:	23 c0       	rjmp	.+70     	; 0x12e8 <__fixsfsi+0x94>
    12a2:	8e e1       	ldi	r24, 0x1E	; 30
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	82 1b       	sub	r24, r18
    12a8:	93 0b       	sbc	r25, r19
    12aa:	29 85       	ldd	r18, Y+9	; 0x09
    12ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ae:	4b 85       	ldd	r20, Y+11	; 0x0b
    12b0:	5c 85       	ldd	r21, Y+12	; 0x0c
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <__fixsfsi+0x68>
    12b4:	56 95       	lsr	r21
    12b6:	47 95       	ror	r20
    12b8:	37 95       	ror	r19
    12ba:	27 95       	ror	r18
    12bc:	8a 95       	dec	r24
    12be:	d2 f7       	brpl	.-12     	; 0x12b4 <__fixsfsi+0x60>
    12c0:	66 23       	and	r22, r22
    12c2:	b1 f0       	breq	.+44     	; 0x12f0 <__fixsfsi+0x9c>
    12c4:	50 95       	com	r21
    12c6:	40 95       	com	r20
    12c8:	30 95       	com	r19
    12ca:	21 95       	neg	r18
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	4f 4f       	sbci	r20, 0xFF	; 255
    12d0:	5f 4f       	sbci	r21, 0xFF	; 255
    12d2:	0e c0       	rjmp	.+28     	; 0x12f0 <__fixsfsi+0x9c>
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	09 c0       	rjmp	.+18     	; 0x12f0 <__fixsfsi+0x9c>
    12de:	2f ef       	ldi	r18, 0xFF	; 255
    12e0:	3f ef       	ldi	r19, 0xFF	; 255
    12e2:	4f ef       	ldi	r20, 0xFF	; 255
    12e4:	5f e7       	ldi	r21, 0x7F	; 127
    12e6:	04 c0       	rjmp	.+8      	; 0x12f0 <__fixsfsi+0x9c>
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	50 e8       	ldi	r21, 0x80	; 128
    12f0:	b9 01       	movw	r22, r18
    12f2:	ca 01       	movw	r24, r20
    12f4:	2c 96       	adiw	r28, 0x0c	; 12
    12f6:	e2 e0       	ldi	r30, 0x02	; 2
    12f8:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__epilogue_restores__+0x20>

000012fc <__clzsi2>:
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	7b 01       	movw	r14, r22
    1306:	8c 01       	movw	r16, r24
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	e8 16       	cp	r14, r24
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	f8 06       	cpc	r15, r24
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	08 07       	cpc	r16, r24
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	18 07       	cpc	r17, r24
    1318:	88 f4       	brcc	.+34     	; 0x133c <__clzsi2+0x40>
    131a:	8f ef       	ldi	r24, 0xFF	; 255
    131c:	e8 16       	cp	r14, r24
    131e:	f1 04       	cpc	r15, r1
    1320:	01 05       	cpc	r16, r1
    1322:	11 05       	cpc	r17, r1
    1324:	31 f0       	breq	.+12     	; 0x1332 <__clzsi2+0x36>
    1326:	28 f0       	brcs	.+10     	; 0x1332 <__clzsi2+0x36>
    1328:	88 e0       	ldi	r24, 0x08	; 8
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a0 e0       	ldi	r26, 0x00	; 0
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	17 c0       	rjmp	.+46     	; 0x1360 <__clzsi2+0x64>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	a0 e0       	ldi	r26, 0x00	; 0
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	12 c0       	rjmp	.+36     	; 0x1360 <__clzsi2+0x64>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	e8 16       	cp	r14, r24
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	f8 06       	cpc	r15, r24
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	08 07       	cpc	r16, r24
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	18 07       	cpc	r17, r24
    134c:	28 f0       	brcs	.+10     	; 0x1358 <__clzsi2+0x5c>
    134e:	88 e1       	ldi	r24, 0x18	; 24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a0 e0       	ldi	r26, 0x00	; 0
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	04 c0       	rjmp	.+8      	; 0x1360 <__clzsi2+0x64>
    1358:	80 e1       	ldi	r24, 0x10	; 16
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a0 e0       	ldi	r26, 0x00	; 0
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	20 e2       	ldi	r18, 0x20	; 32
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	40 e0       	ldi	r20, 0x00	; 0
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	28 1b       	sub	r18, r24
    136a:	39 0b       	sbc	r19, r25
    136c:	4a 0b       	sbc	r20, r26
    136e:	5b 0b       	sbc	r21, r27
    1370:	04 c0       	rjmp	.+8      	; 0x137a <__clzsi2+0x7e>
    1372:	16 95       	lsr	r17
    1374:	07 95       	ror	r16
    1376:	f7 94       	ror	r15
    1378:	e7 94       	ror	r14
    137a:	8a 95       	dec	r24
    137c:	d2 f7       	brpl	.-12     	; 0x1372 <__clzsi2+0x76>
    137e:	f7 01       	movw	r30, r14
    1380:	e0 5f       	subi	r30, 0xF0	; 240
    1382:	fe 4f       	sbci	r31, 0xFE	; 254
    1384:	80 81       	ld	r24, Z
    1386:	28 1b       	sub	r18, r24
    1388:	31 09       	sbc	r19, r1
    138a:	41 09       	sbc	r20, r1
    138c:	51 09       	sbc	r21, r1
    138e:	c9 01       	movw	r24, r18
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	08 95       	ret

0000139a <__pack_f>:
    139a:	df 92       	push	r13
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	fc 01       	movw	r30, r24
    13a6:	e4 80       	ldd	r14, Z+4	; 0x04
    13a8:	f5 80       	ldd	r15, Z+5	; 0x05
    13aa:	06 81       	ldd	r16, Z+6	; 0x06
    13ac:	17 81       	ldd	r17, Z+7	; 0x07
    13ae:	d1 80       	ldd	r13, Z+1	; 0x01
    13b0:	80 81       	ld	r24, Z
    13b2:	82 30       	cpi	r24, 0x02	; 2
    13b4:	48 f4       	brcc	.+18     	; 0x13c8 <__pack_f+0x2e>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a0 e1       	ldi	r26, 0x10	; 16
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e8 2a       	or	r14, r24
    13c0:	f9 2a       	or	r15, r25
    13c2:	0a 2b       	or	r16, r26
    13c4:	1b 2b       	or	r17, r27
    13c6:	a5 c0       	rjmp	.+330    	; 0x1512 <__pack_f+0x178>
    13c8:	84 30       	cpi	r24, 0x04	; 4
    13ca:	09 f4       	brne	.+2      	; 0x13ce <__pack_f+0x34>
    13cc:	9f c0       	rjmp	.+318    	; 0x150c <__pack_f+0x172>
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	21 f4       	brne	.+8      	; 0x13da <__pack_f+0x40>
    13d2:	ee 24       	eor	r14, r14
    13d4:	ff 24       	eor	r15, r15
    13d6:	87 01       	movw	r16, r14
    13d8:	05 c0       	rjmp	.+10     	; 0x13e4 <__pack_f+0x4a>
    13da:	e1 14       	cp	r14, r1
    13dc:	f1 04       	cpc	r15, r1
    13de:	01 05       	cpc	r16, r1
    13e0:	11 05       	cpc	r17, r1
    13e2:	19 f4       	brne	.+6      	; 0x13ea <__pack_f+0x50>
    13e4:	e0 e0       	ldi	r30, 0x00	; 0
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	96 c0       	rjmp	.+300    	; 0x1516 <__pack_f+0x17c>
    13ea:	62 81       	ldd	r22, Z+2	; 0x02
    13ec:	73 81       	ldd	r23, Z+3	; 0x03
    13ee:	9f ef       	ldi	r25, 0xFF	; 255
    13f0:	62 38       	cpi	r22, 0x82	; 130
    13f2:	79 07       	cpc	r23, r25
    13f4:	0c f0       	brlt	.+2      	; 0x13f8 <__pack_f+0x5e>
    13f6:	5b c0       	rjmp	.+182    	; 0x14ae <__pack_f+0x114>
    13f8:	22 e8       	ldi	r18, 0x82	; 130
    13fa:	3f ef       	ldi	r19, 0xFF	; 255
    13fc:	26 1b       	sub	r18, r22
    13fe:	37 0b       	sbc	r19, r23
    1400:	2a 31       	cpi	r18, 0x1A	; 26
    1402:	31 05       	cpc	r19, r1
    1404:	2c f0       	brlt	.+10     	; 0x1410 <__pack_f+0x76>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	2a c0       	rjmp	.+84     	; 0x1464 <__pack_f+0xca>
    1410:	b8 01       	movw	r22, r16
    1412:	a7 01       	movw	r20, r14
    1414:	02 2e       	mov	r0, r18
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <__pack_f+0x86>
    1418:	76 95       	lsr	r23
    141a:	67 95       	ror	r22
    141c:	57 95       	ror	r21
    141e:	47 95       	ror	r20
    1420:	0a 94       	dec	r0
    1422:	d2 f7       	brpl	.-12     	; 0x1418 <__pack_f+0x7e>
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e0       	ldi	r26, 0x00	; 0
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <__pack_f+0x9c>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	aa 1f       	adc	r26, r26
    1434:	bb 1f       	adc	r27, r27
    1436:	2a 95       	dec	r18
    1438:	d2 f7       	brpl	.-12     	; 0x142e <__pack_f+0x94>
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	a1 09       	sbc	r26, r1
    143e:	b1 09       	sbc	r27, r1
    1440:	8e 21       	and	r24, r14
    1442:	9f 21       	and	r25, r15
    1444:	a0 23       	and	r26, r16
    1446:	b1 23       	and	r27, r17
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	a1 05       	cpc	r26, r1
    144c:	b1 05       	cpc	r27, r1
    144e:	21 f0       	breq	.+8      	; 0x1458 <__pack_f+0xbe>
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	9a 01       	movw	r18, r20
    145a:	ab 01       	movw	r20, r22
    145c:	28 2b       	or	r18, r24
    145e:	39 2b       	or	r19, r25
    1460:	4a 2b       	or	r20, r26
    1462:	5b 2b       	or	r21, r27
    1464:	da 01       	movw	r26, r20
    1466:	c9 01       	movw	r24, r18
    1468:	8f 77       	andi	r24, 0x7F	; 127
    146a:	90 70       	andi	r25, 0x00	; 0
    146c:	a0 70       	andi	r26, 0x00	; 0
    146e:	b0 70       	andi	r27, 0x00	; 0
    1470:	80 34       	cpi	r24, 0x40	; 64
    1472:	91 05       	cpc	r25, r1
    1474:	a1 05       	cpc	r26, r1
    1476:	b1 05       	cpc	r27, r1
    1478:	39 f4       	brne	.+14     	; 0x1488 <__pack_f+0xee>
    147a:	27 ff       	sbrs	r18, 7
    147c:	09 c0       	rjmp	.+18     	; 0x1490 <__pack_f+0xf6>
    147e:	20 5c       	subi	r18, 0xC0	; 192
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	4f 4f       	sbci	r20, 0xFF	; 255
    1484:	5f 4f       	sbci	r21, 0xFF	; 255
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <__pack_f+0xf6>
    1488:	21 5c       	subi	r18, 0xC1	; 193
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	4f 4f       	sbci	r20, 0xFF	; 255
    148e:	5f 4f       	sbci	r21, 0xFF	; 255
    1490:	e0 e0       	ldi	r30, 0x00	; 0
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	20 30       	cpi	r18, 0x00	; 0
    1496:	a0 e0       	ldi	r26, 0x00	; 0
    1498:	3a 07       	cpc	r19, r26
    149a:	a0 e0       	ldi	r26, 0x00	; 0
    149c:	4a 07       	cpc	r20, r26
    149e:	a0 e4       	ldi	r26, 0x40	; 64
    14a0:	5a 07       	cpc	r21, r26
    14a2:	10 f0       	brcs	.+4      	; 0x14a8 <__pack_f+0x10e>
    14a4:	e1 e0       	ldi	r30, 0x01	; 1
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	79 01       	movw	r14, r18
    14aa:	8a 01       	movw	r16, r20
    14ac:	27 c0       	rjmp	.+78     	; 0x14fc <__pack_f+0x162>
    14ae:	60 38       	cpi	r22, 0x80	; 128
    14b0:	71 05       	cpc	r23, r1
    14b2:	64 f5       	brge	.+88     	; 0x150c <__pack_f+0x172>
    14b4:	fb 01       	movw	r30, r22
    14b6:	e1 58       	subi	r30, 0x81	; 129
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	d8 01       	movw	r26, r16
    14bc:	c7 01       	movw	r24, r14
    14be:	8f 77       	andi	r24, 0x7F	; 127
    14c0:	90 70       	andi	r25, 0x00	; 0
    14c2:	a0 70       	andi	r26, 0x00	; 0
    14c4:	b0 70       	andi	r27, 0x00	; 0
    14c6:	80 34       	cpi	r24, 0x40	; 64
    14c8:	91 05       	cpc	r25, r1
    14ca:	a1 05       	cpc	r26, r1
    14cc:	b1 05       	cpc	r27, r1
    14ce:	39 f4       	brne	.+14     	; 0x14de <__pack_f+0x144>
    14d0:	e7 fe       	sbrs	r14, 7
    14d2:	0d c0       	rjmp	.+26     	; 0x14ee <__pack_f+0x154>
    14d4:	80 e4       	ldi	r24, 0x40	; 64
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a0 e0       	ldi	r26, 0x00	; 0
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <__pack_f+0x14c>
    14de:	8f e3       	ldi	r24, 0x3F	; 63
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a0 e0       	ldi	r26, 0x00	; 0
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e8 0e       	add	r14, r24
    14e8:	f9 1e       	adc	r15, r25
    14ea:	0a 1f       	adc	r16, r26
    14ec:	1b 1f       	adc	r17, r27
    14ee:	17 ff       	sbrs	r17, 7
    14f0:	05 c0       	rjmp	.+10     	; 0x14fc <__pack_f+0x162>
    14f2:	16 95       	lsr	r17
    14f4:	07 95       	ror	r16
    14f6:	f7 94       	ror	r15
    14f8:	e7 94       	ror	r14
    14fa:	31 96       	adiw	r30, 0x01	; 1
    14fc:	87 e0       	ldi	r24, 0x07	; 7
    14fe:	16 95       	lsr	r17
    1500:	07 95       	ror	r16
    1502:	f7 94       	ror	r15
    1504:	e7 94       	ror	r14
    1506:	8a 95       	dec	r24
    1508:	d1 f7       	brne	.-12     	; 0x14fe <__pack_f+0x164>
    150a:	05 c0       	rjmp	.+10     	; 0x1516 <__pack_f+0x17c>
    150c:	ee 24       	eor	r14, r14
    150e:	ff 24       	eor	r15, r15
    1510:	87 01       	movw	r16, r14
    1512:	ef ef       	ldi	r30, 0xFF	; 255
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	6e 2f       	mov	r22, r30
    1518:	67 95       	ror	r22
    151a:	66 27       	eor	r22, r22
    151c:	67 95       	ror	r22
    151e:	90 2f       	mov	r25, r16
    1520:	9f 77       	andi	r25, 0x7F	; 127
    1522:	d7 94       	ror	r13
    1524:	dd 24       	eor	r13, r13
    1526:	d7 94       	ror	r13
    1528:	8e 2f       	mov	r24, r30
    152a:	86 95       	lsr	r24
    152c:	49 2f       	mov	r20, r25
    152e:	46 2b       	or	r20, r22
    1530:	58 2f       	mov	r21, r24
    1532:	5d 29       	or	r21, r13
    1534:	b7 01       	movw	r22, r14
    1536:	ca 01       	movw	r24, r20
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	df 90       	pop	r13
    1542:	08 95       	ret

00001544 <__unpack_f>:
    1544:	fc 01       	movw	r30, r24
    1546:	db 01       	movw	r26, r22
    1548:	40 81       	ld	r20, Z
    154a:	51 81       	ldd	r21, Z+1	; 0x01
    154c:	22 81       	ldd	r18, Z+2	; 0x02
    154e:	62 2f       	mov	r22, r18
    1550:	6f 77       	andi	r22, 0x7F	; 127
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	22 1f       	adc	r18, r18
    1556:	22 27       	eor	r18, r18
    1558:	22 1f       	adc	r18, r18
    155a:	93 81       	ldd	r25, Z+3	; 0x03
    155c:	89 2f       	mov	r24, r25
    155e:	88 0f       	add	r24, r24
    1560:	82 2b       	or	r24, r18
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	99 1f       	adc	r25, r25
    1568:	99 27       	eor	r25, r25
    156a:	99 1f       	adc	r25, r25
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	9c 93       	st	X, r25
    1570:	11 97       	sbiw	r26, 0x01	; 1
    1572:	21 15       	cp	r18, r1
    1574:	31 05       	cpc	r19, r1
    1576:	a9 f5       	brne	.+106    	; 0x15e2 <__unpack_f+0x9e>
    1578:	41 15       	cp	r20, r1
    157a:	51 05       	cpc	r21, r1
    157c:	61 05       	cpc	r22, r1
    157e:	71 05       	cpc	r23, r1
    1580:	11 f4       	brne	.+4      	; 0x1586 <__unpack_f+0x42>
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	37 c0       	rjmp	.+110    	; 0x15f4 <__unpack_f+0xb0>
    1586:	82 e8       	ldi	r24, 0x82	; 130
    1588:	9f ef       	ldi	r25, 0xFF	; 255
    158a:	13 96       	adiw	r26, 0x03	; 3
    158c:	9c 93       	st	X, r25
    158e:	8e 93       	st	-X, r24
    1590:	12 97       	sbiw	r26, 0x02	; 2
    1592:	9a 01       	movw	r18, r20
    1594:	ab 01       	movw	r20, r22
    1596:	67 e0       	ldi	r22, 0x07	; 7
    1598:	22 0f       	add	r18, r18
    159a:	33 1f       	adc	r19, r19
    159c:	44 1f       	adc	r20, r20
    159e:	55 1f       	adc	r21, r21
    15a0:	6a 95       	dec	r22
    15a2:	d1 f7       	brne	.-12     	; 0x1598 <__unpack_f+0x54>
    15a4:	83 e0       	ldi	r24, 0x03	; 3
    15a6:	8c 93       	st	X, r24
    15a8:	0d c0       	rjmp	.+26     	; 0x15c4 <__unpack_f+0x80>
    15aa:	22 0f       	add	r18, r18
    15ac:	33 1f       	adc	r19, r19
    15ae:	44 1f       	adc	r20, r20
    15b0:	55 1f       	adc	r21, r21
    15b2:	12 96       	adiw	r26, 0x02	; 2
    15b4:	8d 91       	ld	r24, X+
    15b6:	9c 91       	ld	r25, X
    15b8:	13 97       	sbiw	r26, 0x03	; 3
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	13 96       	adiw	r26, 0x03	; 3
    15be:	9c 93       	st	X, r25
    15c0:	8e 93       	st	-X, r24
    15c2:	12 97       	sbiw	r26, 0x02	; 2
    15c4:	20 30       	cpi	r18, 0x00	; 0
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	38 07       	cpc	r19, r24
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	48 07       	cpc	r20, r24
    15ce:	80 e4       	ldi	r24, 0x40	; 64
    15d0:	58 07       	cpc	r21, r24
    15d2:	58 f3       	brcs	.-42     	; 0x15aa <__unpack_f+0x66>
    15d4:	14 96       	adiw	r26, 0x04	; 4
    15d6:	2d 93       	st	X+, r18
    15d8:	3d 93       	st	X+, r19
    15da:	4d 93       	st	X+, r20
    15dc:	5c 93       	st	X, r21
    15de:	17 97       	sbiw	r26, 0x07	; 7
    15e0:	08 95       	ret
    15e2:	2f 3f       	cpi	r18, 0xFF	; 255
    15e4:	31 05       	cpc	r19, r1
    15e6:	79 f4       	brne	.+30     	; 0x1606 <__unpack_f+0xc2>
    15e8:	41 15       	cp	r20, r1
    15ea:	51 05       	cpc	r21, r1
    15ec:	61 05       	cpc	r22, r1
    15ee:	71 05       	cpc	r23, r1
    15f0:	19 f4       	brne	.+6      	; 0x15f8 <__unpack_f+0xb4>
    15f2:	84 e0       	ldi	r24, 0x04	; 4
    15f4:	8c 93       	st	X, r24
    15f6:	08 95       	ret
    15f8:	64 ff       	sbrs	r22, 4
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <__unpack_f+0xbe>
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	8c 93       	st	X, r24
    1600:	12 c0       	rjmp	.+36     	; 0x1626 <__unpack_f+0xe2>
    1602:	1c 92       	st	X, r1
    1604:	10 c0       	rjmp	.+32     	; 0x1626 <__unpack_f+0xe2>
    1606:	2f 57       	subi	r18, 0x7F	; 127
    1608:	30 40       	sbci	r19, 0x00	; 0
    160a:	13 96       	adiw	r26, 0x03	; 3
    160c:	3c 93       	st	X, r19
    160e:	2e 93       	st	-X, r18
    1610:	12 97       	sbiw	r26, 0x02	; 2
    1612:	83 e0       	ldi	r24, 0x03	; 3
    1614:	8c 93       	st	X, r24
    1616:	87 e0       	ldi	r24, 0x07	; 7
    1618:	44 0f       	add	r20, r20
    161a:	55 1f       	adc	r21, r21
    161c:	66 1f       	adc	r22, r22
    161e:	77 1f       	adc	r23, r23
    1620:	8a 95       	dec	r24
    1622:	d1 f7       	brne	.-12     	; 0x1618 <__unpack_f+0xd4>
    1624:	70 64       	ori	r23, 0x40	; 64
    1626:	14 96       	adiw	r26, 0x04	; 4
    1628:	4d 93       	st	X+, r20
    162a:	5d 93       	st	X+, r21
    162c:	6d 93       	st	X+, r22
    162e:	7c 93       	st	X, r23
    1630:	17 97       	sbiw	r26, 0x07	; 7
    1632:	08 95       	ret

00001634 <__fpcmp_parts_f>:
    1634:	1f 93       	push	r17
    1636:	dc 01       	movw	r26, r24
    1638:	fb 01       	movw	r30, r22
    163a:	9c 91       	ld	r25, X
    163c:	92 30       	cpi	r25, 0x02	; 2
    163e:	08 f4       	brcc	.+2      	; 0x1642 <__fpcmp_parts_f+0xe>
    1640:	47 c0       	rjmp	.+142    	; 0x16d0 <__fpcmp_parts_f+0x9c>
    1642:	80 81       	ld	r24, Z
    1644:	82 30       	cpi	r24, 0x02	; 2
    1646:	08 f4       	brcc	.+2      	; 0x164a <__fpcmp_parts_f+0x16>
    1648:	43 c0       	rjmp	.+134    	; 0x16d0 <__fpcmp_parts_f+0x9c>
    164a:	94 30       	cpi	r25, 0x04	; 4
    164c:	51 f4       	brne	.+20     	; 0x1662 <__fpcmp_parts_f+0x2e>
    164e:	11 96       	adiw	r26, 0x01	; 1
    1650:	1c 91       	ld	r17, X
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	99 f5       	brne	.+102    	; 0x16bc <__fpcmp_parts_f+0x88>
    1656:	81 81       	ldd	r24, Z+1	; 0x01
    1658:	68 2f       	mov	r22, r24
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	61 1b       	sub	r22, r17
    165e:	71 09       	sbc	r23, r1
    1660:	3f c0       	rjmp	.+126    	; 0x16e0 <__fpcmp_parts_f+0xac>
    1662:	84 30       	cpi	r24, 0x04	; 4
    1664:	21 f0       	breq	.+8      	; 0x166e <__fpcmp_parts_f+0x3a>
    1666:	92 30       	cpi	r25, 0x02	; 2
    1668:	31 f4       	brne	.+12     	; 0x1676 <__fpcmp_parts_f+0x42>
    166a:	82 30       	cpi	r24, 0x02	; 2
    166c:	b9 f1       	breq	.+110    	; 0x16dc <__fpcmp_parts_f+0xa8>
    166e:	81 81       	ldd	r24, Z+1	; 0x01
    1670:	88 23       	and	r24, r24
    1672:	89 f1       	breq	.+98     	; 0x16d6 <__fpcmp_parts_f+0xa2>
    1674:	2d c0       	rjmp	.+90     	; 0x16d0 <__fpcmp_parts_f+0x9c>
    1676:	11 96       	adiw	r26, 0x01	; 1
    1678:	1c 91       	ld	r17, X
    167a:	11 97       	sbiw	r26, 0x01	; 1
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	f1 f0       	breq	.+60     	; 0x16bc <__fpcmp_parts_f+0x88>
    1680:	81 81       	ldd	r24, Z+1	; 0x01
    1682:	18 17       	cp	r17, r24
    1684:	d9 f4       	brne	.+54     	; 0x16bc <__fpcmp_parts_f+0x88>
    1686:	12 96       	adiw	r26, 0x02	; 2
    1688:	2d 91       	ld	r18, X+
    168a:	3c 91       	ld	r19, X
    168c:	13 97       	sbiw	r26, 0x03	; 3
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	82 17       	cp	r24, r18
    1694:	93 07       	cpc	r25, r19
    1696:	94 f0       	brlt	.+36     	; 0x16bc <__fpcmp_parts_f+0x88>
    1698:	28 17       	cp	r18, r24
    169a:	39 07       	cpc	r19, r25
    169c:	bc f0       	brlt	.+46     	; 0x16cc <__fpcmp_parts_f+0x98>
    169e:	14 96       	adiw	r26, 0x04	; 4
    16a0:	8d 91       	ld	r24, X+
    16a2:	9d 91       	ld	r25, X+
    16a4:	0d 90       	ld	r0, X+
    16a6:	bc 91       	ld	r27, X
    16a8:	a0 2d       	mov	r26, r0
    16aa:	24 81       	ldd	r18, Z+4	; 0x04
    16ac:	35 81       	ldd	r19, Z+5	; 0x05
    16ae:	46 81       	ldd	r20, Z+6	; 0x06
    16b0:	57 81       	ldd	r21, Z+7	; 0x07
    16b2:	28 17       	cp	r18, r24
    16b4:	39 07       	cpc	r19, r25
    16b6:	4a 07       	cpc	r20, r26
    16b8:	5b 07       	cpc	r21, r27
    16ba:	18 f4       	brcc	.+6      	; 0x16c2 <__fpcmp_parts_f+0x8e>
    16bc:	11 23       	and	r17, r17
    16be:	41 f0       	breq	.+16     	; 0x16d0 <__fpcmp_parts_f+0x9c>
    16c0:	0a c0       	rjmp	.+20     	; 0x16d6 <__fpcmp_parts_f+0xa2>
    16c2:	82 17       	cp	r24, r18
    16c4:	93 07       	cpc	r25, r19
    16c6:	a4 07       	cpc	r26, r20
    16c8:	b5 07       	cpc	r27, r21
    16ca:	40 f4       	brcc	.+16     	; 0x16dc <__fpcmp_parts_f+0xa8>
    16cc:	11 23       	and	r17, r17
    16ce:	19 f0       	breq	.+6      	; 0x16d6 <__fpcmp_parts_f+0xa2>
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <__fpcmp_parts_f+0xac>
    16d6:	6f ef       	ldi	r22, 0xFF	; 255
    16d8:	7f ef       	ldi	r23, 0xFF	; 255
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <__fpcmp_parts_f+0xac>
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	cb 01       	movw	r24, r22
    16e2:	1f 91       	pop	r17
    16e4:	08 95       	ret

000016e6 <__divmodhi4>:
    16e6:	97 fb       	bst	r25, 7
    16e8:	09 2e       	mov	r0, r25
    16ea:	07 26       	eor	r0, r23
    16ec:	0a d0       	rcall	.+20     	; 0x1702 <__divmodhi4_neg1>
    16ee:	77 fd       	sbrc	r23, 7
    16f0:	04 d0       	rcall	.+8      	; 0x16fa <__divmodhi4_neg2>
    16f2:	0c d0       	rcall	.+24     	; 0x170c <__udivmodhi4>
    16f4:	06 d0       	rcall	.+12     	; 0x1702 <__divmodhi4_neg1>
    16f6:	00 20       	and	r0, r0
    16f8:	1a f4       	brpl	.+6      	; 0x1700 <__divmodhi4_exit>

000016fa <__divmodhi4_neg2>:
    16fa:	70 95       	com	r23
    16fc:	61 95       	neg	r22
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255

00001700 <__divmodhi4_exit>:
    1700:	08 95       	ret

00001702 <__divmodhi4_neg1>:
    1702:	f6 f7       	brtc	.-4      	; 0x1700 <__divmodhi4_exit>
    1704:	90 95       	com	r25
    1706:	81 95       	neg	r24
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	08 95       	ret

0000170c <__udivmodhi4>:
    170c:	aa 1b       	sub	r26, r26
    170e:	bb 1b       	sub	r27, r27
    1710:	51 e1       	ldi	r21, 0x11	; 17
    1712:	07 c0       	rjmp	.+14     	; 0x1722 <__udivmodhi4_ep>

00001714 <__udivmodhi4_loop>:
    1714:	aa 1f       	adc	r26, r26
    1716:	bb 1f       	adc	r27, r27
    1718:	a6 17       	cp	r26, r22
    171a:	b7 07       	cpc	r27, r23
    171c:	10 f0       	brcs	.+4      	; 0x1722 <__udivmodhi4_ep>
    171e:	a6 1b       	sub	r26, r22
    1720:	b7 0b       	sbc	r27, r23

00001722 <__udivmodhi4_ep>:
    1722:	88 1f       	adc	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	5a 95       	dec	r21
    1728:	a9 f7       	brne	.-22     	; 0x1714 <__udivmodhi4_loop>
    172a:	80 95       	com	r24
    172c:	90 95       	com	r25
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	08 95       	ret

00001734 <__prologue_saves__>:
    1734:	2f 92       	push	r2
    1736:	3f 92       	push	r3
    1738:	4f 92       	push	r4
    173a:	5f 92       	push	r5
    173c:	6f 92       	push	r6
    173e:	7f 92       	push	r7
    1740:	8f 92       	push	r8
    1742:	9f 92       	push	r9
    1744:	af 92       	push	r10
    1746:	bf 92       	push	r11
    1748:	cf 92       	push	r12
    174a:	df 92       	push	r13
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	ca 1b       	sub	r28, r26
    175e:	db 0b       	sbc	r29, r27
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	09 94       	ijmp

0000176c <__epilogue_restores__>:
    176c:	2a 88       	ldd	r2, Y+18	; 0x12
    176e:	39 88       	ldd	r3, Y+17	; 0x11
    1770:	48 88       	ldd	r4, Y+16	; 0x10
    1772:	5f 84       	ldd	r5, Y+15	; 0x0f
    1774:	6e 84       	ldd	r6, Y+14	; 0x0e
    1776:	7d 84       	ldd	r7, Y+13	; 0x0d
    1778:	8c 84       	ldd	r8, Y+12	; 0x0c
    177a:	9b 84       	ldd	r9, Y+11	; 0x0b
    177c:	aa 84       	ldd	r10, Y+10	; 0x0a
    177e:	b9 84       	ldd	r11, Y+9	; 0x09
    1780:	c8 84       	ldd	r12, Y+8	; 0x08
    1782:	df 80       	ldd	r13, Y+7	; 0x07
    1784:	ee 80       	ldd	r14, Y+6	; 0x06
    1786:	fd 80       	ldd	r15, Y+5	; 0x05
    1788:	0c 81       	ldd	r16, Y+4	; 0x04
    178a:	1b 81       	ldd	r17, Y+3	; 0x03
    178c:	aa 81       	ldd	r26, Y+2	; 0x02
    178e:	b9 81       	ldd	r27, Y+1	; 0x01
    1790:	ce 0f       	add	r28, r30
    1792:	d1 1d       	adc	r29, r1
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	ed 01       	movw	r28, r26
    17a0:	08 95       	ret

000017a2 <_exit>:
    17a2:	f8 94       	cli

000017a4 <__stop_program>:
    17a4:	ff cf       	rjmp	.-2      	; 0x17a4 <__stop_program>
