
TriCentering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000014f0  00001584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800110  00800110  00001594  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001d3  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000223a  00000000  00000000  000018c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001077  00000000  00000000  00003b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001521  00000000  00000000  00004b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  0000609c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000468  00000000  00000000  0000626c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009ca  00000000  00000000  000066d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000709e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_23>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ef       	ldi	r30, 0xF0	; 240
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 32       	cpi	r26, 0x28	; 40
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 00 02 	call	0x400	; 0x400 <main>
      9e:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_23>:

	}

}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25

	if (rcving==0) {
      b8:	80 91 16 01 	lds	r24, 0x0116
      bc:	88 23       	and	r24, r24
      be:	81 f4       	brne	.+32     	; 0xe0 <__vector_23+0x3a>

		TCNT2=0;
      c0:	10 92 b2 00 	sts	0x00B2, r1
		rcving=1;
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	80 93 16 01 	sts	0x0116, r24
		rcvd=0x80;
      ca:	80 e8       	ldi	r24, 0x80	; 128
      cc:	80 93 17 01 	sts	0x0117, r24
		ACSR &= ~(1<<ACIS0); // change to falling edge
      d0:	80 b7       	in	r24, 0x30	; 48
      d2:	8e 7f       	andi	r24, 0xFE	; 254
      d4:	80 bf       	out	0x30, r24	; 48
		rcv_sx = 0; // reset success flag
      d6:	10 92 19 01 	sts	0x0119, r1
      da:	10 92 18 01 	sts	0x0118, r1
      de:	9b c0       	rjmp	.+310    	; 0x216 <__vector_23+0x170>
		//PORTB &= ~(1<<PORTB1);
		//PORTB &= ~(1<<PORTB2);

	} else { // first rising edge has been detected (rcving=1)

		if (!(ACSR&(1<<ACIS0))) { // check for first falling edge
      e0:	00 b6       	in	r0, 0x30	; 48
      e2:	00 fc       	sbrc	r0, 0
      e4:	0d c0       	rjmp	.+26     	; 0x100 <__vector_23+0x5a>

			distance = 0;
      e6:	10 92 1a 01 	sts	0x011A, r1
			distance |= TCNT2; // use timer value for distance
      ea:	80 91 1a 01 	lds	r24, 0x011A
      ee:	90 91 b2 00 	lds	r25, 0x00B2
      f2:	98 2b       	or	r25, r24
      f4:	90 93 1a 01 	sts	0x011A, r25
			ACSR |= (1<<ACIS0); // switch back to rising edge
      f8:	80 b7       	in	r24, 0x30	; 48
      fa:	81 60       	ori	r24, 0x01	; 1
      fc:	80 bf       	out	0x30, r24	; 48
      fe:	8b c0       	rjmp	.+278    	; 0x216 <__vector_23+0x170>
		} else { // on subsequent rising edges
			// TODO: add LED debugging for each bit
			//PORTB |= (1<<PORTB0);

			// match rising edges to closest expected time in rcvd
			bit_time = 0;
     100:	10 92 1b 01 	sts	0x011B, r1
			bit_time |= TCNT2; // time that rising edge was detected
     104:	80 91 1b 01 	lds	r24, 0x011B
     108:	90 91 b2 00 	lds	r25, 0x00B2
     10c:	98 2b       	or	r25, r24
     10e:	90 93 1b 01 	sts	0x011B, r25
			
			if ((bit_time>=10)&(bit_time<=17)) { rcvd |= 0x40; }
     112:	80 91 1b 01 	lds	r24, 0x011B
     116:	90 91 1b 01 	lds	r25, 0x011B
     11a:	8a 30       	cpi	r24, 0x0A	; 10
     11c:	30 f0       	brcs	.+12     	; 0x12a <__vector_23+0x84>
     11e:	92 31       	cpi	r25, 0x12	; 18
     120:	20 f4       	brcc	.+8      	; 0x12a <__vector_23+0x84>
     122:	80 91 17 01 	lds	r24, 0x0117
     126:	80 64       	ori	r24, 0x40	; 64
     128:	3b c0       	rjmp	.+118    	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=22)&(bit_time<=29)) { rcvd |= 0x20; }
     12a:	80 91 1b 01 	lds	r24, 0x011B
     12e:	90 91 1b 01 	lds	r25, 0x011B
     132:	86 31       	cpi	r24, 0x16	; 22
     134:	30 f0       	brcs	.+12     	; 0x142 <__vector_23+0x9c>
     136:	9e 31       	cpi	r25, 0x1E	; 30
     138:	20 f4       	brcc	.+8      	; 0x142 <__vector_23+0x9c>
     13a:	80 91 17 01 	lds	r24, 0x0117
     13e:	80 62       	ori	r24, 0x20	; 32
     140:	2f c0       	rjmp	.+94     	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=35)&(bit_time<=42)) { rcvd |= 0x10; }
     142:	80 91 1b 01 	lds	r24, 0x011B
     146:	90 91 1b 01 	lds	r25, 0x011B
     14a:	83 32       	cpi	r24, 0x23	; 35
     14c:	30 f0       	brcs	.+12     	; 0x15a <__vector_23+0xb4>
     14e:	9b 32       	cpi	r25, 0x2B	; 43
     150:	20 f4       	brcc	.+8      	; 0x15a <__vector_23+0xb4>
     152:	80 91 17 01 	lds	r24, 0x0117
     156:	80 61       	ori	r24, 0x10	; 16
     158:	23 c0       	rjmp	.+70     	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=47)&(bit_time<=54)) { rcvd |= 0x08; }
     15a:	80 91 1b 01 	lds	r24, 0x011B
     15e:	90 91 1b 01 	lds	r25, 0x011B
     162:	8f 32       	cpi	r24, 0x2F	; 47
     164:	30 f0       	brcs	.+12     	; 0x172 <__vector_23+0xcc>
     166:	97 33       	cpi	r25, 0x37	; 55
     168:	20 f4       	brcc	.+8      	; 0x172 <__vector_23+0xcc>
     16a:	80 91 17 01 	lds	r24, 0x0117
     16e:	88 60       	ori	r24, 0x08	; 8
     170:	17 c0       	rjmp	.+46     	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=60)&(bit_time<=67)) { rcvd |= 0x04; }
     172:	80 91 1b 01 	lds	r24, 0x011B
     176:	90 91 1b 01 	lds	r25, 0x011B
     17a:	8c 33       	cpi	r24, 0x3C	; 60
     17c:	30 f0       	brcs	.+12     	; 0x18a <__vector_23+0xe4>
     17e:	94 34       	cpi	r25, 0x44	; 68
     180:	20 f4       	brcc	.+8      	; 0x18a <__vector_23+0xe4>
     182:	80 91 17 01 	lds	r24, 0x0117
     186:	84 60       	ori	r24, 0x04	; 4
     188:	0b c0       	rjmp	.+22     	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=72)&(bit_time<=79)) { rcvd |= 0x02; }
     18a:	80 91 1b 01 	lds	r24, 0x011B
     18e:	90 91 1b 01 	lds	r25, 0x011B
     192:	88 34       	cpi	r24, 0x48	; 72
     194:	40 f0       	brcs	.+16     	; 0x1a6 <__vector_23+0x100>
     196:	90 35       	cpi	r25, 0x50	; 80
     198:	30 f4       	brcc	.+12     	; 0x1a6 <__vector_23+0x100>
     19a:	80 91 17 01 	lds	r24, 0x0117
     19e:	82 60       	ori	r24, 0x02	; 2
     1a0:	80 93 17 01 	sts	0x0117, r24
     1a4:	38 c0       	rjmp	.+112    	; 0x216 <__vector_23+0x170>
			else if ((bit_time>=85)&(bit_time<=92)) { // eighth bit has been received
     1a6:	80 91 1b 01 	lds	r24, 0x011B
     1aa:	90 91 1b 01 	lds	r25, 0x011B
     1ae:	85 35       	cpi	r24, 0x55	; 85
     1b0:	60 f1       	brcs	.+88     	; 0x20a <__vector_23+0x164>
     1b2:	9d 35       	cpi	r25, 0x5D	; 93
     1b4:	50 f5       	brcc	.+84     	; 0x20a <__vector_23+0x164>
				rcvd |= 0x01; 
     1b6:	80 91 17 01 	lds	r24, 0x0117
     1ba:	81 60       	ori	r24, 0x01	; 1
     1bc:	80 93 17 01 	sts	0x0117, r24
				rcv_sx = 1;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	90 93 19 01 	sts	0x0119, r25
     1c8:	80 93 18 01 	sts	0x0118, r24
				lastRcv = 0;
     1cc:	10 92 1c 01 	sts	0x011C, r1
				lastRcv |= rcvd; // store message
     1d0:	90 91 1c 01 	lds	r25, 0x011C
     1d4:	80 91 17 01 	lds	r24, 0x0117
     1d8:	89 2b       	or	r24, r25
     1da:	80 93 1c 01 	sts	0x011C, r24
				//PORTB |= (1<<PORTB1);
				//PORTB &= ~(1<<PORTB0);
				//if (lastRcv==toRcv1) { PORTB |= (1<<PORTB2); }
				//if (lastRcv==toRcv2) { PORTB |= (1<<PORTB0); }

				rcv_time = 0;
     1de:	10 92 1e 01 	sts	0x011E, r1
     1e2:	10 92 1d 01 	sts	0x011D, r1
				rcv_time |= TCNT1;
     1e6:	80 91 1d 01 	lds	r24, 0x011D
     1ea:	90 91 1e 01 	lds	r25, 0x011E
     1ee:	20 91 84 00 	lds	r18, 0x0084
     1f2:	30 91 85 00 	lds	r19, 0x0085
     1f6:	82 2b       	or	r24, r18
     1f8:	93 2b       	or	r25, r19
     1fa:	90 93 1e 01 	sts	0x011E, r25
     1fe:	80 93 1d 01 	sts	0x011D, r24
				TCNT1 = 0; // reset timer1 on received messages
     202:	10 92 85 00 	sts	0x0085, r1
     206:	10 92 84 00 	sts	0x0084, r1
				rcving = 0; // reset receiving variables
				TCNT2 = 0;
				rcvd = 0;

			}  else { // bad rising edge means message is bad, discard and reset
				rcving = 0; // reset receiving variables
     20a:	10 92 16 01 	sts	0x0116, r1
				TCNT2 = 0;
     20e:	10 92 b2 00 	sts	0x00B2, r1
				rcvd = 0;
     212:	10 92 17 01 	sts	0x0117, r1
	/* while(ACSR & (1<<ACO)) {
		PORTB |= (1<<PORTB0);
	}
	PORTB &= ~(1<<PORTB0); */

} 
     216:	9f 91       	pop	r25
     218:	8f 91       	pop	r24
     21a:	3f 91       	pop	r19
     21c:	2f 91       	pop	r18
     21e:	0f 90       	pop	r0
     220:	0f be       	out	0x3f, r0	; 63
     222:	0f 90       	pop	r0
     224:	1f 90       	pop	r1
     226:	18 95       	reti

00000228 <__vector_7>:

// reset routine for message reception
ISR(TIMER2_COMPA_vect) { // timer2 interrupt routine
     228:	1f 92       	push	r1
     22a:	0f 92       	push	r0
     22c:	0f b6       	in	r0, 0x3f	; 63
     22e:	0f 92       	push	r0
     230:	11 24       	eor	r1, r1

	rcving = 0;
     232:	10 92 16 01 	sts	0x0116, r1
	rcvd = 0;
     236:	10 92 17 01 	sts	0x0117, r1
	//PORTB &= ~(1<<PORTB0);
	//PORTB &= ~(1<<PORTB1);

}
     23a:	0f 90       	pop	r0
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	0f 90       	pop	r0
     240:	1f 90       	pop	r1
     242:	18 95       	reti

00000244 <__vector_14>:

// routine for timer0 to send messages, pause for a longer time between messages
ISR(TIMER0_COMPA_vect) { // timer0 interrupt routine
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	2f 93       	push	r18
     250:	3f 93       	push	r19
     252:	4f 93       	push	r20
     254:	5f 93       	push	r21
     256:	6f 93       	push	r22
     258:	7f 93       	push	r23
     25a:	8f 93       	push	r24
     25c:	9f 93       	push	r25
     25e:	ef 93       	push	r30
     260:	ff 93       	push	r31

	if (bits_sent<8) { // if the whole message has not been sent
     262:	80 91 10 01 	lds	r24, 0x0110
     266:	90 91 11 01 	lds	r25, 0x0111
     26a:	08 97       	sbiw	r24, 0x08	; 8
     26c:	0c f0       	brlt	.+2      	; 0x270 <__vector_14+0x2c>
     26e:	40 c0       	rjmp	.+128    	; 0x2f0 <__vector_14+0xac>
		if (pause==0) { // 0,1 half of bit to be sent
     270:	80 91 12 01 	lds	r24, 0x0112
     274:	90 91 13 01 	lds	r25, 0x0113
     278:	89 2b       	or	r24, r25
     27a:	a1 f5       	brne	.+104    	; 0x2e4 <__vector_14+0xa0>
			new_bit = (toSend & (1<<(7-bits_sent))) >> (7-bits_sent);
     27c:	40 91 00 01 	lds	r20, 0x0100
     280:	80 91 10 01 	lds	r24, 0x0110
     284:	90 91 11 01 	lds	r25, 0x0111
     288:	e0 91 10 01 	lds	r30, 0x0110
     28c:	f0 91 11 01 	lds	r31, 0x0111
     290:	27 e0       	ldi	r18, 0x07	; 7
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	b9 01       	movw	r22, r18
     296:	68 1b       	sub	r22, r24
     298:	79 0b       	sbc	r23, r25
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <__vector_14+0x60>
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	6a 95       	dec	r22
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <__vector_14+0x5c>
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	84 23       	and	r24, r20
     2ac:	95 23       	and	r25, r21
     2ae:	2e 1b       	sub	r18, r30
     2b0:	3f 0b       	sbc	r19, r31
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <__vector_14+0x74>
     2b4:	95 95       	asr	r25
     2b6:	87 95       	ror	r24
     2b8:	2a 95       	dec	r18
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <__vector_14+0x70>
     2bc:	90 93 15 01 	sts	0x0115, r25
     2c0:	80 93 14 01 	sts	0x0114, r24
			if(new_bit==1) { // turn on LEDs
     2c4:	80 91 14 01 	lds	r24, 0x0114
     2c8:	90 91 15 01 	lds	r25, 0x0115
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	11 f4       	brne	.+4      	; 0x2d4 <__vector_14+0x90>
				PORTC |= (1<<PORTC3);
     2d0:	43 9a       	sbi	0x08, 3	; 8
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <__vector_14+0x92>
				//PORTB |= (1<<PORTB2);
			} else { // turn off LEDs
				PORTC &= ~(1<<PORTC3);
     2d4:	43 98       	cbi	0x08, 3	; 8
				//PORTB &= ~(1<<PORTB2);
			}
			pause = 1; // pause after sending a bit
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	90 93 13 01 	sts	0x0113, r25
     2de:	80 93 12 01 	sts	0x0112, r24
     2e2:	1a c0       	rjmp	.+52     	; 0x318 <__vector_14+0xd4>
		} else { // pausing between bits
			pause = 0; // send new bit on next interrupt
     2e4:	10 92 13 01 	sts	0x0113, r1
     2e8:	10 92 12 01 	sts	0x0112, r1
			PORTC &= ~(1<<PORTC3); // ensure LEDs are low for pause
     2ec:	43 98       	cbi	0x08, 3	; 8
     2ee:	0b c0       	rjmp	.+22     	; 0x306 <__vector_14+0xc2>
			//PORTB &= ~(1<<PORTB2);
			bits_sent += 1; // increment bits_sent after each pause
		}
	} else { // if bits_sent >= 8, reset variables and pause for a bit
		if (bits_sent>=40) { // wait for 2 messages, send again
     2f0:	80 91 10 01 	lds	r24, 0x0110
     2f4:	90 91 11 01 	lds	r25, 0x0111
     2f8:	88 97       	sbiw	r24, 0x28	; 40
     2fa:	2c f0       	brlt	.+10     	; 0x306 <__vector_14+0xc2>
			bits_sent = 0; 
     2fc:	10 92 11 01 	sts	0x0111, r1
     300:	10 92 10 01 	sts	0x0110, r1
     304:	09 c0       	rjmp	.+18     	; 0x318 <__vector_14+0xd4>
		} else {
			bits_sent+=1; // increment bits_sent for timing between messages
     306:	80 91 10 01 	lds	r24, 0x0110
     30a:	90 91 11 01 	lds	r25, 0x0111
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	90 93 11 01 	sts	0x0111, r25
     314:	80 93 10 01 	sts	0x0110, r24
		}
		
		// TODO: could disable ISR here, for send_msg function?
	}

}
     318:	ff 91       	pop	r31
     31a:	ef 91       	pop	r30
     31c:	9f 91       	pop	r25
     31e:	8f 91       	pop	r24
     320:	7f 91       	pop	r23
     322:	6f 91       	pop	r22
     324:	5f 91       	pop	r21
     326:	4f 91       	pop	r20
     328:	3f 91       	pop	r19
     32a:	2f 91       	pop	r18
     32c:	0f 90       	pop	r0
     32e:	0f be       	out	0x3f, r0	; 63
     330:	0f 90       	pop	r0
     332:	1f 90       	pop	r1
     334:	18 95       	reti

00000336 <detach>:

// "move" by detaching magnet for a specified time in ms
void detach(double time) {
     336:	af 92       	push	r10
     338:	bf 92       	push	r11
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	5b 01       	movw	r10, r22
     348:	6c 01       	movw	r12, r24

	//switch E.P.M. direction 1 (detach)
	//PORTB |= (1<<PORTB0); // set inner LED, indicating direction 1
	PORTB |= (1<<6);//activate E.P.M direction 1
     34a:	2e 9a       	sbi	0x05, 6	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     34c:	80 ef       	ldi	r24, 0xF0	; 240
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <detach+0x1a>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     354:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     356:	2f 98       	cbi	0x05, 7	; 5
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     358:	c6 01       	movw	r24, r12
     35a:	b5 01       	movw	r22, r10
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	4a ef       	ldi	r20, 0xFA	; 250
     362:	54 e4       	ldi	r21, 0x44	; 68
     364:	0e 94 94 06 	call	0xd28	; 0xd28 <__mulsf3>
     368:	7b 01       	movw	r14, r22
     36a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	40 e8       	ldi	r20, 0x80	; 128
     372:	5f e3       	ldi	r21, 0x3F	; 63
     374:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__ltsf2>
     378:	88 23       	and	r24, r24
     37a:	1c f4       	brge	.+6      	; 0x382 <detach+0x4c>
     37c:	61 e0       	ldi	r22, 0x01	; 1
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	24 c0       	rjmp	.+72     	; 0x3ca <detach+0x94>
		__ticks = 1;
	else if (__tmp > 65535)
     382:	c8 01       	movw	r24, r16
     384:	b7 01       	movw	r22, r14
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	3f ef       	ldi	r19, 0xFF	; 255
     38a:	4f e7       	ldi	r20, 0x7F	; 127
     38c:	57 e4       	ldi	r21, 0x47	; 71
     38e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__gtsf2>
     392:	18 16       	cp	r1, r24
     394:	b4 f4       	brge	.+44     	; 0x3c2 <detach+0x8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     396:	c6 01       	movw	r24, r12
     398:	b5 01       	movw	r22, r10
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e2       	ldi	r20, 0x20	; 32
     3a0:	51 e4       	ldi	r21, 0x41	; 65
     3a2:	0e 94 94 06 	call	0xd28	; 0xd28 <__mulsf3>
     3a6:	0e 94 be 04 	call	0x97c	; 0x97c <__fixunssfsi>
     3aa:	88 ec       	ldi	r24, 0xC8	; 200
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	05 c0       	rjmp	.+10     	; 0x3ba <detach+0x84>
     3b0:	fc 01       	movw	r30, r24
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <detach+0x7c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3b6:	61 50       	subi	r22, 0x01	; 1
     3b8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ba:	61 15       	cp	r22, r1
     3bc:	71 05       	cpc	r23, r1
     3be:	c1 f7       	brne	.-16     	; 0x3b0 <detach+0x7a>
     3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <detach+0x9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3c2:	c8 01       	movw	r24, r16
     3c4:	b7 01       	movw	r22, r14
     3c6:	0e 94 be 04 	call	0x97c	; 0x97c <__fixunssfsi>
     3ca:	cb 01       	movw	r24, r22
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <detach+0x96>

	_delay_ms(time); // stay detached for desired time

	//switch E.P.M. direction 2 (re-attach)
	//PORTB &= ~(1<<PORTB0); // clear inner LED, indicating direction 2
	PORTB |= (1<<7);//activate E.P.M direction 2
     3d0:	2f 9a       	sbi	0x05, 7	; 5
     3d2:	80 ef       	ldi	r24, 0xF0	; 240
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <detach+0xa0>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     3da:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     3dc:	2f 98       	cbi	0x05, 7	; 5

	return;
}
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	bf 90       	pop	r11
     3ec:	af 90       	pop	r10
     3ee:	08 95       	ret

000003f0 <reset_EPM>:
// reset EPM in case of robot/code malfunction
void reset_EPM(void) {

	//switch E.P.M. direction 2 (re-attach)
	//PORTB &= ~(1<<PORTB0); // clear inner LED, indicating direction 2
	PORTB |= (1<<7);//activate E.P.M direction 2
     3f0:	2f 9a       	sbi	0x05, 7	; 5
     3f2:	80 ef       	ldi	r24, 0xF0	; 240
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	01 97       	sbiw	r24, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <reset_EPM+0x6>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     3fa:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     3fc:	2f 98       	cbi	0x05, 7	; 5

	return;

}
     3fe:	08 95       	ret

00000400 <main>:
static volatile int beaconID3_time = 0;
static volatile char beacons_rcvd = 0;
static volatile char desired_beacon = 0;
static volatile int center_threshold = 100;

int main(void) {
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29

	DDRB=0;
     40c:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
     40e:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
     410:	87 e0       	ldi	r24, 0x07	; 7
     412:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7); // enable EPM pins
     414:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
     416:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
     418:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
     41a:	2f 98       	cbi	0x05, 7	; 5

	DDRC=0; // enable IR LED
     41c:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
     41e:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
     420:	88 e0       	ldi	r24, 0x08	; 8
     422:	87 b9       	out	0x07, r24	; 7

	cli(); // disable interrupts
     424:	f8 94       	cli

	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
     42c:	8b e0       	ldi	r24, 0x0B	; 11
     42e:	80 bf       	out	0x30, r24	; 48

	// Initialize timer0 for timing sending of messages (1/8 prescaler, 8-bit timer rolls over at ~3.9 kHz Hz)
	TCCR0A |= (1<<WGM01); // // do not change any output pin, clear at compare match with OCR0A
     430:	84 b5       	in	r24, 0x24	; 36
     432:	82 60       	ori	r24, 0x02	; 2
     434:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0<<CS02)|(1<<CS01)|(0<<CS00); // prescaler of 1/8
     436:	85 b5       	in	r24, 0x25	; 37
     438:	82 60       	ori	r24, 0x02	; 2
     43a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 100; // interrupt every 100 counts, for sending a new bit every 2 cycles
     43c:	84 e6       	ldi	r24, 0x64	; 100
     43e:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
     440:	80 91 6e 00 	lds	r24, 0x006E
     444:	82 60       	ori	r24, 0x02	; 2
     446:	80 93 6e 00 	sts	0x006E, r24

	// Initialize timer1 for neighbor-marking, based on times of received messages
	TCCR1B |= (1<<CS12)|(0<<CS11)|(1<<CS10); // 1/1024 prescaler, counts at ~7.8kHz (1 count is 0.128 ms), 16-bit timer
     44a:	80 91 81 00 	lds	r24, 0x0081
     44e:	85 60       	ori	r24, 0x05	; 5
     450:	80 93 81 00 	sts	0x0081, r24

	// Initialize timer2 for timing receiving of messages (1/128 prescaler, 8-bit timer rolls over at ~250 Hz )
	TCCR2A |= (1<<WGM21); // do not change any output pin, clear at compare match with OCR2A
     454:	80 91 b0 00 	lds	r24, 0x00B0
     458:	82 60       	ori	r24, 0x02	; 2
     45a:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = (1<<OCIE2A); // compare match on OCR2A
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	80 93 70 00 	sts	0x0070, r24
    OCR2A = 200; // compare every 200 counts (every 3.2ms, 2x length of message)
     464:	88 ec       	ldi	r24, 0xC8	; 200
     466:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= (1<<CS22)|(0<<CS21)|(1<<CS20); // prescaler of 1/128: count every 16us
     46a:	80 91 b1 00 	lds	r24, 0x00B1
     46e:	85 60       	ori	r24, 0x05	; 5
     470:	80 93 b1 00 	sts	0x00B1, r24

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
     474:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
     476:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
     478:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<PORTC3);
     47a:	43 9a       	sbi	0x08, 3	; 8
     47c:	80 ed       	ldi	r24, 0xD0	; 208
     47e:	97 e0       	ldi	r25, 0x07	; 7
     480:	28 ec       	ldi	r18, 0xC8	; 200
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	f9 01       	movw	r30, r18
     486:	31 97       	sbiw	r30, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <main+0x86>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     48a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     48c:	d9 f7       	brne	.-10     	; 0x484 <main+0x84>
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
     48e:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     490:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
     492:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1<<PORTC3);
     494:	43 98       	cbi	0x08, 3	; 8

	// make sure EPM is activated at startup
	reset_EPM();
     496:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <reset_EPM>
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	48 ec       	ldi	r20, 0xC8	; 200
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	0b c0       	rjmp	.+22     	; 0x4ba <main+0xba>
     4a4:	fa 01       	movw	r30, r20
     4a6:	31 97       	sbiw	r30, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <main+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ac:	d9 f7       	brne	.-10     	; 0x4a4 <main+0xa4>
	// wait here for a time (~30s) until all modules are spinning, then blink LEDs again
	int ww=0;
	while (ww<300) {

		_delay_ms(100);
		ww+=1;
     4ae:	2f 5f       	subi	r18, 0xFF	; 255
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
	// make sure EPM is activated at startup
	reset_EPM();

	// wait here for a time (~30s) until all modules are spinning, then blink LEDs again
	int ww=0;
	while (ww<300) {
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	2c 32       	cpi	r18, 0x2C	; 44
     4b6:	38 07       	cpc	r19, r24
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <main+0xc0>
     4ba:	88 ee       	ldi	r24, 0xE8	; 232
     4bc:	93 e0       	ldi	r25, 0x03	; 3
     4be:	f2 cf       	rjmp	.-28     	; 0x4a4 <main+0xa4>
		_delay_ms(100);
		ww+=1;

	}

	PORTB |= (1<<PORTB0); // green
     4c0:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
     4c2:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
     4c4:	2a 9a       	sbi	0x05, 2	; 5
     4c6:	80 ed       	ldi	r24, 0xD0	; 208
     4c8:	97 e0       	ldi	r25, 0x07	; 7
     4ca:	28 ec       	ldi	r18, 0xC8	; 200
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	f9 01       	movw	r30, r18
     4d0:	31 97       	sbiw	r30, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <main+0xd0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d6:	d9 f7       	brne	.-10     	; 0x4ce <main+0xce>
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
     4d8:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     4da:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
     4dc:	2a 98       	cbi	0x05, 2	; 5

	// turn on LED corresponing to beacon number
	if (toSend==beaconID1) { PORTB |= (1<<PORTB0); }
     4de:	90 91 00 01 	lds	r25, 0x0100
     4e2:	80 91 01 01 	lds	r24, 0x0101
     4e6:	98 17       	cp	r25, r24
     4e8:	09 f4       	brne	.+2      	; 0x4ec <main+0xec>
     4ea:	28 9a       	sbi	0x05, 0	; 5
	if (toSend==beaconID2) { PORTB |= (1<<PORTB1); }
     4ec:	90 91 00 01 	lds	r25, 0x0100
     4f0:	80 91 02 01 	lds	r24, 0x0102
     4f4:	98 17       	cp	r25, r24
     4f6:	09 f4       	brne	.+2      	; 0x4fa <main+0xfa>
     4f8:	29 9a       	sbi	0x05, 1	; 5
	if (toSend==beaconID3) { PORTB |= (1<<PORTB2); }
     4fa:	90 91 00 01 	lds	r25, 0x0100
     4fe:	80 91 03 01 	lds	r24, 0x0103
     502:	98 17       	cp	r25, r24
     504:	09 f4       	brne	.+2      	; 0x508 <main+0x108>
     506:	2a 9a       	sbi	0x05, 2	; 5

	sei(); // enable interrupts
     508:	78 94       	sei
	int per = 0;
	//int cur_time = 0;
	int detach_time = 0;
	int dd = 0;

	rcv_ct = 10;
     50a:	8a e0       	ldi	r24, 0x0A	; 10
     50c:	80 93 1f 01 	sts	0x011F, r24
     510:	c8 ec       	ldi	r28, 0xC8	; 200
     512:	d0 e0       	ldi	r29, 0x00	; 0
							cli();
							PORTB |= (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2); 
						}
					}

					beacons_rcvd=4; // indicated that direction of motion has been decided
     514:	14 e0       	ldi	r17, 0x04	; 4
						}
					}
					else if (lastRcv==beaconID3) { // if other two times are not zero, store time and add to beacons rcvd; else ignore
						if ((beacons_rcvd==2) && (beaconID1_time>0) && (beaconID2_time>0)) {
							beaconID3_time |= rcv_time;
							beacons_rcvd = 3;
     516:	03 e0       	ldi	r16, 0x03	; 3
						}
					}
					else if (lastRcv==beaconID2) { // if time3 is zero and time1 is not 0, store time and add to beacons rcvd; else ignore
						if ((beacons_rcvd==1) && (beaconID3_time==0) && (beaconID1_time>0)) {
							beaconID2_time |= rcv_time;
							beacons_rcvd = 2;
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	f8 2e       	mov	r15, r24

				if (beacons_rcvd < 3) { // store times from the three beacons in a row
					if (lastRcv==beaconID1) { // if other two times are 0, store time and add to beacons rcvd; else reset
						if ((beacons_rcvd==0) && (beaconID2_time==0) && (beaconID3_time==0)) {
							beaconID1_time |= rcv_time;
							beacons_rcvd = 1;
     51c:	ee 24       	eor	r14, r14
     51e:	e3 94       	inc	r14

	rcv_ct = 10;
	
	while(1) { // main loop

		if (toSend==mobileID) { // don't bother trying to track beacons if you are not the mobile robot
     520:	90 91 00 01 	lds	r25, 0x0100
     524:	80 91 04 01 	lds	r24, 0x0104
     528:	98 17       	cp	r25, r24
     52a:	d1 f7       	brne	.-12     	; 0x520 <main+0x120>
		
			// take 10 messages to calculate period		
			if ((rcv_sx==1) && (rcv_ct<10)) {
     52c:	80 91 18 01 	lds	r24, 0x0118
     530:	90 91 19 01 	lds	r25, 0x0119
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	21 f5       	brne	.+72     	; 0x580 <main+0x180>
     538:	80 91 1f 01 	lds	r24, 0x011F
     53c:	8a 30       	cpi	r24, 0x0A	; 10
     53e:	00 f5       	brcc	.+64     	; 0x580 <main+0x180>
				if (lastRcv==beaconID1) { // only messages from beacon 1 for calculating period
     540:	90 91 1c 01 	lds	r25, 0x011C
     544:	80 91 01 01 	lds	r24, 0x0101
     548:	98 17       	cp	r25, r24
     54a:	d1 f4       	brne	.+52     	; 0x580 <main+0x180>
					PORTB |= (1<<PORTB2); // turn on LED to indicate calibration
     54c:	2a 9a       	sbi	0x05, 2	; 5
					if (rcv_time>100) {
     54e:	80 91 1d 01 	lds	r24, 0x011D
     552:	90 91 1e 01 	lds	r25, 0x011E
     556:	85 36       	cpi	r24, 0x65	; 101
     558:	91 05       	cpc	r25, r1
     55a:	74 f0       	brlt	.+28     	; 0x578 <main+0x178>
						per = (per+rcv_time)/2;
     55c:	80 91 1d 01 	lds	r24, 0x011D
     560:	90 91 1e 01 	lds	r25, 0x011E
						if (rcv_ct==9) {
     564:	80 91 1f 01 	lds	r24, 0x011F
     568:	89 30       	cpi	r24, 0x09	; 9
     56a:	09 f4       	brne	.+2      	; 0x56e <main+0x16e>
							detach_time = per/5; // time after receiving a message that it will detach the EPM
							//detach_time = detach_time/8; // convert roughly to ms
							PORTB &= ~(1<<PORTB2); // clear LED to indicate end of calibration
     56c:	2a 98       	cbi	0x05, 2	; 5
						}
						rcv_ct+=1;	
     56e:	80 91 1f 01 	lds	r24, 0x011F
     572:	8f 5f       	subi	r24, 0xFF	; 255
     574:	80 93 1f 01 	sts	0x011F, r24
					}
					rcv_sx=0;
     578:	10 92 19 01 	sts	0x0119, r1
     57c:	10 92 18 01 	sts	0x0118, r1

			// calculate angles based on times between beacon messages, then pick beacon to move towards
			// rotation A: take in three messages, calculate "angles" (times between receptions)
			// rotation B: move towards selected beacon (towards beacon not asociated with the largest angle)
		
			if ((rcv_sx==1) && (rcv_ct==10)) { // got a new message and already calibrated
     580:	80 91 18 01 	lds	r24, 0x0118
     584:	90 91 19 01 	lds	r25, 0x0119
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	09 f0       	breq	.+2      	; 0x58e <main+0x18e>
     58c:	b7 c1       	rjmp	.+878    	; 0x8fc <main+0x4fc>
     58e:	80 91 1f 01 	lds	r24, 0x011F
     592:	8a 30       	cpi	r24, 0x0A	; 10
     594:	09 f0       	breq	.+2      	; 0x598 <main+0x198>
     596:	b2 c1       	rjmp	.+868    	; 0x8fc <main+0x4fc>

				if (beacons_rcvd < 3) { // store times from the three beacons in a row
     598:	80 91 20 01 	lds	r24, 0x0120
     59c:	83 30       	cpi	r24, 0x03	; 3
     59e:	08 f0       	brcs	.+2      	; 0x5a2 <main+0x1a2>
     5a0:	92 c0       	rjmp	.+292    	; 0x6c6 <main+0x2c6>
					if (lastRcv==beaconID1) { // if other two times are 0, store time and add to beacons rcvd; else reset
     5a2:	90 91 1c 01 	lds	r25, 0x011C
     5a6:	80 91 01 01 	lds	r24, 0x0101
     5aa:	98 17       	cp	r25, r24
     5ac:	21 f5       	brne	.+72     	; 0x5f6 <main+0x1f6>
						if ((beacons_rcvd==0) && (beaconID2_time==0) && (beaconID3_time==0)) {
     5ae:	80 91 20 01 	lds	r24, 0x0120
     5b2:	88 23       	and	r24, r24
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <main+0x1b8>
     5b6:	72 c0       	rjmp	.+228    	; 0x69c <main+0x29c>
     5b8:	80 91 21 01 	lds	r24, 0x0121
     5bc:	90 91 22 01 	lds	r25, 0x0122
     5c0:	89 2b       	or	r24, r25
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <main+0x1c6>
     5c4:	6b c0       	rjmp	.+214    	; 0x69c <main+0x29c>
     5c6:	80 91 23 01 	lds	r24, 0x0123
     5ca:	90 91 24 01 	lds	r25, 0x0124
     5ce:	89 2b       	or	r24, r25
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <main+0x1d4>
     5d2:	64 c0       	rjmp	.+200    	; 0x69c <main+0x29c>
							beaconID1_time |= rcv_time;
     5d4:	20 91 25 01 	lds	r18, 0x0125
     5d8:	30 91 26 01 	lds	r19, 0x0126
     5dc:	80 91 1d 01 	lds	r24, 0x011D
     5e0:	90 91 1e 01 	lds	r25, 0x011E
     5e4:	82 2b       	or	r24, r18
     5e6:	93 2b       	or	r25, r19
     5e8:	90 93 26 01 	sts	0x0126, r25
     5ec:	80 93 25 01 	sts	0x0125, r24
							beacons_rcvd = 1;
     5f0:	e0 92 20 01 	sts	0x0120, r14
     5f4:	68 c0       	rjmp	.+208    	; 0x6c6 <main+0x2c6>
								beacons_rcvd = 0;
								//PORTB &= ~( (1<<PORTB0) | (1<<PORTB2) );
							}
						}
					}
					else if (lastRcv==beaconID2) { // if time3 is zero and time1 is not 0, store time and add to beacons rcvd; else ignore
     5f6:	90 91 1c 01 	lds	r25, 0x011C
     5fa:	80 91 02 01 	lds	r24, 0x0102
     5fe:	98 17       	cp	r25, r24
     600:	21 f5       	brne	.+72     	; 0x64a <main+0x24a>
						if ((beacons_rcvd==1) && (beaconID3_time==0) && (beaconID1_time>0)) {
     602:	80 91 20 01 	lds	r24, 0x0120
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	09 f0       	breq	.+2      	; 0x60c <main+0x20c>
     60a:	48 c0       	rjmp	.+144    	; 0x69c <main+0x29c>
     60c:	80 91 23 01 	lds	r24, 0x0123
     610:	90 91 24 01 	lds	r25, 0x0124
     614:	89 2b       	or	r24, r25
     616:	09 f0       	breq	.+2      	; 0x61a <main+0x21a>
     618:	41 c0       	rjmp	.+130    	; 0x69c <main+0x29c>
     61a:	80 91 25 01 	lds	r24, 0x0125
     61e:	90 91 26 01 	lds	r25, 0x0126
     622:	18 16       	cp	r1, r24
     624:	19 06       	cpc	r1, r25
     626:	d4 f5       	brge	.+116    	; 0x69c <main+0x29c>
							beaconID2_time |= rcv_time;
     628:	20 91 21 01 	lds	r18, 0x0121
     62c:	30 91 22 01 	lds	r19, 0x0122
     630:	80 91 1d 01 	lds	r24, 0x011D
     634:	90 91 1e 01 	lds	r25, 0x011E
     638:	82 2b       	or	r24, r18
     63a:	93 2b       	or	r25, r19
     63c:	90 93 22 01 	sts	0x0122, r25
     640:	80 93 21 01 	sts	0x0121, r24
							beacons_rcvd = 2;
     644:	f0 92 20 01 	sts	0x0120, r15
     648:	3e c0       	rjmp	.+124    	; 0x6c6 <main+0x2c6>
								beacons_rcvd = 0;
								//PORTB &= ~( (1<<PORTB0) | (1<<PORTB2) );
							}
						}
					}
					else if (lastRcv==beaconID3) { // if other two times are not zero, store time and add to beacons rcvd; else ignore
     64a:	90 91 1c 01 	lds	r25, 0x011C
     64e:	80 91 03 01 	lds	r24, 0x0103
     652:	98 17       	cp	r25, r24
     654:	c1 f5       	brne	.+112    	; 0x6c6 <main+0x2c6>
						if ((beacons_rcvd==2) && (beaconID1_time>0) && (beaconID2_time>0)) {
     656:	80 91 20 01 	lds	r24, 0x0120
     65a:	82 30       	cpi	r24, 0x02	; 2
     65c:	f9 f4       	brne	.+62     	; 0x69c <main+0x29c>
     65e:	80 91 25 01 	lds	r24, 0x0125
     662:	90 91 26 01 	lds	r25, 0x0126
     666:	18 16       	cp	r1, r24
     668:	19 06       	cpc	r1, r25
     66a:	c4 f4       	brge	.+48     	; 0x69c <main+0x29c>
     66c:	80 91 21 01 	lds	r24, 0x0121
     670:	90 91 22 01 	lds	r25, 0x0122
     674:	18 16       	cp	r1, r24
     676:	19 06       	cpc	r1, r25
     678:	8c f4       	brge	.+34     	; 0x69c <main+0x29c>
							beaconID3_time |= rcv_time;
     67a:	20 91 23 01 	lds	r18, 0x0123
     67e:	30 91 24 01 	lds	r19, 0x0124
     682:	80 91 1d 01 	lds	r24, 0x011D
     686:	90 91 1e 01 	lds	r25, 0x011E
     68a:	82 2b       	or	r24, r18
     68c:	93 2b       	or	r25, r19
     68e:	90 93 24 01 	sts	0x0124, r25
     692:	80 93 23 01 	sts	0x0123, r24
							beacons_rcvd = 3;
     696:	00 93 20 01 	sts	0x0120, r16
     69a:	15 c0       	rjmp	.+42     	; 0x6c6 <main+0x2c6>
							//PORTB |= (1<<PORTB2)|(1<<PORTB0);
						} else {
							if (rcv_time > 100) {
     69c:	80 91 1d 01 	lds	r24, 0x011D
     6a0:	90 91 1e 01 	lds	r25, 0x011E
     6a4:	85 36       	cpi	r24, 0x65	; 101
     6a6:	91 05       	cpc	r25, r1
     6a8:	74 f0       	brlt	.+28     	; 0x6c6 <main+0x2c6>
								beaconID1_time = 0;
     6aa:	10 92 26 01 	sts	0x0126, r1
     6ae:	10 92 25 01 	sts	0x0125, r1
								beaconID2_time = 0;
     6b2:	10 92 22 01 	sts	0x0122, r1
     6b6:	10 92 21 01 	sts	0x0121, r1
								beaconID3_time = 0;
     6ba:	10 92 24 01 	sts	0x0124, r1
     6be:	10 92 23 01 	sts	0x0123, r1
								beacons_rcvd = 0;
     6c2:	10 92 20 01 	sts	0x0120, r1
				// if 3->1 (beaconID1_time) is the longest time, move to beacon 2
				// if 1->2 (beaconID2_time) is the longest time, move to beacon 3
				// if 2->3 (beaconID3_time) is the longest time, move to beacon 1

				// calculate movement
				if (beacons_rcvd==3) {
     6c6:	80 91 20 01 	lds	r24, 0x0120
     6ca:	83 30       	cpi	r24, 0x03	; 3
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <main+0x2d0>
     6ce:	12 c1       	rjmp	.+548    	; 0x8f4 <main+0x4f4>

					//PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );

					if ((beaconID1_time>(beaconID2_time+center_threshold)) && (beaconID1_time>(beaconID2_time+center_threshold))) {
     6d0:	40 91 25 01 	lds	r20, 0x0125
     6d4:	50 91 26 01 	lds	r21, 0x0126
     6d8:	20 91 21 01 	lds	r18, 0x0121
     6dc:	30 91 22 01 	lds	r19, 0x0122
     6e0:	80 91 05 01 	lds	r24, 0x0105
     6e4:	90 91 06 01 	lds	r25, 0x0106
     6e8:	82 0f       	add	r24, r18
     6ea:	93 1f       	adc	r25, r19
     6ec:	84 17       	cp	r24, r20
     6ee:	95 07       	cpc	r25, r21
     6f0:	94 f4       	brge	.+36     	; 0x716 <main+0x316>
     6f2:	40 91 25 01 	lds	r20, 0x0125
     6f6:	50 91 26 01 	lds	r21, 0x0126
     6fa:	20 91 21 01 	lds	r18, 0x0121
     6fe:	30 91 22 01 	lds	r19, 0x0122
     702:	80 91 05 01 	lds	r24, 0x0105
     706:	90 91 06 01 	lds	r25, 0x0106
     70a:	82 0f       	add	r24, r18
     70c:	93 1f       	adc	r25, r19
     70e:	84 17       	cp	r24, r20
     710:	95 07       	cpc	r25, r21
     712:	0c f4       	brge	.+2      	; 0x716 <main+0x316>
     714:	dc c0       	rjmp	.+440    	; 0x8ce <main+0x4ce>
							PORTB|=(1<<PORTB1);
							_delay_ms(250);
							PORTB&=~(1<<PORTB1);
							_delay_ms(250);
						}*/
					} else if ((beaconID2_time>(beaconID1_time+center_threshold)) && (beaconID2_time>(beaconID3_time+center_threshold))) {
     716:	40 91 21 01 	lds	r20, 0x0121
     71a:	50 91 22 01 	lds	r21, 0x0122
     71e:	20 91 25 01 	lds	r18, 0x0125
     722:	30 91 26 01 	lds	r19, 0x0126
     726:	80 91 05 01 	lds	r24, 0x0105
     72a:	90 91 06 01 	lds	r25, 0x0106
     72e:	82 0f       	add	r24, r18
     730:	93 1f       	adc	r25, r19
     732:	84 17       	cp	r24, r20
     734:	95 07       	cpc	r25, r21
     736:	94 f4       	brge	.+36     	; 0x75c <main+0x35c>
     738:	40 91 21 01 	lds	r20, 0x0121
     73c:	50 91 22 01 	lds	r21, 0x0122
     740:	20 91 23 01 	lds	r18, 0x0123
     744:	30 91 24 01 	lds	r19, 0x0124
     748:	80 91 05 01 	lds	r24, 0x0105
     74c:	90 91 06 01 	lds	r25, 0x0106
     750:	82 0f       	add	r24, r18
     752:	93 1f       	adc	r25, r19
     754:	84 17       	cp	r24, r20
     756:	95 07       	cpc	r25, r21
     758:	0c f4       	brge	.+2      	; 0x75c <main+0x35c>
     75a:	4d c0       	rjmp	.+154    	; 0x7f6 <main+0x3f6>
							PORTB|=(1<<PORTB2);
							_delay_ms(250);
							PORTB&=~(1<<PORTB2);
							_delay_ms(250);
						}*/
					} else if ((beaconID3_time>(beaconID1_time+center_threshold)) && (beaconID3_time>(beaconID1_time+center_threshold))) {
     75c:	40 91 23 01 	lds	r20, 0x0123
     760:	50 91 24 01 	lds	r21, 0x0124
     764:	20 91 25 01 	lds	r18, 0x0125
     768:	30 91 26 01 	lds	r19, 0x0126
     76c:	80 91 05 01 	lds	r24, 0x0105
     770:	90 91 06 01 	lds	r25, 0x0106
     774:	82 0f       	add	r24, r18
     776:	93 1f       	adc	r25, r19
     778:	84 17       	cp	r24, r20
     77a:	95 07       	cpc	r25, r21
     77c:	94 f4       	brge	.+36     	; 0x7a2 <main+0x3a2>
     77e:	40 91 23 01 	lds	r20, 0x0123
     782:	50 91 24 01 	lds	r21, 0x0124
     786:	20 91 25 01 	lds	r18, 0x0125
     78a:	30 91 26 01 	lds	r19, 0x0126
     78e:	80 91 05 01 	lds	r24, 0x0105
     792:	90 91 06 01 	lds	r25, 0x0106
     796:	82 0f       	add	r24, r18
     798:	93 1f       	adc	r25, r19
     79a:	84 17       	cp	r24, r20
     79c:	95 07       	cpc	r25, r21
     79e:	0c f4       	brge	.+2      	; 0x7a2 <main+0x3a2>
     7a0:	60 c0       	rjmp	.+192    	; 0x862 <main+0x462>
							PORTB|=(1<<PORTB0);
							_delay_ms(250);
							PORTB&=~(1<<PORTB0);
							_delay_ms(250);
						}*/
					} else if ((beaconID1_time<(beaconID2_time-(center_threshold/5))) && (beaconID1_time<(beaconID2_time-(center_threshold/5)))) {
     7a2:	e0 91 25 01 	lds	r30, 0x0125
     7a6:	f0 91 26 01 	lds	r31, 0x0126
     7aa:	20 91 21 01 	lds	r18, 0x0121
     7ae:	30 91 22 01 	lds	r19, 0x0122
     7b2:	80 91 05 01 	lds	r24, 0x0105
     7b6:	90 91 06 01 	lds	r25, 0x0106
     7ba:	6b ef       	ldi	r22, 0xFB	; 251
     7bc:	7f ef       	ldi	r23, 0xFF	; 255
     7be:	0e 94 18 0a 	call	0x1430	; 0x1430 <__divmodhi4>
     7c2:	26 0f       	add	r18, r22
     7c4:	37 1f       	adc	r19, r23
     7c6:	e2 17       	cp	r30, r18
     7c8:	f3 07       	cpc	r31, r19
     7ca:	0c f5       	brge	.+66     	; 0x80e <main+0x40e>
     7cc:	e0 91 25 01 	lds	r30, 0x0125
     7d0:	f0 91 26 01 	lds	r31, 0x0126
     7d4:	20 91 21 01 	lds	r18, 0x0121
     7d8:	30 91 22 01 	lds	r19, 0x0122
     7dc:	80 91 05 01 	lds	r24, 0x0105
     7e0:	90 91 06 01 	lds	r25, 0x0106
     7e4:	6b ef       	ldi	r22, 0xFB	; 251
     7e6:	7f ef       	ldi	r23, 0xFF	; 255
     7e8:	0e 94 18 0a 	call	0x1430	; 0x1430 <__divmodhi4>
     7ec:	26 0f       	add	r18, r22
     7ee:	37 1f       	adc	r19, r23
     7f0:	e2 17       	cp	r30, r18
     7f2:	f3 07       	cpc	r31, r19
     7f4:	64 f4       	brge	.+24     	; 0x80e <main+0x40e>
						desired_beacon |= beaconID3; // move CW towards beacon 3, then resume centering routine
     7f6:	80 91 27 01 	lds	r24, 0x0127
     7fa:	90 91 03 01 	lds	r25, 0x0103
     7fe:	98 2b       	or	r25, r24
     800:	90 93 27 01 	sts	0x0127, r25
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     804:	85 b1       	in	r24, 0x05	; 5
     806:	88 7f       	andi	r24, 0xF8	; 248
     808:	85 b9       	out	0x05, r24	; 5
						PORTB |= (1<<PORTB2);
     80a:	2a 9a       	sbi	0x05, 2	; 5
     80c:	71 c0       	rjmp	.+226    	; 0x8f0 <main+0x4f0>
							PORTB|=(1<<PORTB2);
							_delay_ms(250);
							PORTB&=~(1<<PORTB2);
							_delay_ms(250);
						}*/
					} else if ((beaconID2_time<(beaconID1_time-(center_threshold/5))) && (beaconID2_time<(beaconID3_time-(center_threshold/5)))) {
     80e:	e0 91 21 01 	lds	r30, 0x0121
     812:	f0 91 22 01 	lds	r31, 0x0122
     816:	20 91 25 01 	lds	r18, 0x0125
     81a:	30 91 26 01 	lds	r19, 0x0126
     81e:	80 91 05 01 	lds	r24, 0x0105
     822:	90 91 06 01 	lds	r25, 0x0106
     826:	6b ef       	ldi	r22, 0xFB	; 251
     828:	7f ef       	ldi	r23, 0xFF	; 255
     82a:	0e 94 18 0a 	call	0x1430	; 0x1430 <__divmodhi4>
     82e:	26 0f       	add	r18, r22
     830:	37 1f       	adc	r19, r23
     832:	e2 17       	cp	r30, r18
     834:	f3 07       	cpc	r31, r19
     836:	0c f5       	brge	.+66     	; 0x87a <main+0x47a>
     838:	e0 91 21 01 	lds	r30, 0x0121
     83c:	f0 91 22 01 	lds	r31, 0x0122
     840:	20 91 23 01 	lds	r18, 0x0123
     844:	30 91 24 01 	lds	r19, 0x0124
     848:	80 91 05 01 	lds	r24, 0x0105
     84c:	90 91 06 01 	lds	r25, 0x0106
     850:	6b ef       	ldi	r22, 0xFB	; 251
     852:	7f ef       	ldi	r23, 0xFF	; 255
     854:	0e 94 18 0a 	call	0x1430	; 0x1430 <__divmodhi4>
     858:	26 0f       	add	r18, r22
     85a:	37 1f       	adc	r19, r23
     85c:	e2 17       	cp	r30, r18
     85e:	f3 07       	cpc	r31, r19
     860:	64 f4       	brge	.+24     	; 0x87a <main+0x47a>
						desired_beacon |= beaconID1; // move CW towards beacon 1, then resume centering routine
     862:	80 91 27 01 	lds	r24, 0x0127
     866:	90 91 01 01 	lds	r25, 0x0101
     86a:	98 2b       	or	r25, r24
     86c:	90 93 27 01 	sts	0x0127, r25
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     870:	85 b1       	in	r24, 0x05	; 5
     872:	88 7f       	andi	r24, 0xF8	; 248
     874:	85 b9       	out	0x05, r24	; 5
						PORTB |= (1<<PORTB0);
     876:	28 9a       	sbi	0x05, 0	; 5
     878:	3b c0       	rjmp	.+118    	; 0x8f0 <main+0x4f0>
							PORTB|=(1<<PORTB0);
							_delay_ms(250);
							PORTB&=~(1<<PORTB0);
							_delay_ms(250);
						}*/
					} else if ((beaconID3_time<(beaconID1_time-(center_threshold/5))) && (beaconID3_time<(beaconID1_time-(center_threshold/5)))) {
     87a:	e0 91 23 01 	lds	r30, 0x0123
     87e:	f0 91 24 01 	lds	r31, 0x0124
     882:	20 91 25 01 	lds	r18, 0x0125
     886:	30 91 26 01 	lds	r19, 0x0126
     88a:	80 91 05 01 	lds	r24, 0x0105
     88e:	90 91 06 01 	lds	r25, 0x0106
     892:	6b ef       	ldi	r22, 0xFB	; 251
     894:	7f ef       	ldi	r23, 0xFF	; 255
     896:	0e 94 18 0a 	call	0x1430	; 0x1430 <__divmodhi4>
     89a:	26 0f       	add	r18, r22
     89c:	37 1f       	adc	r19, r23
     89e:	e2 17       	cp	r30, r18
     8a0:	f3 07       	cpc	r31, r19
     8a2:	0c f5       	brge	.+66     	; 0x8e6 <main+0x4e6>
     8a4:	e0 91 23 01 	lds	r30, 0x0123
     8a8:	f0 91 24 01 	lds	r31, 0x0124
     8ac:	20 91 25 01 	lds	r18, 0x0125
     8b0:	30 91 26 01 	lds	r19, 0x0126
     8b4:	80 91 05 01 	lds	r24, 0x0105
     8b8:	90 91 06 01 	lds	r25, 0x0106
     8bc:	6b ef       	ldi	r22, 0xFB	; 251
     8be:	7f ef       	ldi	r23, 0xFF	; 255
     8c0:	0e 94 18 0a 	call	0x1430	; 0x1430 <__divmodhi4>
     8c4:	26 0f       	add	r18, r22
     8c6:	37 1f       	adc	r19, r23
     8c8:	e2 17       	cp	r30, r18
     8ca:	f3 07       	cpc	r31, r19
     8cc:	64 f4       	brge	.+24     	; 0x8e6 <main+0x4e6>
						desired_beacon |= beaconID2; // move CW towards beacon 2, then resume centering routine
     8ce:	80 91 27 01 	lds	r24, 0x0127
     8d2:	90 91 02 01 	lds	r25, 0x0102
     8d6:	98 2b       	or	r25, r24
     8d8:	90 93 27 01 	sts	0x0127, r25
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     8dc:	85 b1       	in	r24, 0x05	; 5
     8de:	88 7f       	andi	r24, 0xF8	; 248
     8e0:	85 b9       	out	0x05, r24	; 5
						PORTB |= (1<<PORTB1);
     8e2:	29 9a       	sbi	0x05, 1	; 5
     8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <main+0x4f0>
							PORTB&=~(1<<PORTB1);
							_delay_ms(250);
						}*/
					} else { // within centering threshold, end of program
						while(1) { 
							cli();
     8e6:	f8 94       	cli
							PORTB |= (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2); 
     8e8:	85 b1       	in	r24, 0x05	; 5
     8ea:	87 60       	ori	r24, 0x07	; 7
     8ec:	85 b9       	out	0x05, r24	; 5
     8ee:	fb cf       	rjmp	.-10     	; 0x8e6 <main+0x4e6>
						}
					}

					beacons_rcvd=4; // indicated that direction of motion has been decided
     8f0:	10 93 20 01 	sts	0x0120, r17
					
				}
				rcv_sx = 0; // wait for next rotation to execute movement
     8f4:	10 92 19 01 	sts	0x0119, r1
     8f8:	10 92 18 01 	sts	0x0118, r1
			}

			if ((rcv_sx==1)&&(beacons_rcvd==4)) { // now, execute the movement, to ensure correct direction	
     8fc:	80 91 18 01 	lds	r24, 0x0118
     900:	90 91 19 01 	lds	r25, 0x0119
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	09 f0       	breq	.+2      	; 0x90a <__stack+0xb>
     908:	0b ce       	rjmp	.-1002   	; 0x520 <main+0x120>
     90a:	80 91 20 01 	lds	r24, 0x0120
     90e:	84 30       	cpi	r24, 0x04	; 4
     910:	09 f0       	breq	.+2      	; 0x914 <__stack+0x15>
     912:	06 ce       	rjmp	.-1012   	; 0x520 <main+0x120>
				// execute movement
				if((lastRcv==desired_beacon)&&(rcv_time>100)) { // if last message is from desired beacon -> start movement sequence
     914:	90 91 1c 01 	lds	r25, 0x011C
     918:	80 91 27 01 	lds	r24, 0x0127
     91c:	98 17       	cp	r25, r24
     91e:	49 f5       	brne	.+82     	; 0x972 <__stack+0x73>
     920:	80 91 1d 01 	lds	r24, 0x011D
     924:	90 91 1e 01 	lds	r25, 0x011E
     928:	85 36       	cpi	r24, 0x65	; 101
     92a:	91 05       	cpc	r25, r1
     92c:	14 f1       	brlt	.+68     	; 0x972 <__stack+0x73>
					cli(); // disable all interrupts so that movement can be executed
     92e:	f8 94       	cli
     930:	80 e2       	ldi	r24, 0x20	; 32
     932:	93 e0       	ldi	r25, 0x03	; 3
     934:	fe 01       	movw	r30, r28
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	f1 f7       	brne	.-4      	; 0x936 <__stack+0x37>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     93a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     93c:	d9 f7       	brne	.-10     	; 0x934 <__stack+0x35>
					while (dd<detach_time) {
						_delay_us(150);
						dd+=1;
					}*/
					_delay_ms(80); // hard-coded delay based on 72 deg at ~165 rpm					
					detach(80);
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	80 ea       	ldi	r24, 0xA0	; 160
     944:	92 e4       	ldi	r25, 0x42	; 66
     946:	0e 94 9b 01 	call	0x336	; 0x336 <detach>
					// reset movement variables
					beaconID1_time = 0;
     94a:	10 92 26 01 	sts	0x0126, r1
     94e:	10 92 25 01 	sts	0x0125, r1
					beaconID2_time = 0;
     952:	10 92 22 01 	sts	0x0122, r1
     956:	10 92 21 01 	sts	0x0121, r1
					beaconID3_time = 0;
     95a:	10 92 24 01 	sts	0x0124, r1
     95e:	10 92 23 01 	sts	0x0123, r1
					beacons_rcvd = 0;
     962:	10 92 20 01 	sts	0x0120, r1
					desired_beacon = 0;
     966:	10 92 27 01 	sts	0x0127, r1
					PORTB &= ~( (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0) );
     96a:	85 b1       	in	r24, 0x05	; 5
     96c:	88 7f       	andi	r24, 0xF8	; 248
     96e:	85 b9       	out	0x05, r24	; 5
					sei(); // re-enable interrupts again to plan next movement
     970:	78 94       	sei
				}
				rcv_sx = 0;
     972:	10 92 19 01 	sts	0x0119, r1
     976:	10 92 18 01 	sts	0x0118, r1
     97a:	d2 cd       	rjmp	.-1116   	; 0x520 <main+0x120>

0000097c <__fixunssfsi>:
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	7b 01       	movw	r14, r22
     986:	8c 01       	movw	r16, r24
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	5f e4       	ldi	r21, 0x4F	; 79
     990:	0e 94 be 07 	call	0xf7c	; 0xf7c <__gesf2>
     994:	88 23       	and	r24, r24
     996:	8c f0       	brlt	.+34     	; 0x9ba <__fixunssfsi+0x3e>
     998:	c8 01       	movw	r24, r16
     99a:	b7 01       	movw	r22, r14
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	5f e4       	ldi	r21, 0x4F	; 79
     9a4:	0e 94 36 06 	call	0xc6c	; 0xc6c <__subsf3>
     9a8:	0e 94 1e 08 	call	0x103c	; 0x103c <__fixsfsi>
     9ac:	9b 01       	movw	r18, r22
     9ae:	ac 01       	movw	r20, r24
     9b0:	20 50       	subi	r18, 0x00	; 0
     9b2:	30 40       	sbci	r19, 0x00	; 0
     9b4:	40 40       	sbci	r20, 0x00	; 0
     9b6:	50 48       	sbci	r21, 0x80	; 128
     9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <__fixunssfsi+0x4a>
     9ba:	c8 01       	movw	r24, r16
     9bc:	b7 01       	movw	r22, r14
     9be:	0e 94 1e 08 	call	0x103c	; 0x103c <__fixsfsi>
     9c2:	9b 01       	movw	r18, r22
     9c4:	ac 01       	movw	r20, r24
     9c6:	b9 01       	movw	r22, r18
     9c8:	ca 01       	movw	r24, r20
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	08 95       	ret

000009d4 <_fpadd_parts>:
     9d4:	a0 e0       	ldi	r26, 0x00	; 0
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e0 ef       	ldi	r30, 0xF0	; 240
     9da:	f4 e0       	ldi	r31, 0x04	; 4
     9dc:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__prologue_saves__>
     9e0:	dc 01       	movw	r26, r24
     9e2:	2b 01       	movw	r4, r22
     9e4:	fa 01       	movw	r30, r20
     9e6:	9c 91       	ld	r25, X
     9e8:	92 30       	cpi	r25, 0x02	; 2
     9ea:	08 f4       	brcc	.+2      	; 0x9ee <_fpadd_parts+0x1a>
     9ec:	39 c1       	rjmp	.+626    	; 0xc60 <_fpadd_parts+0x28c>
     9ee:	eb 01       	movw	r28, r22
     9f0:	88 81       	ld	r24, Y
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	08 f4       	brcc	.+2      	; 0x9f8 <_fpadd_parts+0x24>
     9f6:	33 c1       	rjmp	.+614    	; 0xc5e <_fpadd_parts+0x28a>
     9f8:	94 30       	cpi	r25, 0x04	; 4
     9fa:	69 f4       	brne	.+26     	; 0xa16 <_fpadd_parts+0x42>
     9fc:	84 30       	cpi	r24, 0x04	; 4
     9fe:	09 f0       	breq	.+2      	; 0xa02 <_fpadd_parts+0x2e>
     a00:	2f c1       	rjmp	.+606    	; 0xc60 <_fpadd_parts+0x28c>
     a02:	11 96       	adiw	r26, 0x01	; 1
     a04:	9c 91       	ld	r25, X
     a06:	11 97       	sbiw	r26, 0x01	; 1
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	98 17       	cp	r25, r24
     a0c:	09 f4       	brne	.+2      	; 0xa10 <_fpadd_parts+0x3c>
     a0e:	28 c1       	rjmp	.+592    	; 0xc60 <_fpadd_parts+0x28c>
     a10:	a7 e0       	ldi	r26, 0x07	; 7
     a12:	b1 e0       	ldi	r27, 0x01	; 1
     a14:	25 c1       	rjmp	.+586    	; 0xc60 <_fpadd_parts+0x28c>
     a16:	84 30       	cpi	r24, 0x04	; 4
     a18:	09 f4       	brne	.+2      	; 0xa1c <_fpadd_parts+0x48>
     a1a:	21 c1       	rjmp	.+578    	; 0xc5e <_fpadd_parts+0x28a>
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	a9 f4       	brne	.+42     	; 0xa4a <_fpadd_parts+0x76>
     a20:	92 30       	cpi	r25, 0x02	; 2
     a22:	09 f0       	breq	.+2      	; 0xa26 <_fpadd_parts+0x52>
     a24:	1d c1       	rjmp	.+570    	; 0xc60 <_fpadd_parts+0x28c>
     a26:	9a 01       	movw	r18, r20
     a28:	ad 01       	movw	r20, r26
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	ea 01       	movw	r28, r20
     a2e:	09 90       	ld	r0, Y+
     a30:	ae 01       	movw	r20, r28
     a32:	e9 01       	movw	r28, r18
     a34:	09 92       	st	Y+, r0
     a36:	9e 01       	movw	r18, r28
     a38:	81 50       	subi	r24, 0x01	; 1
     a3a:	c1 f7       	brne	.-16     	; 0xa2c <_fpadd_parts+0x58>
     a3c:	e2 01       	movw	r28, r4
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	11 96       	adiw	r26, 0x01	; 1
     a42:	9c 91       	ld	r25, X
     a44:	89 23       	and	r24, r25
     a46:	81 83       	std	Z+1, r24	; 0x01
     a48:	08 c1       	rjmp	.+528    	; 0xc5a <_fpadd_parts+0x286>
     a4a:	92 30       	cpi	r25, 0x02	; 2
     a4c:	09 f4       	brne	.+2      	; 0xa50 <_fpadd_parts+0x7c>
     a4e:	07 c1       	rjmp	.+526    	; 0xc5e <_fpadd_parts+0x28a>
     a50:	12 96       	adiw	r26, 0x02	; 2
     a52:	2d 90       	ld	r2, X+
     a54:	3c 90       	ld	r3, X
     a56:	13 97       	sbiw	r26, 0x03	; 3
     a58:	eb 01       	movw	r28, r22
     a5a:	8a 81       	ldd	r24, Y+2	; 0x02
     a5c:	9b 81       	ldd	r25, Y+3	; 0x03
     a5e:	14 96       	adiw	r26, 0x04	; 4
     a60:	ad 90       	ld	r10, X+
     a62:	bd 90       	ld	r11, X+
     a64:	cd 90       	ld	r12, X+
     a66:	dc 90       	ld	r13, X
     a68:	17 97       	sbiw	r26, 0x07	; 7
     a6a:	ec 80       	ldd	r14, Y+4	; 0x04
     a6c:	fd 80       	ldd	r15, Y+5	; 0x05
     a6e:	0e 81       	ldd	r16, Y+6	; 0x06
     a70:	1f 81       	ldd	r17, Y+7	; 0x07
     a72:	91 01       	movw	r18, r2
     a74:	28 1b       	sub	r18, r24
     a76:	39 0b       	sbc	r19, r25
     a78:	b9 01       	movw	r22, r18
     a7a:	37 ff       	sbrs	r19, 7
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <_fpadd_parts+0xb2>
     a7e:	66 27       	eor	r22, r22
     a80:	77 27       	eor	r23, r23
     a82:	62 1b       	sub	r22, r18
     a84:	73 0b       	sbc	r23, r19
     a86:	60 32       	cpi	r22, 0x20	; 32
     a88:	71 05       	cpc	r23, r1
     a8a:	0c f0       	brlt	.+2      	; 0xa8e <_fpadd_parts+0xba>
     a8c:	61 c0       	rjmp	.+194    	; 0xb50 <_fpadd_parts+0x17c>
     a8e:	12 16       	cp	r1, r18
     a90:	13 06       	cpc	r1, r19
     a92:	6c f5       	brge	.+90     	; 0xaee <_fpadd_parts+0x11a>
     a94:	37 01       	movw	r6, r14
     a96:	48 01       	movw	r8, r16
     a98:	06 2e       	mov	r0, r22
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <_fpadd_parts+0xd0>
     a9c:	96 94       	lsr	r9
     a9e:	87 94       	ror	r8
     aa0:	77 94       	ror	r7
     aa2:	67 94       	ror	r6
     aa4:	0a 94       	dec	r0
     aa6:	d2 f7       	brpl	.-12     	; 0xa9c <_fpadd_parts+0xc8>
     aa8:	21 e0       	ldi	r18, 0x01	; 1
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	04 c0       	rjmp	.+8      	; 0xaba <_fpadd_parts+0xe6>
     ab2:	22 0f       	add	r18, r18
     ab4:	33 1f       	adc	r19, r19
     ab6:	44 1f       	adc	r20, r20
     ab8:	55 1f       	adc	r21, r21
     aba:	6a 95       	dec	r22
     abc:	d2 f7       	brpl	.-12     	; 0xab2 <_fpadd_parts+0xde>
     abe:	21 50       	subi	r18, 0x01	; 1
     ac0:	30 40       	sbci	r19, 0x00	; 0
     ac2:	40 40       	sbci	r20, 0x00	; 0
     ac4:	50 40       	sbci	r21, 0x00	; 0
     ac6:	2e 21       	and	r18, r14
     ac8:	3f 21       	and	r19, r15
     aca:	40 23       	and	r20, r16
     acc:	51 23       	and	r21, r17
     ace:	21 15       	cp	r18, r1
     ad0:	31 05       	cpc	r19, r1
     ad2:	41 05       	cpc	r20, r1
     ad4:	51 05       	cpc	r21, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <_fpadd_parts+0x10c>
     ad8:	21 e0       	ldi	r18, 0x01	; 1
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	79 01       	movw	r14, r18
     ae2:	8a 01       	movw	r16, r20
     ae4:	e6 28       	or	r14, r6
     ae6:	f7 28       	or	r15, r7
     ae8:	08 29       	or	r16, r8
     aea:	19 29       	or	r17, r9
     aec:	3c c0       	rjmp	.+120    	; 0xb66 <_fpadd_parts+0x192>
     aee:	23 2b       	or	r18, r19
     af0:	d1 f1       	breq	.+116    	; 0xb66 <_fpadd_parts+0x192>
     af2:	26 0e       	add	r2, r22
     af4:	37 1e       	adc	r3, r23
     af6:	35 01       	movw	r6, r10
     af8:	46 01       	movw	r8, r12
     afa:	06 2e       	mov	r0, r22
     afc:	04 c0       	rjmp	.+8      	; 0xb06 <_fpadd_parts+0x132>
     afe:	96 94       	lsr	r9
     b00:	87 94       	ror	r8
     b02:	77 94       	ror	r7
     b04:	67 94       	ror	r6
     b06:	0a 94       	dec	r0
     b08:	d2 f7       	brpl	.-12     	; 0xafe <_fpadd_parts+0x12a>
     b0a:	21 e0       	ldi	r18, 0x01	; 1
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <_fpadd_parts+0x148>
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	44 1f       	adc	r20, r20
     b1a:	55 1f       	adc	r21, r21
     b1c:	6a 95       	dec	r22
     b1e:	d2 f7       	brpl	.-12     	; 0xb14 <_fpadd_parts+0x140>
     b20:	21 50       	subi	r18, 0x01	; 1
     b22:	30 40       	sbci	r19, 0x00	; 0
     b24:	40 40       	sbci	r20, 0x00	; 0
     b26:	50 40       	sbci	r21, 0x00	; 0
     b28:	2a 21       	and	r18, r10
     b2a:	3b 21       	and	r19, r11
     b2c:	4c 21       	and	r20, r12
     b2e:	5d 21       	and	r21, r13
     b30:	21 15       	cp	r18, r1
     b32:	31 05       	cpc	r19, r1
     b34:	41 05       	cpc	r20, r1
     b36:	51 05       	cpc	r21, r1
     b38:	21 f0       	breq	.+8      	; 0xb42 <_fpadd_parts+0x16e>
     b3a:	21 e0       	ldi	r18, 0x01	; 1
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	59 01       	movw	r10, r18
     b44:	6a 01       	movw	r12, r20
     b46:	a6 28       	or	r10, r6
     b48:	b7 28       	or	r11, r7
     b4a:	c8 28       	or	r12, r8
     b4c:	d9 28       	or	r13, r9
     b4e:	0b c0       	rjmp	.+22     	; 0xb66 <_fpadd_parts+0x192>
     b50:	82 15       	cp	r24, r2
     b52:	93 05       	cpc	r25, r3
     b54:	2c f0       	brlt	.+10     	; 0xb60 <_fpadd_parts+0x18c>
     b56:	1c 01       	movw	r2, r24
     b58:	aa 24       	eor	r10, r10
     b5a:	bb 24       	eor	r11, r11
     b5c:	65 01       	movw	r12, r10
     b5e:	03 c0       	rjmp	.+6      	; 0xb66 <_fpadd_parts+0x192>
     b60:	ee 24       	eor	r14, r14
     b62:	ff 24       	eor	r15, r15
     b64:	87 01       	movw	r16, r14
     b66:	11 96       	adiw	r26, 0x01	; 1
     b68:	9c 91       	ld	r25, X
     b6a:	d2 01       	movw	r26, r4
     b6c:	11 96       	adiw	r26, 0x01	; 1
     b6e:	8c 91       	ld	r24, X
     b70:	98 17       	cp	r25, r24
     b72:	09 f4       	brne	.+2      	; 0xb76 <_fpadd_parts+0x1a2>
     b74:	45 c0       	rjmp	.+138    	; 0xc00 <_fpadd_parts+0x22c>
     b76:	99 23       	and	r25, r25
     b78:	39 f0       	breq	.+14     	; 0xb88 <_fpadd_parts+0x1b4>
     b7a:	a8 01       	movw	r20, r16
     b7c:	97 01       	movw	r18, r14
     b7e:	2a 19       	sub	r18, r10
     b80:	3b 09       	sbc	r19, r11
     b82:	4c 09       	sbc	r20, r12
     b84:	5d 09       	sbc	r21, r13
     b86:	06 c0       	rjmp	.+12     	; 0xb94 <_fpadd_parts+0x1c0>
     b88:	a6 01       	movw	r20, r12
     b8a:	95 01       	movw	r18, r10
     b8c:	2e 19       	sub	r18, r14
     b8e:	3f 09       	sbc	r19, r15
     b90:	40 0b       	sbc	r20, r16
     b92:	51 0b       	sbc	r21, r17
     b94:	57 fd       	sbrc	r21, 7
     b96:	08 c0       	rjmp	.+16     	; 0xba8 <_fpadd_parts+0x1d4>
     b98:	11 82       	std	Z+1, r1	; 0x01
     b9a:	33 82       	std	Z+3, r3	; 0x03
     b9c:	22 82       	std	Z+2, r2	; 0x02
     b9e:	24 83       	std	Z+4, r18	; 0x04
     ba0:	35 83       	std	Z+5, r19	; 0x05
     ba2:	46 83       	std	Z+6, r20	; 0x06
     ba4:	57 83       	std	Z+7, r21	; 0x07
     ba6:	1d c0       	rjmp	.+58     	; 0xbe2 <_fpadd_parts+0x20e>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	81 83       	std	Z+1, r24	; 0x01
     bac:	33 82       	std	Z+3, r3	; 0x03
     bae:	22 82       	std	Z+2, r2	; 0x02
     bb0:	88 27       	eor	r24, r24
     bb2:	99 27       	eor	r25, r25
     bb4:	dc 01       	movw	r26, r24
     bb6:	82 1b       	sub	r24, r18
     bb8:	93 0b       	sbc	r25, r19
     bba:	a4 0b       	sbc	r26, r20
     bbc:	b5 0b       	sbc	r27, r21
     bbe:	84 83       	std	Z+4, r24	; 0x04
     bc0:	95 83       	std	Z+5, r25	; 0x05
     bc2:	a6 83       	std	Z+6, r26	; 0x06
     bc4:	b7 83       	std	Z+7, r27	; 0x07
     bc6:	0d c0       	rjmp	.+26     	; 0xbe2 <_fpadd_parts+0x20e>
     bc8:	22 0f       	add	r18, r18
     bca:	33 1f       	adc	r19, r19
     bcc:	44 1f       	adc	r20, r20
     bce:	55 1f       	adc	r21, r21
     bd0:	24 83       	std	Z+4, r18	; 0x04
     bd2:	35 83       	std	Z+5, r19	; 0x05
     bd4:	46 83       	std	Z+6, r20	; 0x06
     bd6:	57 83       	std	Z+7, r21	; 0x07
     bd8:	82 81       	ldd	r24, Z+2	; 0x02
     bda:	93 81       	ldd	r25, Z+3	; 0x03
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	93 83       	std	Z+3, r25	; 0x03
     be0:	82 83       	std	Z+2, r24	; 0x02
     be2:	24 81       	ldd	r18, Z+4	; 0x04
     be4:	35 81       	ldd	r19, Z+5	; 0x05
     be6:	46 81       	ldd	r20, Z+6	; 0x06
     be8:	57 81       	ldd	r21, Z+7	; 0x07
     bea:	da 01       	movw	r26, r20
     bec:	c9 01       	movw	r24, r18
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	a1 09       	sbc	r26, r1
     bf2:	b1 09       	sbc	r27, r1
     bf4:	8f 5f       	subi	r24, 0xFF	; 255
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	af 4f       	sbci	r26, 0xFF	; 255
     bfa:	bf 43       	sbci	r27, 0x3F	; 63
     bfc:	28 f3       	brcs	.-54     	; 0xbc8 <_fpadd_parts+0x1f4>
     bfe:	0b c0       	rjmp	.+22     	; 0xc16 <_fpadd_parts+0x242>
     c00:	91 83       	std	Z+1, r25	; 0x01
     c02:	33 82       	std	Z+3, r3	; 0x03
     c04:	22 82       	std	Z+2, r2	; 0x02
     c06:	ea 0c       	add	r14, r10
     c08:	fb 1c       	adc	r15, r11
     c0a:	0c 1d       	adc	r16, r12
     c0c:	1d 1d       	adc	r17, r13
     c0e:	e4 82       	std	Z+4, r14	; 0x04
     c10:	f5 82       	std	Z+5, r15	; 0x05
     c12:	06 83       	std	Z+6, r16	; 0x06
     c14:	17 83       	std	Z+7, r17	; 0x07
     c16:	83 e0       	ldi	r24, 0x03	; 3
     c18:	80 83       	st	Z, r24
     c1a:	24 81       	ldd	r18, Z+4	; 0x04
     c1c:	35 81       	ldd	r19, Z+5	; 0x05
     c1e:	46 81       	ldd	r20, Z+6	; 0x06
     c20:	57 81       	ldd	r21, Z+7	; 0x07
     c22:	57 ff       	sbrs	r21, 7
     c24:	1a c0       	rjmp	.+52     	; 0xc5a <_fpadd_parts+0x286>
     c26:	c9 01       	movw	r24, r18
     c28:	aa 27       	eor	r26, r26
     c2a:	97 fd       	sbrc	r25, 7
     c2c:	a0 95       	com	r26
     c2e:	ba 2f       	mov	r27, r26
     c30:	81 70       	andi	r24, 0x01	; 1
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	a0 70       	andi	r26, 0x00	; 0
     c36:	b0 70       	andi	r27, 0x00	; 0
     c38:	56 95       	lsr	r21
     c3a:	47 95       	ror	r20
     c3c:	37 95       	ror	r19
     c3e:	27 95       	ror	r18
     c40:	82 2b       	or	r24, r18
     c42:	93 2b       	or	r25, r19
     c44:	a4 2b       	or	r26, r20
     c46:	b5 2b       	or	r27, r21
     c48:	84 83       	std	Z+4, r24	; 0x04
     c4a:	95 83       	std	Z+5, r25	; 0x05
     c4c:	a6 83       	std	Z+6, r26	; 0x06
     c4e:	b7 83       	std	Z+7, r27	; 0x07
     c50:	82 81       	ldd	r24, Z+2	; 0x02
     c52:	93 81       	ldd	r25, Z+3	; 0x03
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	93 83       	std	Z+3, r25	; 0x03
     c58:	82 83       	std	Z+2, r24	; 0x02
     c5a:	df 01       	movw	r26, r30
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <_fpadd_parts+0x28c>
     c5e:	d2 01       	movw	r26, r4
     c60:	cd 01       	movw	r24, r26
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	e2 e1       	ldi	r30, 0x12	; 18
     c68:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__epilogue_restores__>

00000c6c <__subsf3>:
     c6c:	a0 e2       	ldi	r26, 0x20	; 32
     c6e:	b0 e0       	ldi	r27, 0x00	; 0
     c70:	ec e3       	ldi	r30, 0x3C	; 60
     c72:	f6 e0       	ldi	r31, 0x06	; 6
     c74:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__prologue_saves__+0x18>
     c78:	69 83       	std	Y+1, r22	; 0x01
     c7a:	7a 83       	std	Y+2, r23	; 0x02
     c7c:	8b 83       	std	Y+3, r24	; 0x03
     c7e:	9c 83       	std	Y+4, r25	; 0x04
     c80:	2d 83       	std	Y+5, r18	; 0x05
     c82:	3e 83       	std	Y+6, r19	; 0x06
     c84:	4f 83       	std	Y+7, r20	; 0x07
     c86:	58 87       	std	Y+8, r21	; 0x08
     c88:	e9 e0       	ldi	r30, 0x09	; 9
     c8a:	ee 2e       	mov	r14, r30
     c8c:	f1 2c       	mov	r15, r1
     c8e:	ec 0e       	add	r14, r28
     c90:	fd 1e       	adc	r15, r29
     c92:	ce 01       	movw	r24, r28
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	b7 01       	movw	r22, r14
     c98:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
     c9c:	8e 01       	movw	r16, r28
     c9e:	0f 5e       	subi	r16, 0xEF	; 239
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	ce 01       	movw	r24, r28
     ca4:	05 96       	adiw	r24, 0x05	; 5
     ca6:	b8 01       	movw	r22, r16
     ca8:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
     cac:	8a 89       	ldd	r24, Y+18	; 0x12
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	89 27       	eor	r24, r25
     cb2:	8a 8b       	std	Y+18, r24	; 0x12
     cb4:	c7 01       	movw	r24, r14
     cb6:	b8 01       	movw	r22, r16
     cb8:	ae 01       	movw	r20, r28
     cba:	47 5e       	subi	r20, 0xE7	; 231
     cbc:	5f 4f       	sbci	r21, 0xFF	; 255
     cbe:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_fpadd_parts>
     cc2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__pack_f>
     cc6:	a0 96       	adiw	r28, 0x20	; 32
     cc8:	e6 e0       	ldi	r30, 0x06	; 6
     cca:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__epilogue_restores__+0x18>

00000cce <__addsf3>:
     cce:	a0 e2       	ldi	r26, 0x20	; 32
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	ed e6       	ldi	r30, 0x6D	; 109
     cd4:	f6 e0       	ldi	r31, 0x06	; 6
     cd6:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__prologue_saves__+0x18>
     cda:	69 83       	std	Y+1, r22	; 0x01
     cdc:	7a 83       	std	Y+2, r23	; 0x02
     cde:	8b 83       	std	Y+3, r24	; 0x03
     ce0:	9c 83       	std	Y+4, r25	; 0x04
     ce2:	2d 83       	std	Y+5, r18	; 0x05
     ce4:	3e 83       	std	Y+6, r19	; 0x06
     ce6:	4f 83       	std	Y+7, r20	; 0x07
     ce8:	58 87       	std	Y+8, r21	; 0x08
     cea:	f9 e0       	ldi	r31, 0x09	; 9
     cec:	ef 2e       	mov	r14, r31
     cee:	f1 2c       	mov	r15, r1
     cf0:	ec 0e       	add	r14, r28
     cf2:	fd 1e       	adc	r15, r29
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	b7 01       	movw	r22, r14
     cfa:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
     cfe:	8e 01       	movw	r16, r28
     d00:	0f 5e       	subi	r16, 0xEF	; 239
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	ce 01       	movw	r24, r28
     d06:	05 96       	adiw	r24, 0x05	; 5
     d08:	b8 01       	movw	r22, r16
     d0a:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
     d0e:	c7 01       	movw	r24, r14
     d10:	b8 01       	movw	r22, r16
     d12:	ae 01       	movw	r20, r28
     d14:	47 5e       	subi	r20, 0xE7	; 231
     d16:	5f 4f       	sbci	r21, 0xFF	; 255
     d18:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_fpadd_parts>
     d1c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__pack_f>
     d20:	a0 96       	adiw	r28, 0x20	; 32
     d22:	e6 e0       	ldi	r30, 0x06	; 6
     d24:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__epilogue_restores__+0x18>

00000d28 <__mulsf3>:
     d28:	a0 e2       	ldi	r26, 0x20	; 32
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ea e9       	ldi	r30, 0x9A	; 154
     d2e:	f6 e0       	ldi	r31, 0x06	; 6
     d30:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__prologue_saves__>
     d34:	69 83       	std	Y+1, r22	; 0x01
     d36:	7a 83       	std	Y+2, r23	; 0x02
     d38:	8b 83       	std	Y+3, r24	; 0x03
     d3a:	9c 83       	std	Y+4, r25	; 0x04
     d3c:	2d 83       	std	Y+5, r18	; 0x05
     d3e:	3e 83       	std	Y+6, r19	; 0x06
     d40:	4f 83       	std	Y+7, r20	; 0x07
     d42:	58 87       	std	Y+8, r21	; 0x08
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	be 01       	movw	r22, r28
     d4a:	67 5f       	subi	r22, 0xF7	; 247
     d4c:	7f 4f       	sbci	r23, 0xFF	; 255
     d4e:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
     d52:	ce 01       	movw	r24, r28
     d54:	05 96       	adiw	r24, 0x05	; 5
     d56:	be 01       	movw	r22, r28
     d58:	6f 5e       	subi	r22, 0xEF	; 239
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
     d60:	99 85       	ldd	r25, Y+9	; 0x09
     d62:	92 30       	cpi	r25, 0x02	; 2
     d64:	88 f0       	brcs	.+34     	; 0xd88 <__mulsf3+0x60>
     d66:	89 89       	ldd	r24, Y+17	; 0x11
     d68:	82 30       	cpi	r24, 0x02	; 2
     d6a:	c8 f0       	brcs	.+50     	; 0xd9e <__mulsf3+0x76>
     d6c:	94 30       	cpi	r25, 0x04	; 4
     d6e:	19 f4       	brne	.+6      	; 0xd76 <__mulsf3+0x4e>
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	51 f4       	brne	.+20     	; 0xd88 <__mulsf3+0x60>
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <__mulsf3+0x56>
     d76:	84 30       	cpi	r24, 0x04	; 4
     d78:	29 f4       	brne	.+10     	; 0xd84 <__mulsf3+0x5c>
     d7a:	92 30       	cpi	r25, 0x02	; 2
     d7c:	81 f4       	brne	.+32     	; 0xd9e <__mulsf3+0x76>
     d7e:	87 e0       	ldi	r24, 0x07	; 7
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	c6 c0       	rjmp	.+396    	; 0xf10 <__mulsf3+0x1e8>
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	49 f4       	brne	.+18     	; 0xd9a <__mulsf3+0x72>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8c:	8a 89       	ldd	r24, Y+18	; 0x12
     d8e:	98 13       	cpse	r25, r24
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	2a 87       	std	Y+10, r18	; 0x0a
     d94:	ce 01       	movw	r24, r28
     d96:	09 96       	adiw	r24, 0x09	; 9
     d98:	bb c0       	rjmp	.+374    	; 0xf10 <__mulsf3+0x1e8>
     d9a:	82 30       	cpi	r24, 0x02	; 2
     d9c:	49 f4       	brne	.+18     	; 0xdb0 <__mulsf3+0x88>
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	8a 89       	ldd	r24, Y+18	; 0x12
     da4:	98 13       	cpse	r25, r24
     da6:	21 e0       	ldi	r18, 0x01	; 1
     da8:	2a 8b       	std	Y+18, r18	; 0x12
     daa:	ce 01       	movw	r24, r28
     dac:	41 96       	adiw	r24, 0x11	; 17
     dae:	b0 c0       	rjmp	.+352    	; 0xf10 <__mulsf3+0x1e8>
     db0:	2d 84       	ldd	r2, Y+13	; 0x0d
     db2:	3e 84       	ldd	r3, Y+14	; 0x0e
     db4:	4f 84       	ldd	r4, Y+15	; 0x0f
     db6:	58 88       	ldd	r5, Y+16	; 0x10
     db8:	6d 88       	ldd	r6, Y+21	; 0x15
     dba:	7e 88       	ldd	r7, Y+22	; 0x16
     dbc:	8f 88       	ldd	r8, Y+23	; 0x17
     dbe:	98 8c       	ldd	r9, Y+24	; 0x18
     dc0:	ee 24       	eor	r14, r14
     dc2:	ff 24       	eor	r15, r15
     dc4:	87 01       	movw	r16, r14
     dc6:	aa 24       	eor	r10, r10
     dc8:	bb 24       	eor	r11, r11
     dca:	65 01       	movw	r12, r10
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	e0 e0       	ldi	r30, 0x00	; 0
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	c1 01       	movw	r24, r2
     dda:	81 70       	andi	r24, 0x01	; 1
     ddc:	90 70       	andi	r25, 0x00	; 0
     dde:	89 2b       	or	r24, r25
     de0:	e9 f0       	breq	.+58     	; 0xe1c <__mulsf3+0xf4>
     de2:	e6 0c       	add	r14, r6
     de4:	f7 1c       	adc	r15, r7
     de6:	08 1d       	adc	r16, r8
     de8:	19 1d       	adc	r17, r9
     dea:	9a 01       	movw	r18, r20
     dec:	ab 01       	movw	r20, r22
     dee:	2a 0d       	add	r18, r10
     df0:	3b 1d       	adc	r19, r11
     df2:	4c 1d       	adc	r20, r12
     df4:	5d 1d       	adc	r21, r13
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	a0 e0       	ldi	r26, 0x00	; 0
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e6 14       	cp	r14, r6
     e00:	f7 04       	cpc	r15, r7
     e02:	08 05       	cpc	r16, r8
     e04:	19 05       	cpc	r17, r9
     e06:	20 f4       	brcc	.+8      	; 0xe10 <__mulsf3+0xe8>
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a0 e0       	ldi	r26, 0x00	; 0
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	ba 01       	movw	r22, r20
     e12:	a9 01       	movw	r20, r18
     e14:	48 0f       	add	r20, r24
     e16:	59 1f       	adc	r21, r25
     e18:	6a 1f       	adc	r22, r26
     e1a:	7b 1f       	adc	r23, r27
     e1c:	aa 0c       	add	r10, r10
     e1e:	bb 1c       	adc	r11, r11
     e20:	cc 1c       	adc	r12, r12
     e22:	dd 1c       	adc	r13, r13
     e24:	97 fe       	sbrs	r9, 7
     e26:	08 c0       	rjmp	.+16     	; 0xe38 <__mulsf3+0x110>
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	a8 2a       	or	r10, r24
     e32:	b9 2a       	or	r11, r25
     e34:	ca 2a       	or	r12, r26
     e36:	db 2a       	or	r13, r27
     e38:	31 96       	adiw	r30, 0x01	; 1
     e3a:	e0 32       	cpi	r30, 0x20	; 32
     e3c:	f1 05       	cpc	r31, r1
     e3e:	49 f0       	breq	.+18     	; 0xe52 <__mulsf3+0x12a>
     e40:	66 0c       	add	r6, r6
     e42:	77 1c       	adc	r7, r7
     e44:	88 1c       	adc	r8, r8
     e46:	99 1c       	adc	r9, r9
     e48:	56 94       	lsr	r5
     e4a:	47 94       	ror	r4
     e4c:	37 94       	ror	r3
     e4e:	27 94       	ror	r2
     e50:	c3 cf       	rjmp	.-122    	; 0xdd8 <__mulsf3+0xb0>
     e52:	fa 85       	ldd	r31, Y+10	; 0x0a
     e54:	ea 89       	ldd	r30, Y+18	; 0x12
     e56:	2b 89       	ldd	r18, Y+19	; 0x13
     e58:	3c 89       	ldd	r19, Y+20	; 0x14
     e5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e5e:	28 0f       	add	r18, r24
     e60:	39 1f       	adc	r19, r25
     e62:	2e 5f       	subi	r18, 0xFE	; 254
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	17 c0       	rjmp	.+46     	; 0xe96 <__mulsf3+0x16e>
     e68:	ca 01       	movw	r24, r20
     e6a:	81 70       	andi	r24, 0x01	; 1
     e6c:	90 70       	andi	r25, 0x00	; 0
     e6e:	89 2b       	or	r24, r25
     e70:	61 f0       	breq	.+24     	; 0xe8a <__mulsf3+0x162>
     e72:	16 95       	lsr	r17
     e74:	07 95       	ror	r16
     e76:	f7 94       	ror	r15
     e78:	e7 94       	ror	r14
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	a0 e0       	ldi	r26, 0x00	; 0
     e80:	b0 e8       	ldi	r27, 0x80	; 128
     e82:	e8 2a       	or	r14, r24
     e84:	f9 2a       	or	r15, r25
     e86:	0a 2b       	or	r16, r26
     e88:	1b 2b       	or	r17, r27
     e8a:	76 95       	lsr	r23
     e8c:	67 95       	ror	r22
     e8e:	57 95       	ror	r21
     e90:	47 95       	ror	r20
     e92:	2f 5f       	subi	r18, 0xFF	; 255
     e94:	3f 4f       	sbci	r19, 0xFF	; 255
     e96:	77 fd       	sbrc	r23, 7
     e98:	e7 cf       	rjmp	.-50     	; 0xe68 <__mulsf3+0x140>
     e9a:	0c c0       	rjmp	.+24     	; 0xeb4 <__mulsf3+0x18c>
     e9c:	44 0f       	add	r20, r20
     e9e:	55 1f       	adc	r21, r21
     ea0:	66 1f       	adc	r22, r22
     ea2:	77 1f       	adc	r23, r23
     ea4:	17 fd       	sbrc	r17, 7
     ea6:	41 60       	ori	r20, 0x01	; 1
     ea8:	ee 0c       	add	r14, r14
     eaa:	ff 1c       	adc	r15, r15
     eac:	00 1f       	adc	r16, r16
     eae:	11 1f       	adc	r17, r17
     eb0:	21 50       	subi	r18, 0x01	; 1
     eb2:	30 40       	sbci	r19, 0x00	; 0
     eb4:	40 30       	cpi	r20, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	59 07       	cpc	r21, r25
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	69 07       	cpc	r22, r25
     ebe:	90 e4       	ldi	r25, 0x40	; 64
     ec0:	79 07       	cpc	r23, r25
     ec2:	60 f3       	brcs	.-40     	; 0xe9c <__mulsf3+0x174>
     ec4:	2b 8f       	std	Y+27, r18	; 0x1b
     ec6:	3c 8f       	std	Y+28, r19	; 0x1c
     ec8:	db 01       	movw	r26, r22
     eca:	ca 01       	movw	r24, r20
     ecc:	8f 77       	andi	r24, 0x7F	; 127
     ece:	90 70       	andi	r25, 0x00	; 0
     ed0:	a0 70       	andi	r26, 0x00	; 0
     ed2:	b0 70       	andi	r27, 0x00	; 0
     ed4:	80 34       	cpi	r24, 0x40	; 64
     ed6:	91 05       	cpc	r25, r1
     ed8:	a1 05       	cpc	r26, r1
     eda:	b1 05       	cpc	r27, r1
     edc:	61 f4       	brne	.+24     	; 0xef6 <__mulsf3+0x1ce>
     ede:	47 fd       	sbrc	r20, 7
     ee0:	0a c0       	rjmp	.+20     	; 0xef6 <__mulsf3+0x1ce>
     ee2:	e1 14       	cp	r14, r1
     ee4:	f1 04       	cpc	r15, r1
     ee6:	01 05       	cpc	r16, r1
     ee8:	11 05       	cpc	r17, r1
     eea:	29 f0       	breq	.+10     	; 0xef6 <__mulsf3+0x1ce>
     eec:	40 5c       	subi	r20, 0xC0	; 192
     eee:	5f 4f       	sbci	r21, 0xFF	; 255
     ef0:	6f 4f       	sbci	r22, 0xFF	; 255
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	40 78       	andi	r20, 0x80	; 128
     ef6:	1a 8e       	std	Y+26, r1	; 0x1a
     ef8:	fe 17       	cp	r31, r30
     efa:	11 f0       	breq	.+4      	; 0xf00 <__mulsf3+0x1d8>
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	8a 8f       	std	Y+26, r24	; 0x1a
     f00:	4d 8f       	std	Y+29, r20	; 0x1d
     f02:	5e 8f       	std	Y+30, r21	; 0x1e
     f04:	6f 8f       	std	Y+31, r22	; 0x1f
     f06:	78 a3       	std	Y+32, r23	; 0x20
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	89 8f       	std	Y+25, r24	; 0x19
     f0c:	ce 01       	movw	r24, r28
     f0e:	49 96       	adiw	r24, 0x19	; 25
     f10:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__pack_f>
     f14:	a0 96       	adiw	r28, 0x20	; 32
     f16:	e2 e1       	ldi	r30, 0x12	; 18
     f18:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__epilogue_restores__>

00000f1c <__gtsf2>:
     f1c:	a8 e1       	ldi	r26, 0x18	; 24
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e4 e9       	ldi	r30, 0x94	; 148
     f22:	f7 e0       	ldi	r31, 0x07	; 7
     f24:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__prologue_saves__+0x18>
     f28:	69 83       	std	Y+1, r22	; 0x01
     f2a:	7a 83       	std	Y+2, r23	; 0x02
     f2c:	8b 83       	std	Y+3, r24	; 0x03
     f2e:	9c 83       	std	Y+4, r25	; 0x04
     f30:	2d 83       	std	Y+5, r18	; 0x05
     f32:	3e 83       	std	Y+6, r19	; 0x06
     f34:	4f 83       	std	Y+7, r20	; 0x07
     f36:	58 87       	std	Y+8, r21	; 0x08
     f38:	89 e0       	ldi	r24, 0x09	; 9
     f3a:	e8 2e       	mov	r14, r24
     f3c:	f1 2c       	mov	r15, r1
     f3e:	ec 0e       	add	r14, r28
     f40:	fd 1e       	adc	r15, r29
     f42:	ce 01       	movw	r24, r28
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	b7 01       	movw	r22, r14
     f48:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
     f4c:	8e 01       	movw	r16, r28
     f4e:	0f 5e       	subi	r16, 0xEF	; 239
     f50:	1f 4f       	sbci	r17, 0xFF	; 255
     f52:	ce 01       	movw	r24, r28
     f54:	05 96       	adiw	r24, 0x05	; 5
     f56:	b8 01       	movw	r22, r16
     f58:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
     f5c:	89 85       	ldd	r24, Y+9	; 0x09
     f5e:	82 30       	cpi	r24, 0x02	; 2
     f60:	40 f0       	brcs	.+16     	; 0xf72 <__gtsf2+0x56>
     f62:	89 89       	ldd	r24, Y+17	; 0x11
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	28 f0       	brcs	.+10     	; 0xf72 <__gtsf2+0x56>
     f68:	c7 01       	movw	r24, r14
     f6a:	b8 01       	movw	r22, r16
     f6c:	0e 94 bf 09 	call	0x137e	; 0x137e <__fpcmp_parts_f>
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <__gtsf2+0x58>
     f72:	8f ef       	ldi	r24, 0xFF	; 255
     f74:	68 96       	adiw	r28, 0x18	; 24
     f76:	e6 e0       	ldi	r30, 0x06	; 6
     f78:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__epilogue_restores__+0x18>

00000f7c <__gesf2>:
     f7c:	a8 e1       	ldi	r26, 0x18	; 24
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e4 ec       	ldi	r30, 0xC4	; 196
     f82:	f7 e0       	ldi	r31, 0x07	; 7
     f84:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__prologue_saves__+0x18>
     f88:	69 83       	std	Y+1, r22	; 0x01
     f8a:	7a 83       	std	Y+2, r23	; 0x02
     f8c:	8b 83       	std	Y+3, r24	; 0x03
     f8e:	9c 83       	std	Y+4, r25	; 0x04
     f90:	2d 83       	std	Y+5, r18	; 0x05
     f92:	3e 83       	std	Y+6, r19	; 0x06
     f94:	4f 83       	std	Y+7, r20	; 0x07
     f96:	58 87       	std	Y+8, r21	; 0x08
     f98:	89 e0       	ldi	r24, 0x09	; 9
     f9a:	e8 2e       	mov	r14, r24
     f9c:	f1 2c       	mov	r15, r1
     f9e:	ec 0e       	add	r14, r28
     fa0:	fd 1e       	adc	r15, r29
     fa2:	ce 01       	movw	r24, r28
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	b7 01       	movw	r22, r14
     fa8:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
     fac:	8e 01       	movw	r16, r28
     fae:	0f 5e       	subi	r16, 0xEF	; 239
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	ce 01       	movw	r24, r28
     fb4:	05 96       	adiw	r24, 0x05	; 5
     fb6:	b8 01       	movw	r22, r16
     fb8:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
     fbc:	89 85       	ldd	r24, Y+9	; 0x09
     fbe:	82 30       	cpi	r24, 0x02	; 2
     fc0:	40 f0       	brcs	.+16     	; 0xfd2 <__gesf2+0x56>
     fc2:	89 89       	ldd	r24, Y+17	; 0x11
     fc4:	82 30       	cpi	r24, 0x02	; 2
     fc6:	28 f0       	brcs	.+10     	; 0xfd2 <__gesf2+0x56>
     fc8:	c7 01       	movw	r24, r14
     fca:	b8 01       	movw	r22, r16
     fcc:	0e 94 bf 09 	call	0x137e	; 0x137e <__fpcmp_parts_f>
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <__gesf2+0x58>
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	68 96       	adiw	r28, 0x18	; 24
     fd6:	e6 e0       	ldi	r30, 0x06	; 6
     fd8:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__epilogue_restores__+0x18>

00000fdc <__ltsf2>:
     fdc:	a8 e1       	ldi	r26, 0x18	; 24
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e4 ef       	ldi	r30, 0xF4	; 244
     fe2:	f7 e0       	ldi	r31, 0x07	; 7
     fe4:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__prologue_saves__+0x18>
     fe8:	69 83       	std	Y+1, r22	; 0x01
     fea:	7a 83       	std	Y+2, r23	; 0x02
     fec:	8b 83       	std	Y+3, r24	; 0x03
     fee:	9c 83       	std	Y+4, r25	; 0x04
     ff0:	2d 83       	std	Y+5, r18	; 0x05
     ff2:	3e 83       	std	Y+6, r19	; 0x06
     ff4:	4f 83       	std	Y+7, r20	; 0x07
     ff6:	58 87       	std	Y+8, r21	; 0x08
     ff8:	89 e0       	ldi	r24, 0x09	; 9
     ffa:	e8 2e       	mov	r14, r24
     ffc:	f1 2c       	mov	r15, r1
     ffe:	ec 0e       	add	r14, r28
    1000:	fd 1e       	adc	r15, r29
    1002:	ce 01       	movw	r24, r28
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	b7 01       	movw	r22, r14
    1008:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
    100c:	8e 01       	movw	r16, r28
    100e:	0f 5e       	subi	r16, 0xEF	; 239
    1010:	1f 4f       	sbci	r17, 0xFF	; 255
    1012:	ce 01       	movw	r24, r28
    1014:	05 96       	adiw	r24, 0x05	; 5
    1016:	b8 01       	movw	r22, r16
    1018:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
    101c:	89 85       	ldd	r24, Y+9	; 0x09
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	40 f0       	brcs	.+16     	; 0x1032 <__ltsf2+0x56>
    1022:	89 89       	ldd	r24, Y+17	; 0x11
    1024:	82 30       	cpi	r24, 0x02	; 2
    1026:	28 f0       	brcs	.+10     	; 0x1032 <__ltsf2+0x56>
    1028:	c7 01       	movw	r24, r14
    102a:	b8 01       	movw	r22, r16
    102c:	0e 94 bf 09 	call	0x137e	; 0x137e <__fpcmp_parts_f>
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <__ltsf2+0x58>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	68 96       	adiw	r28, 0x18	; 24
    1036:	e6 e0       	ldi	r30, 0x06	; 6
    1038:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__epilogue_restores__+0x18>

0000103c <__fixsfsi>:
    103c:	ac e0       	ldi	r26, 0x0C	; 12
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e4 e2       	ldi	r30, 0x24	; 36
    1042:	f8 e0       	ldi	r31, 0x08	; 8
    1044:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__prologue_saves__+0x20>
    1048:	69 83       	std	Y+1, r22	; 0x01
    104a:	7a 83       	std	Y+2, r23	; 0x02
    104c:	8b 83       	std	Y+3, r24	; 0x03
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	ce 01       	movw	r24, r28
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	be 01       	movw	r22, r28
    1056:	6b 5f       	subi	r22, 0xFB	; 251
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	0e 94 47 09 	call	0x128e	; 0x128e <__unpack_f>
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	61 f1       	breq	.+88     	; 0x10bc <__fixsfsi+0x80>
    1064:	82 30       	cpi	r24, 0x02	; 2
    1066:	50 f1       	brcs	.+84     	; 0x10bc <__fixsfsi+0x80>
    1068:	84 30       	cpi	r24, 0x04	; 4
    106a:	21 f4       	brne	.+8      	; 0x1074 <__fixsfsi+0x38>
    106c:	8e 81       	ldd	r24, Y+6	; 0x06
    106e:	88 23       	and	r24, r24
    1070:	51 f1       	breq	.+84     	; 0x10c6 <__fixsfsi+0x8a>
    1072:	2e c0       	rjmp	.+92     	; 0x10d0 <__fixsfsi+0x94>
    1074:	2f 81       	ldd	r18, Y+7	; 0x07
    1076:	38 85       	ldd	r19, Y+8	; 0x08
    1078:	37 fd       	sbrc	r19, 7
    107a:	20 c0       	rjmp	.+64     	; 0x10bc <__fixsfsi+0x80>
    107c:	6e 81       	ldd	r22, Y+6	; 0x06
    107e:	2f 31       	cpi	r18, 0x1F	; 31
    1080:	31 05       	cpc	r19, r1
    1082:	1c f0       	brlt	.+6      	; 0x108a <__fixsfsi+0x4e>
    1084:	66 23       	and	r22, r22
    1086:	f9 f0       	breq	.+62     	; 0x10c6 <__fixsfsi+0x8a>
    1088:	23 c0       	rjmp	.+70     	; 0x10d0 <__fixsfsi+0x94>
    108a:	8e e1       	ldi	r24, 0x1E	; 30
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	82 1b       	sub	r24, r18
    1090:	93 0b       	sbc	r25, r19
    1092:	29 85       	ldd	r18, Y+9	; 0x09
    1094:	3a 85       	ldd	r19, Y+10	; 0x0a
    1096:	4b 85       	ldd	r20, Y+11	; 0x0b
    1098:	5c 85       	ldd	r21, Y+12	; 0x0c
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <__fixsfsi+0x68>
    109c:	56 95       	lsr	r21
    109e:	47 95       	ror	r20
    10a0:	37 95       	ror	r19
    10a2:	27 95       	ror	r18
    10a4:	8a 95       	dec	r24
    10a6:	d2 f7       	brpl	.-12     	; 0x109c <__fixsfsi+0x60>
    10a8:	66 23       	and	r22, r22
    10aa:	b1 f0       	breq	.+44     	; 0x10d8 <__fixsfsi+0x9c>
    10ac:	50 95       	com	r21
    10ae:	40 95       	com	r20
    10b0:	30 95       	com	r19
    10b2:	21 95       	neg	r18
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	4f 4f       	sbci	r20, 0xFF	; 255
    10b8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ba:	0e c0       	rjmp	.+28     	; 0x10d8 <__fixsfsi+0x9c>
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	50 e0       	ldi	r21, 0x00	; 0
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <__fixsfsi+0x9c>
    10c6:	2f ef       	ldi	r18, 0xFF	; 255
    10c8:	3f ef       	ldi	r19, 0xFF	; 255
    10ca:	4f ef       	ldi	r20, 0xFF	; 255
    10cc:	5f e7       	ldi	r21, 0x7F	; 127
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <__fixsfsi+0x9c>
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	50 e8       	ldi	r21, 0x80	; 128
    10d8:	b9 01       	movw	r22, r18
    10da:	ca 01       	movw	r24, r20
    10dc:	2c 96       	adiw	r28, 0x0c	; 12
    10de:	e2 e0       	ldi	r30, 0x02	; 2
    10e0:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <__epilogue_restores__+0x20>

000010e4 <__pack_f>:
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	fc 01       	movw	r30, r24
    10f0:	e4 80       	ldd	r14, Z+4	; 0x04
    10f2:	f5 80       	ldd	r15, Z+5	; 0x05
    10f4:	06 81       	ldd	r16, Z+6	; 0x06
    10f6:	17 81       	ldd	r17, Z+7	; 0x07
    10f8:	d1 80       	ldd	r13, Z+1	; 0x01
    10fa:	80 81       	ld	r24, Z
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	48 f4       	brcc	.+18     	; 0x1112 <__pack_f+0x2e>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a0 e1       	ldi	r26, 0x10	; 16
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e8 2a       	or	r14, r24
    110a:	f9 2a       	or	r15, r25
    110c:	0a 2b       	or	r16, r26
    110e:	1b 2b       	or	r17, r27
    1110:	a5 c0       	rjmp	.+330    	; 0x125c <__pack_f+0x178>
    1112:	84 30       	cpi	r24, 0x04	; 4
    1114:	09 f4       	brne	.+2      	; 0x1118 <__pack_f+0x34>
    1116:	9f c0       	rjmp	.+318    	; 0x1256 <__pack_f+0x172>
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	21 f4       	brne	.+8      	; 0x1124 <__pack_f+0x40>
    111c:	ee 24       	eor	r14, r14
    111e:	ff 24       	eor	r15, r15
    1120:	87 01       	movw	r16, r14
    1122:	05 c0       	rjmp	.+10     	; 0x112e <__pack_f+0x4a>
    1124:	e1 14       	cp	r14, r1
    1126:	f1 04       	cpc	r15, r1
    1128:	01 05       	cpc	r16, r1
    112a:	11 05       	cpc	r17, r1
    112c:	19 f4       	brne	.+6      	; 0x1134 <__pack_f+0x50>
    112e:	e0 e0       	ldi	r30, 0x00	; 0
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	96 c0       	rjmp	.+300    	; 0x1260 <__pack_f+0x17c>
    1134:	62 81       	ldd	r22, Z+2	; 0x02
    1136:	73 81       	ldd	r23, Z+3	; 0x03
    1138:	9f ef       	ldi	r25, 0xFF	; 255
    113a:	62 38       	cpi	r22, 0x82	; 130
    113c:	79 07       	cpc	r23, r25
    113e:	0c f0       	brlt	.+2      	; 0x1142 <__pack_f+0x5e>
    1140:	5b c0       	rjmp	.+182    	; 0x11f8 <__pack_f+0x114>
    1142:	22 e8       	ldi	r18, 0x82	; 130
    1144:	3f ef       	ldi	r19, 0xFF	; 255
    1146:	26 1b       	sub	r18, r22
    1148:	37 0b       	sbc	r19, r23
    114a:	2a 31       	cpi	r18, 0x1A	; 26
    114c:	31 05       	cpc	r19, r1
    114e:	2c f0       	brlt	.+10     	; 0x115a <__pack_f+0x76>
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	2a c0       	rjmp	.+84     	; 0x11ae <__pack_f+0xca>
    115a:	b8 01       	movw	r22, r16
    115c:	a7 01       	movw	r20, r14
    115e:	02 2e       	mov	r0, r18
    1160:	04 c0       	rjmp	.+8      	; 0x116a <__pack_f+0x86>
    1162:	76 95       	lsr	r23
    1164:	67 95       	ror	r22
    1166:	57 95       	ror	r21
    1168:	47 95       	ror	r20
    116a:	0a 94       	dec	r0
    116c:	d2 f7       	brpl	.-12     	; 0x1162 <__pack_f+0x7e>
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a0 e0       	ldi	r26, 0x00	; 0
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <__pack_f+0x9c>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	aa 1f       	adc	r26, r26
    117e:	bb 1f       	adc	r27, r27
    1180:	2a 95       	dec	r18
    1182:	d2 f7       	brpl	.-12     	; 0x1178 <__pack_f+0x94>
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	a1 09       	sbc	r26, r1
    1188:	b1 09       	sbc	r27, r1
    118a:	8e 21       	and	r24, r14
    118c:	9f 21       	and	r25, r15
    118e:	a0 23       	and	r26, r16
    1190:	b1 23       	and	r27, r17
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	a1 05       	cpc	r26, r1
    1196:	b1 05       	cpc	r27, r1
    1198:	21 f0       	breq	.+8      	; 0x11a2 <__pack_f+0xbe>
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	a0 e0       	ldi	r26, 0x00	; 0
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	9a 01       	movw	r18, r20
    11a4:	ab 01       	movw	r20, r22
    11a6:	28 2b       	or	r18, r24
    11a8:	39 2b       	or	r19, r25
    11aa:	4a 2b       	or	r20, r26
    11ac:	5b 2b       	or	r21, r27
    11ae:	da 01       	movw	r26, r20
    11b0:	c9 01       	movw	r24, r18
    11b2:	8f 77       	andi	r24, 0x7F	; 127
    11b4:	90 70       	andi	r25, 0x00	; 0
    11b6:	a0 70       	andi	r26, 0x00	; 0
    11b8:	b0 70       	andi	r27, 0x00	; 0
    11ba:	80 34       	cpi	r24, 0x40	; 64
    11bc:	91 05       	cpc	r25, r1
    11be:	a1 05       	cpc	r26, r1
    11c0:	b1 05       	cpc	r27, r1
    11c2:	39 f4       	brne	.+14     	; 0x11d2 <__pack_f+0xee>
    11c4:	27 ff       	sbrs	r18, 7
    11c6:	09 c0       	rjmp	.+18     	; 0x11da <__pack_f+0xf6>
    11c8:	20 5c       	subi	r18, 0xC0	; 192
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	4f 4f       	sbci	r20, 0xFF	; 255
    11ce:	5f 4f       	sbci	r21, 0xFF	; 255
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <__pack_f+0xf6>
    11d2:	21 5c       	subi	r18, 0xC1	; 193
    11d4:	3f 4f       	sbci	r19, 0xFF	; 255
    11d6:	4f 4f       	sbci	r20, 0xFF	; 255
    11d8:	5f 4f       	sbci	r21, 0xFF	; 255
    11da:	e0 e0       	ldi	r30, 0x00	; 0
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	20 30       	cpi	r18, 0x00	; 0
    11e0:	a0 e0       	ldi	r26, 0x00	; 0
    11e2:	3a 07       	cpc	r19, r26
    11e4:	a0 e0       	ldi	r26, 0x00	; 0
    11e6:	4a 07       	cpc	r20, r26
    11e8:	a0 e4       	ldi	r26, 0x40	; 64
    11ea:	5a 07       	cpc	r21, r26
    11ec:	10 f0       	brcs	.+4      	; 0x11f2 <__pack_f+0x10e>
    11ee:	e1 e0       	ldi	r30, 0x01	; 1
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	79 01       	movw	r14, r18
    11f4:	8a 01       	movw	r16, r20
    11f6:	27 c0       	rjmp	.+78     	; 0x1246 <__pack_f+0x162>
    11f8:	60 38       	cpi	r22, 0x80	; 128
    11fa:	71 05       	cpc	r23, r1
    11fc:	64 f5       	brge	.+88     	; 0x1256 <__pack_f+0x172>
    11fe:	fb 01       	movw	r30, r22
    1200:	e1 58       	subi	r30, 0x81	; 129
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	d8 01       	movw	r26, r16
    1206:	c7 01       	movw	r24, r14
    1208:	8f 77       	andi	r24, 0x7F	; 127
    120a:	90 70       	andi	r25, 0x00	; 0
    120c:	a0 70       	andi	r26, 0x00	; 0
    120e:	b0 70       	andi	r27, 0x00	; 0
    1210:	80 34       	cpi	r24, 0x40	; 64
    1212:	91 05       	cpc	r25, r1
    1214:	a1 05       	cpc	r26, r1
    1216:	b1 05       	cpc	r27, r1
    1218:	39 f4       	brne	.+14     	; 0x1228 <__pack_f+0x144>
    121a:	e7 fe       	sbrs	r14, 7
    121c:	0d c0       	rjmp	.+26     	; 0x1238 <__pack_f+0x154>
    121e:	80 e4       	ldi	r24, 0x40	; 64
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a0 e0       	ldi	r26, 0x00	; 0
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	04 c0       	rjmp	.+8      	; 0x1230 <__pack_f+0x14c>
    1228:	8f e3       	ldi	r24, 0x3F	; 63
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	a0 e0       	ldi	r26, 0x00	; 0
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e8 0e       	add	r14, r24
    1232:	f9 1e       	adc	r15, r25
    1234:	0a 1f       	adc	r16, r26
    1236:	1b 1f       	adc	r17, r27
    1238:	17 ff       	sbrs	r17, 7
    123a:	05 c0       	rjmp	.+10     	; 0x1246 <__pack_f+0x162>
    123c:	16 95       	lsr	r17
    123e:	07 95       	ror	r16
    1240:	f7 94       	ror	r15
    1242:	e7 94       	ror	r14
    1244:	31 96       	adiw	r30, 0x01	; 1
    1246:	87 e0       	ldi	r24, 0x07	; 7
    1248:	16 95       	lsr	r17
    124a:	07 95       	ror	r16
    124c:	f7 94       	ror	r15
    124e:	e7 94       	ror	r14
    1250:	8a 95       	dec	r24
    1252:	d1 f7       	brne	.-12     	; 0x1248 <__pack_f+0x164>
    1254:	05 c0       	rjmp	.+10     	; 0x1260 <__pack_f+0x17c>
    1256:	ee 24       	eor	r14, r14
    1258:	ff 24       	eor	r15, r15
    125a:	87 01       	movw	r16, r14
    125c:	ef ef       	ldi	r30, 0xFF	; 255
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	6e 2f       	mov	r22, r30
    1262:	67 95       	ror	r22
    1264:	66 27       	eor	r22, r22
    1266:	67 95       	ror	r22
    1268:	90 2f       	mov	r25, r16
    126a:	9f 77       	andi	r25, 0x7F	; 127
    126c:	d7 94       	ror	r13
    126e:	dd 24       	eor	r13, r13
    1270:	d7 94       	ror	r13
    1272:	8e 2f       	mov	r24, r30
    1274:	86 95       	lsr	r24
    1276:	49 2f       	mov	r20, r25
    1278:	46 2b       	or	r20, r22
    127a:	58 2f       	mov	r21, r24
    127c:	5d 29       	or	r21, r13
    127e:	b7 01       	movw	r22, r14
    1280:	ca 01       	movw	r24, r20
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	ff 90       	pop	r15
    1288:	ef 90       	pop	r14
    128a:	df 90       	pop	r13
    128c:	08 95       	ret

0000128e <__unpack_f>:
    128e:	fc 01       	movw	r30, r24
    1290:	db 01       	movw	r26, r22
    1292:	40 81       	ld	r20, Z
    1294:	51 81       	ldd	r21, Z+1	; 0x01
    1296:	22 81       	ldd	r18, Z+2	; 0x02
    1298:	62 2f       	mov	r22, r18
    129a:	6f 77       	andi	r22, 0x7F	; 127
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	22 1f       	adc	r18, r18
    12a0:	22 27       	eor	r18, r18
    12a2:	22 1f       	adc	r18, r18
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	89 2f       	mov	r24, r25
    12a8:	88 0f       	add	r24, r24
    12aa:	82 2b       	or	r24, r18
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	99 1f       	adc	r25, r25
    12b2:	99 27       	eor	r25, r25
    12b4:	99 1f       	adc	r25, r25
    12b6:	11 96       	adiw	r26, 0x01	; 1
    12b8:	9c 93       	st	X, r25
    12ba:	11 97       	sbiw	r26, 0x01	; 1
    12bc:	21 15       	cp	r18, r1
    12be:	31 05       	cpc	r19, r1
    12c0:	a9 f5       	brne	.+106    	; 0x132c <__unpack_f+0x9e>
    12c2:	41 15       	cp	r20, r1
    12c4:	51 05       	cpc	r21, r1
    12c6:	61 05       	cpc	r22, r1
    12c8:	71 05       	cpc	r23, r1
    12ca:	11 f4       	brne	.+4      	; 0x12d0 <__unpack_f+0x42>
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    12ce:	37 c0       	rjmp	.+110    	; 0x133e <__unpack_f+0xb0>
    12d0:	82 e8       	ldi	r24, 0x82	; 130
    12d2:	9f ef       	ldi	r25, 0xFF	; 255
    12d4:	13 96       	adiw	r26, 0x03	; 3
    12d6:	9c 93       	st	X, r25
    12d8:	8e 93       	st	-X, r24
    12da:	12 97       	sbiw	r26, 0x02	; 2
    12dc:	9a 01       	movw	r18, r20
    12de:	ab 01       	movw	r20, r22
    12e0:	67 e0       	ldi	r22, 0x07	; 7
    12e2:	22 0f       	add	r18, r18
    12e4:	33 1f       	adc	r19, r19
    12e6:	44 1f       	adc	r20, r20
    12e8:	55 1f       	adc	r21, r21
    12ea:	6a 95       	dec	r22
    12ec:	d1 f7       	brne	.-12     	; 0x12e2 <__unpack_f+0x54>
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	8c 93       	st	X, r24
    12f2:	0d c0       	rjmp	.+26     	; 0x130e <__unpack_f+0x80>
    12f4:	22 0f       	add	r18, r18
    12f6:	33 1f       	adc	r19, r19
    12f8:	44 1f       	adc	r20, r20
    12fa:	55 1f       	adc	r21, r21
    12fc:	12 96       	adiw	r26, 0x02	; 2
    12fe:	8d 91       	ld	r24, X+
    1300:	9c 91       	ld	r25, X
    1302:	13 97       	sbiw	r26, 0x03	; 3
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	13 96       	adiw	r26, 0x03	; 3
    1308:	9c 93       	st	X, r25
    130a:	8e 93       	st	-X, r24
    130c:	12 97       	sbiw	r26, 0x02	; 2
    130e:	20 30       	cpi	r18, 0x00	; 0
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	38 07       	cpc	r19, r24
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	48 07       	cpc	r20, r24
    1318:	80 e4       	ldi	r24, 0x40	; 64
    131a:	58 07       	cpc	r21, r24
    131c:	58 f3       	brcs	.-42     	; 0x12f4 <__unpack_f+0x66>
    131e:	14 96       	adiw	r26, 0x04	; 4
    1320:	2d 93       	st	X+, r18
    1322:	3d 93       	st	X+, r19
    1324:	4d 93       	st	X+, r20
    1326:	5c 93       	st	X, r21
    1328:	17 97       	sbiw	r26, 0x07	; 7
    132a:	08 95       	ret
    132c:	2f 3f       	cpi	r18, 0xFF	; 255
    132e:	31 05       	cpc	r19, r1
    1330:	79 f4       	brne	.+30     	; 0x1350 <__unpack_f+0xc2>
    1332:	41 15       	cp	r20, r1
    1334:	51 05       	cpc	r21, r1
    1336:	61 05       	cpc	r22, r1
    1338:	71 05       	cpc	r23, r1
    133a:	19 f4       	brne	.+6      	; 0x1342 <__unpack_f+0xb4>
    133c:	84 e0       	ldi	r24, 0x04	; 4
    133e:	8c 93       	st	X, r24
    1340:	08 95       	ret
    1342:	64 ff       	sbrs	r22, 4
    1344:	03 c0       	rjmp	.+6      	; 0x134c <__unpack_f+0xbe>
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	8c 93       	st	X, r24
    134a:	12 c0       	rjmp	.+36     	; 0x1370 <__unpack_f+0xe2>
    134c:	1c 92       	st	X, r1
    134e:	10 c0       	rjmp	.+32     	; 0x1370 <__unpack_f+0xe2>
    1350:	2f 57       	subi	r18, 0x7F	; 127
    1352:	30 40       	sbci	r19, 0x00	; 0
    1354:	13 96       	adiw	r26, 0x03	; 3
    1356:	3c 93       	st	X, r19
    1358:	2e 93       	st	-X, r18
    135a:	12 97       	sbiw	r26, 0x02	; 2
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	8c 93       	st	X, r24
    1360:	87 e0       	ldi	r24, 0x07	; 7
    1362:	44 0f       	add	r20, r20
    1364:	55 1f       	adc	r21, r21
    1366:	66 1f       	adc	r22, r22
    1368:	77 1f       	adc	r23, r23
    136a:	8a 95       	dec	r24
    136c:	d1 f7       	brne	.-12     	; 0x1362 <__unpack_f+0xd4>
    136e:	70 64       	ori	r23, 0x40	; 64
    1370:	14 96       	adiw	r26, 0x04	; 4
    1372:	4d 93       	st	X+, r20
    1374:	5d 93       	st	X+, r21
    1376:	6d 93       	st	X+, r22
    1378:	7c 93       	st	X, r23
    137a:	17 97       	sbiw	r26, 0x07	; 7
    137c:	08 95       	ret

0000137e <__fpcmp_parts_f>:
    137e:	1f 93       	push	r17
    1380:	dc 01       	movw	r26, r24
    1382:	fb 01       	movw	r30, r22
    1384:	9c 91       	ld	r25, X
    1386:	92 30       	cpi	r25, 0x02	; 2
    1388:	08 f4       	brcc	.+2      	; 0x138c <__fpcmp_parts_f+0xe>
    138a:	47 c0       	rjmp	.+142    	; 0x141a <__fpcmp_parts_f+0x9c>
    138c:	80 81       	ld	r24, Z
    138e:	82 30       	cpi	r24, 0x02	; 2
    1390:	08 f4       	brcc	.+2      	; 0x1394 <__fpcmp_parts_f+0x16>
    1392:	43 c0       	rjmp	.+134    	; 0x141a <__fpcmp_parts_f+0x9c>
    1394:	94 30       	cpi	r25, 0x04	; 4
    1396:	51 f4       	brne	.+20     	; 0x13ac <__fpcmp_parts_f+0x2e>
    1398:	11 96       	adiw	r26, 0x01	; 1
    139a:	1c 91       	ld	r17, X
    139c:	84 30       	cpi	r24, 0x04	; 4
    139e:	99 f5       	brne	.+102    	; 0x1406 <__fpcmp_parts_f+0x88>
    13a0:	81 81       	ldd	r24, Z+1	; 0x01
    13a2:	68 2f       	mov	r22, r24
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	61 1b       	sub	r22, r17
    13a8:	71 09       	sbc	r23, r1
    13aa:	3f c0       	rjmp	.+126    	; 0x142a <__fpcmp_parts_f+0xac>
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	21 f0       	breq	.+8      	; 0x13b8 <__fpcmp_parts_f+0x3a>
    13b0:	92 30       	cpi	r25, 0x02	; 2
    13b2:	31 f4       	brne	.+12     	; 0x13c0 <__fpcmp_parts_f+0x42>
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	b9 f1       	breq	.+110    	; 0x1426 <__fpcmp_parts_f+0xa8>
    13b8:	81 81       	ldd	r24, Z+1	; 0x01
    13ba:	88 23       	and	r24, r24
    13bc:	89 f1       	breq	.+98     	; 0x1420 <__fpcmp_parts_f+0xa2>
    13be:	2d c0       	rjmp	.+90     	; 0x141a <__fpcmp_parts_f+0x9c>
    13c0:	11 96       	adiw	r26, 0x01	; 1
    13c2:	1c 91       	ld	r17, X
    13c4:	11 97       	sbiw	r26, 0x01	; 1
    13c6:	82 30       	cpi	r24, 0x02	; 2
    13c8:	f1 f0       	breq	.+60     	; 0x1406 <__fpcmp_parts_f+0x88>
    13ca:	81 81       	ldd	r24, Z+1	; 0x01
    13cc:	18 17       	cp	r17, r24
    13ce:	d9 f4       	brne	.+54     	; 0x1406 <__fpcmp_parts_f+0x88>
    13d0:	12 96       	adiw	r26, 0x02	; 2
    13d2:	2d 91       	ld	r18, X+
    13d4:	3c 91       	ld	r19, X
    13d6:	13 97       	sbiw	r26, 0x03	; 3
    13d8:	82 81       	ldd	r24, Z+2	; 0x02
    13da:	93 81       	ldd	r25, Z+3	; 0x03
    13dc:	82 17       	cp	r24, r18
    13de:	93 07       	cpc	r25, r19
    13e0:	94 f0       	brlt	.+36     	; 0x1406 <__fpcmp_parts_f+0x88>
    13e2:	28 17       	cp	r18, r24
    13e4:	39 07       	cpc	r19, r25
    13e6:	bc f0       	brlt	.+46     	; 0x1416 <__fpcmp_parts_f+0x98>
    13e8:	14 96       	adiw	r26, 0x04	; 4
    13ea:	8d 91       	ld	r24, X+
    13ec:	9d 91       	ld	r25, X+
    13ee:	0d 90       	ld	r0, X+
    13f0:	bc 91       	ld	r27, X
    13f2:	a0 2d       	mov	r26, r0
    13f4:	24 81       	ldd	r18, Z+4	; 0x04
    13f6:	35 81       	ldd	r19, Z+5	; 0x05
    13f8:	46 81       	ldd	r20, Z+6	; 0x06
    13fa:	57 81       	ldd	r21, Z+7	; 0x07
    13fc:	28 17       	cp	r18, r24
    13fe:	39 07       	cpc	r19, r25
    1400:	4a 07       	cpc	r20, r26
    1402:	5b 07       	cpc	r21, r27
    1404:	18 f4       	brcc	.+6      	; 0x140c <__fpcmp_parts_f+0x8e>
    1406:	11 23       	and	r17, r17
    1408:	41 f0       	breq	.+16     	; 0x141a <__fpcmp_parts_f+0x9c>
    140a:	0a c0       	rjmp	.+20     	; 0x1420 <__fpcmp_parts_f+0xa2>
    140c:	82 17       	cp	r24, r18
    140e:	93 07       	cpc	r25, r19
    1410:	a4 07       	cpc	r26, r20
    1412:	b5 07       	cpc	r27, r21
    1414:	40 f4       	brcc	.+16     	; 0x1426 <__fpcmp_parts_f+0xa8>
    1416:	11 23       	and	r17, r17
    1418:	19 f0       	breq	.+6      	; 0x1420 <__fpcmp_parts_f+0xa2>
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	05 c0       	rjmp	.+10     	; 0x142a <__fpcmp_parts_f+0xac>
    1420:	6f ef       	ldi	r22, 0xFF	; 255
    1422:	7f ef       	ldi	r23, 0xFF	; 255
    1424:	02 c0       	rjmp	.+4      	; 0x142a <__fpcmp_parts_f+0xac>
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	cb 01       	movw	r24, r22
    142c:	1f 91       	pop	r17
    142e:	08 95       	ret

00001430 <__divmodhi4>:
    1430:	97 fb       	bst	r25, 7
    1432:	09 2e       	mov	r0, r25
    1434:	07 26       	eor	r0, r23
    1436:	0a d0       	rcall	.+20     	; 0x144c <__divmodhi4_neg1>
    1438:	77 fd       	sbrc	r23, 7
    143a:	04 d0       	rcall	.+8      	; 0x1444 <__divmodhi4_neg2>
    143c:	0c d0       	rcall	.+24     	; 0x1456 <__udivmodhi4>
    143e:	06 d0       	rcall	.+12     	; 0x144c <__divmodhi4_neg1>
    1440:	00 20       	and	r0, r0
    1442:	1a f4       	brpl	.+6      	; 0x144a <__divmodhi4_exit>

00001444 <__divmodhi4_neg2>:
    1444:	70 95       	com	r23
    1446:	61 95       	neg	r22
    1448:	7f 4f       	sbci	r23, 0xFF	; 255

0000144a <__divmodhi4_exit>:
    144a:	08 95       	ret

0000144c <__divmodhi4_neg1>:
    144c:	f6 f7       	brtc	.-4      	; 0x144a <__divmodhi4_exit>
    144e:	90 95       	com	r25
    1450:	81 95       	neg	r24
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	08 95       	ret

00001456 <__udivmodhi4>:
    1456:	aa 1b       	sub	r26, r26
    1458:	bb 1b       	sub	r27, r27
    145a:	51 e1       	ldi	r21, 0x11	; 17
    145c:	07 c0       	rjmp	.+14     	; 0x146c <__udivmodhi4_ep>

0000145e <__udivmodhi4_loop>:
    145e:	aa 1f       	adc	r26, r26
    1460:	bb 1f       	adc	r27, r27
    1462:	a6 17       	cp	r26, r22
    1464:	b7 07       	cpc	r27, r23
    1466:	10 f0       	brcs	.+4      	; 0x146c <__udivmodhi4_ep>
    1468:	a6 1b       	sub	r26, r22
    146a:	b7 0b       	sbc	r27, r23

0000146c <__udivmodhi4_ep>:
    146c:	88 1f       	adc	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	5a 95       	dec	r21
    1472:	a9 f7       	brne	.-22     	; 0x145e <__udivmodhi4_loop>
    1474:	80 95       	com	r24
    1476:	90 95       	com	r25
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	08 95       	ret

0000147e <__prologue_saves__>:
    147e:	2f 92       	push	r2
    1480:	3f 92       	push	r3
    1482:	4f 92       	push	r4
    1484:	5f 92       	push	r5
    1486:	6f 92       	push	r6
    1488:	7f 92       	push	r7
    148a:	8f 92       	push	r8
    148c:	9f 92       	push	r9
    148e:	af 92       	push	r10
    1490:	bf 92       	push	r11
    1492:	cf 92       	push	r12
    1494:	df 92       	push	r13
    1496:	ef 92       	push	r14
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	ca 1b       	sub	r28, r26
    14a8:	db 0b       	sbc	r29, r27
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	09 94       	ijmp

000014b6 <__epilogue_restores__>:
    14b6:	2a 88       	ldd	r2, Y+18	; 0x12
    14b8:	39 88       	ldd	r3, Y+17	; 0x11
    14ba:	48 88       	ldd	r4, Y+16	; 0x10
    14bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    14be:	6e 84       	ldd	r6, Y+14	; 0x0e
    14c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    14c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    14c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    14c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    14c8:	b9 84       	ldd	r11, Y+9	; 0x09
    14ca:	c8 84       	ldd	r12, Y+8	; 0x08
    14cc:	df 80       	ldd	r13, Y+7	; 0x07
    14ce:	ee 80       	ldd	r14, Y+6	; 0x06
    14d0:	fd 80       	ldd	r15, Y+5	; 0x05
    14d2:	0c 81       	ldd	r16, Y+4	; 0x04
    14d4:	1b 81       	ldd	r17, Y+3	; 0x03
    14d6:	aa 81       	ldd	r26, Y+2	; 0x02
    14d8:	b9 81       	ldd	r27, Y+1	; 0x01
    14da:	ce 0f       	add	r28, r30
    14dc:	d1 1d       	adc	r29, r1
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	ed 01       	movw	r28, r26
    14ea:	08 95       	ret

000014ec <_exit>:
    14ec:	f8 94       	cli

000014ee <__stop_program>:
    14ee:	ff cf       	rjmp	.-2      	; 0x14ee <__stop_program>
