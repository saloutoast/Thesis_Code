
TriCentering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000011c8  0000125c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080010e  0080010e  0000126a  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  0000126a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001d3  00000000  00000000  000013ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000021f4  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001065  00000000  00000000  00003791  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001427  00000000  00000000  000047f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00005c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000468  00000000  00000000  00005df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000932  00000000  00000000  00006258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00006b8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_23>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ec       	ldi	r30, 0xC8	; 200
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 30       	cpi	r26, 0x0E	; 14
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ae e0       	ldi	r26, 0x0E	; 14
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 32       	cpi	r26, 0x25	; 37
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 06 02 	call	0x40c	; 0x40c <main>
      9e:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_23>:

	}

}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25

	if (rcving==0) {
      b8:	80 91 14 01 	lds	r24, 0x0114
      bc:	88 23       	and	r24, r24
      be:	89 f4       	brne	.+34     	; 0xe2 <__vector_23+0x3c>

		TCNT2=0;
      c0:	10 92 b2 00 	sts	0x00B2, r1
		rcving=1;
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	80 93 14 01 	sts	0x0114, r24
		rcvd=0x80;
      ca:	80 e8       	ldi	r24, 0x80	; 128
      cc:	80 93 15 01 	sts	0x0115, r24
		ACSR &= ~(1<<ACIS0); // change to falling edge
      d0:	80 b7       	in	r24, 0x30	; 48
      d2:	8e 7f       	andi	r24, 0xFE	; 254
      d4:	80 bf       	out	0x30, r24	; 48
		rcv_sx = 0; // reset success flag
      d6:	10 92 17 01 	sts	0x0117, r1
      da:	10 92 16 01 	sts	0x0116, r1

		//PORTB |= (1<<PORTB0); // clear success LEDs from previous message
		PORTB &= ~(1<<PORTB1);
      de:	29 98       	cbi	0x05, 1	; 5
      e0:	9c c0       	rjmp	.+312    	; 0x21a <__vector_23+0x174>
		//PORTB &= ~(1<<PORTB2);

	} else { // first rising edge has been detected (rcving=1)

		if (!(ACSR&(1<<ACIS0))) { // check for first falling edge
      e2:	00 b6       	in	r0, 0x30	; 48
      e4:	00 fc       	sbrc	r0, 0
      e6:	0d c0       	rjmp	.+26     	; 0x102 <__vector_23+0x5c>

			distance = 0;
      e8:	10 92 18 01 	sts	0x0118, r1
			distance |= TCNT2; // use timer value for distance
      ec:	80 91 18 01 	lds	r24, 0x0118
      f0:	90 91 b2 00 	lds	r25, 0x00B2
      f4:	98 2b       	or	r25, r24
      f6:	90 93 18 01 	sts	0x0118, r25
			ACSR |= (1<<ACIS0); // switch back to rising edge
      fa:	80 b7       	in	r24, 0x30	; 48
      fc:	81 60       	ori	r24, 0x01	; 1
      fe:	80 bf       	out	0x30, r24	; 48
     100:	8c c0       	rjmp	.+280    	; 0x21a <__vector_23+0x174>
		} else { // on subsequent rising edges
			// TODO: add LED debugging for each bit
			//PORTB |= (1<<PORTB0);

			// match rising edges to closest expected time in rcvd
			bit_time = 0;
     102:	10 92 19 01 	sts	0x0119, r1
			bit_time |= TCNT2; // time that rising edge was detected
     106:	80 91 19 01 	lds	r24, 0x0119
     10a:	90 91 b2 00 	lds	r25, 0x00B2
     10e:	98 2b       	or	r25, r24
     110:	90 93 19 01 	sts	0x0119, r25
			
			if ((bit_time>=10)&(bit_time<=17)) { rcvd |= 0x40; }
     114:	80 91 19 01 	lds	r24, 0x0119
     118:	90 91 19 01 	lds	r25, 0x0119
     11c:	8a 30       	cpi	r24, 0x0A	; 10
     11e:	30 f0       	brcs	.+12     	; 0x12c <__vector_23+0x86>
     120:	92 31       	cpi	r25, 0x12	; 18
     122:	20 f4       	brcc	.+8      	; 0x12c <__vector_23+0x86>
     124:	80 91 15 01 	lds	r24, 0x0115
     128:	80 64       	ori	r24, 0x40	; 64
     12a:	3b c0       	rjmp	.+118    	; 0x1a2 <__vector_23+0xfc>
			else if ((bit_time>=22)&(bit_time<=29)) { rcvd |= 0x20; }
     12c:	80 91 19 01 	lds	r24, 0x0119
     130:	90 91 19 01 	lds	r25, 0x0119
     134:	86 31       	cpi	r24, 0x16	; 22
     136:	30 f0       	brcs	.+12     	; 0x144 <__vector_23+0x9e>
     138:	9e 31       	cpi	r25, 0x1E	; 30
     13a:	20 f4       	brcc	.+8      	; 0x144 <__vector_23+0x9e>
     13c:	80 91 15 01 	lds	r24, 0x0115
     140:	80 62       	ori	r24, 0x20	; 32
     142:	2f c0       	rjmp	.+94     	; 0x1a2 <__vector_23+0xfc>
			else if ((bit_time>=35)&(bit_time<=42)) { rcvd |= 0x10; }
     144:	80 91 19 01 	lds	r24, 0x0119
     148:	90 91 19 01 	lds	r25, 0x0119
     14c:	83 32       	cpi	r24, 0x23	; 35
     14e:	30 f0       	brcs	.+12     	; 0x15c <__vector_23+0xb6>
     150:	9b 32       	cpi	r25, 0x2B	; 43
     152:	20 f4       	brcc	.+8      	; 0x15c <__vector_23+0xb6>
     154:	80 91 15 01 	lds	r24, 0x0115
     158:	80 61       	ori	r24, 0x10	; 16
     15a:	23 c0       	rjmp	.+70     	; 0x1a2 <__vector_23+0xfc>
			else if ((bit_time>=47)&(bit_time<=54)) { rcvd |= 0x08; }
     15c:	80 91 19 01 	lds	r24, 0x0119
     160:	90 91 19 01 	lds	r25, 0x0119
     164:	8f 32       	cpi	r24, 0x2F	; 47
     166:	30 f0       	brcs	.+12     	; 0x174 <__vector_23+0xce>
     168:	97 33       	cpi	r25, 0x37	; 55
     16a:	20 f4       	brcc	.+8      	; 0x174 <__vector_23+0xce>
     16c:	80 91 15 01 	lds	r24, 0x0115
     170:	88 60       	ori	r24, 0x08	; 8
     172:	17 c0       	rjmp	.+46     	; 0x1a2 <__vector_23+0xfc>
			else if ((bit_time>=60)&(bit_time<=67)) { rcvd |= 0x04; }
     174:	80 91 19 01 	lds	r24, 0x0119
     178:	90 91 19 01 	lds	r25, 0x0119
     17c:	8c 33       	cpi	r24, 0x3C	; 60
     17e:	30 f0       	brcs	.+12     	; 0x18c <__vector_23+0xe6>
     180:	94 34       	cpi	r25, 0x44	; 68
     182:	20 f4       	brcc	.+8      	; 0x18c <__vector_23+0xe6>
     184:	80 91 15 01 	lds	r24, 0x0115
     188:	84 60       	ori	r24, 0x04	; 4
     18a:	0b c0       	rjmp	.+22     	; 0x1a2 <__vector_23+0xfc>
			else if ((bit_time>=72)&(bit_time<=79)) { rcvd |= 0x02; }
     18c:	80 91 19 01 	lds	r24, 0x0119
     190:	90 91 19 01 	lds	r25, 0x0119
     194:	88 34       	cpi	r24, 0x48	; 72
     196:	40 f0       	brcs	.+16     	; 0x1a8 <__vector_23+0x102>
     198:	90 35       	cpi	r25, 0x50	; 80
     19a:	30 f4       	brcc	.+12     	; 0x1a8 <__vector_23+0x102>
     19c:	80 91 15 01 	lds	r24, 0x0115
     1a0:	82 60       	ori	r24, 0x02	; 2
     1a2:	80 93 15 01 	sts	0x0115, r24
     1a6:	39 c0       	rjmp	.+114    	; 0x21a <__vector_23+0x174>
			else if ((bit_time>=85)&(bit_time<=92)) { // eighth bit has been received
     1a8:	80 91 19 01 	lds	r24, 0x0119
     1ac:	90 91 19 01 	lds	r25, 0x0119
     1b0:	85 35       	cpi	r24, 0x55	; 85
     1b2:	68 f1       	brcs	.+90     	; 0x20e <__vector_23+0x168>
     1b4:	9d 35       	cpi	r25, 0x5D	; 93
     1b6:	58 f5       	brcc	.+86     	; 0x20e <__vector_23+0x168>
				rcvd |= 0x01; 
     1b8:	80 91 15 01 	lds	r24, 0x0115
     1bc:	81 60       	ori	r24, 0x01	; 1
     1be:	80 93 15 01 	sts	0x0115, r24
				rcv_sx = 1;
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	90 93 17 01 	sts	0x0117, r25
     1ca:	80 93 16 01 	sts	0x0116, r24
				lastRcv = 0;
     1ce:	10 92 1a 01 	sts	0x011A, r1
				lastRcv |= rcvd; // store message
     1d2:	90 91 1a 01 	lds	r25, 0x011A
     1d6:	80 91 15 01 	lds	r24, 0x0115
     1da:	89 2b       	or	r24, r25
     1dc:	80 93 1a 01 	sts	0x011A, r24

				// turn on LEDs for success
				PORTB |= (1<<PORTB1);
     1e0:	29 9a       	sbi	0x05, 1	; 5
				//PORTB &= ~(1<<PORTB0);
				//if (lastRcv==toRcv1) { PORTB |= (1<<PORTB2); }
				//if (lastRcv==toRcv2) { PORTB |= (1<<PORTB0); }

				rcv_time = 0;
     1e2:	10 92 1c 01 	sts	0x011C, r1
     1e6:	10 92 1b 01 	sts	0x011B, r1
				rcv_time |= TCNT1;
     1ea:	80 91 1b 01 	lds	r24, 0x011B
     1ee:	90 91 1c 01 	lds	r25, 0x011C
     1f2:	20 91 84 00 	lds	r18, 0x0084
     1f6:	30 91 85 00 	lds	r19, 0x0085
     1fa:	82 2b       	or	r24, r18
     1fc:	93 2b       	or	r25, r19
     1fe:	90 93 1c 01 	sts	0x011C, r25
     202:	80 93 1b 01 	sts	0x011B, r24
				TCNT1 = 0; // reset timer1 on received messages
     206:	10 92 85 00 	sts	0x0085, r1
     20a:	10 92 84 00 	sts	0x0084, r1
				rcving = 0; // reset receiving variables
				TCNT2 = 0;
				rcvd = 0;

			}  else { // bad rising edge means message is bad, discard and reset
				rcving = 0; // reset receiving variables
     20e:	10 92 14 01 	sts	0x0114, r1
				TCNT2 = 0;
     212:	10 92 b2 00 	sts	0x00B2, r1
				rcvd = 0;
     216:	10 92 15 01 	sts	0x0115, r1
	/* while(ACSR & (1<<ACO)) {
		PORTB |= (1<<PORTB0);
	}
	PORTB &= ~(1<<PORTB0); */

} 
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	3f 91       	pop	r19
     220:	2f 91       	pop	r18
     222:	0f 90       	pop	r0
     224:	0f be       	out	0x3f, r0	; 63
     226:	0f 90       	pop	r0
     228:	1f 90       	pop	r1
     22a:	18 95       	reti

0000022c <__vector_7>:

// reset routine for message reception
ISR(TIMER2_COMPA_vect) { // timer2 interrupt routine
     22c:	1f 92       	push	r1
     22e:	0f 92       	push	r0
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	0f 92       	push	r0
     234:	11 24       	eor	r1, r1

	rcving = 0;
     236:	10 92 14 01 	sts	0x0114, r1
	rcvd = 0;
     23a:	10 92 15 01 	sts	0x0115, r1
	//PORTB &= ~(1<<PORTB0);
	PORTB &= ~(1<<PORTB1);
     23e:	29 98       	cbi	0x05, 1	; 5

}
     240:	0f 90       	pop	r0
     242:	0f be       	out	0x3f, r0	; 63
     244:	0f 90       	pop	r0
     246:	1f 90       	pop	r1
     248:	18 95       	reti

0000024a <__vector_14>:

// routine for timer0 to send messages, pause for a longer time between messages
ISR(TIMER0_COMPA_vect) { // timer0 interrupt routine
     24a:	1f 92       	push	r1
     24c:	0f 92       	push	r0
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	0f 92       	push	r0
     252:	11 24       	eor	r1, r1
     254:	2f 93       	push	r18
     256:	3f 93       	push	r19
     258:	4f 93       	push	r20
     25a:	5f 93       	push	r21
     25c:	6f 93       	push	r22
     25e:	7f 93       	push	r23
     260:	8f 93       	push	r24
     262:	9f 93       	push	r25
     264:	ef 93       	push	r30
     266:	ff 93       	push	r31

	if (bits_sent<8) { // if the whole message has not been sent
     268:	80 91 0e 01 	lds	r24, 0x010E
     26c:	90 91 0f 01 	lds	r25, 0x010F
     270:	08 97       	sbiw	r24, 0x08	; 8
     272:	0c f0       	brlt	.+2      	; 0x276 <__vector_14+0x2c>
     274:	40 c0       	rjmp	.+128    	; 0x2f6 <__vector_14+0xac>
		if (pause==0) { // 0,1 half of bit to be sent
     276:	80 91 10 01 	lds	r24, 0x0110
     27a:	90 91 11 01 	lds	r25, 0x0111
     27e:	89 2b       	or	r24, r25
     280:	a1 f5       	brne	.+104    	; 0x2ea <__vector_14+0xa0>
			new_bit = (toSend & (1<<(7-bits_sent))) >> (7-bits_sent);
     282:	40 91 00 01 	lds	r20, 0x0100
     286:	80 91 0e 01 	lds	r24, 0x010E
     28a:	90 91 0f 01 	lds	r25, 0x010F
     28e:	e0 91 0e 01 	lds	r30, 0x010E
     292:	f0 91 0f 01 	lds	r31, 0x010F
     296:	27 e0       	ldi	r18, 0x07	; 7
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	b9 01       	movw	r22, r18
     29c:	68 1b       	sub	r22, r24
     29e:	79 0b       	sbc	r23, r25
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__vector_14+0x60>
     2a6:	88 0f       	add	r24, r24
     2a8:	99 1f       	adc	r25, r25
     2aa:	6a 95       	dec	r22
     2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <__vector_14+0x5c>
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	84 23       	and	r24, r20
     2b2:	95 23       	and	r25, r21
     2b4:	2e 1b       	sub	r18, r30
     2b6:	3f 0b       	sbc	r19, r31
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <__vector_14+0x74>
     2ba:	95 95       	asr	r25
     2bc:	87 95       	ror	r24
     2be:	2a 95       	dec	r18
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <__vector_14+0x70>
     2c2:	90 93 13 01 	sts	0x0113, r25
     2c6:	80 93 12 01 	sts	0x0112, r24
			if(new_bit==1) { // turn on LEDs
     2ca:	80 91 12 01 	lds	r24, 0x0112
     2ce:	90 91 13 01 	lds	r25, 0x0113
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	11 f4       	brne	.+4      	; 0x2da <__vector_14+0x90>
				PORTC |= (1<<PORTC3);
     2d6:	43 9a       	sbi	0x08, 3	; 8
     2d8:	01 c0       	rjmp	.+2      	; 0x2dc <__vector_14+0x92>
				//PORTB |= (1<<PORTB2);
			} else { // turn off LEDs
				PORTC &= ~(1<<PORTC3);
     2da:	43 98       	cbi	0x08, 3	; 8
				//PORTB &= ~(1<<PORTB2);
			}
			pause = 1; // pause after sending a bit
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	90 93 11 01 	sts	0x0111, r25
     2e4:	80 93 10 01 	sts	0x0110, r24
     2e8:	1a c0       	rjmp	.+52     	; 0x31e <__vector_14+0xd4>
		} else { // pausing between bits
			pause = 0; // send new bit on next interrupt
     2ea:	10 92 11 01 	sts	0x0111, r1
     2ee:	10 92 10 01 	sts	0x0110, r1
			PORTC &= ~(1<<PORTC3); // ensure LEDs are low for pause
     2f2:	43 98       	cbi	0x08, 3	; 8
     2f4:	0b c0       	rjmp	.+22     	; 0x30c <__vector_14+0xc2>
			//PORTB &= ~(1<<PORTB2);
			bits_sent += 1; // increment bits_sent after each pause
		}
	} else { // if bits_sent >= 8, reset variables and pause for a bit
		if (bits_sent>=40) { // wait for 2 messages, send again
     2f6:	80 91 0e 01 	lds	r24, 0x010E
     2fa:	90 91 0f 01 	lds	r25, 0x010F
     2fe:	88 97       	sbiw	r24, 0x28	; 40
     300:	2c f0       	brlt	.+10     	; 0x30c <__vector_14+0xc2>
			bits_sent = 0; 
     302:	10 92 0f 01 	sts	0x010F, r1
     306:	10 92 0e 01 	sts	0x010E, r1
     30a:	09 c0       	rjmp	.+18     	; 0x31e <__vector_14+0xd4>
		} else {
			bits_sent+=1; // increment bits_sent for timing between messages
     30c:	80 91 0e 01 	lds	r24, 0x010E
     310:	90 91 0f 01 	lds	r25, 0x010F
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	90 93 0f 01 	sts	0x010F, r25
     31a:	80 93 0e 01 	sts	0x010E, r24
		}
		
		// TODO: could disable ISR here, for send_msg function?
	}

}
     31e:	ff 91       	pop	r31
     320:	ef 91       	pop	r30
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	7f 91       	pop	r23
     328:	6f 91       	pop	r22
     32a:	5f 91       	pop	r21
     32c:	4f 91       	pop	r20
     32e:	3f 91       	pop	r19
     330:	2f 91       	pop	r18
     332:	0f 90       	pop	r0
     334:	0f be       	out	0x3f, r0	; 63
     336:	0f 90       	pop	r0
     338:	1f 90       	pop	r1
     33a:	18 95       	reti

0000033c <detach>:

// "move" by detaching magnet for a specified time in ms
void detach(double time) {
     33c:	af 92       	push	r10
     33e:	bf 92       	push	r11
     340:	cf 92       	push	r12
     342:	df 92       	push	r13
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	5b 01       	movw	r10, r22
     34e:	6c 01       	movw	r12, r24

	//switch E.P.M. direction 1 (detach)
	PORTB |= (1<<PORTB0); // set inner LED, indicating direction 1
     350:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<6);//activate E.P.M direction 1
     352:	2e 9a       	sbi	0x05, 6	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     354:	80 ef       	ldi	r24, 0xF0	; 240
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <detach+0x1c>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     35c:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     35e:	2f 98       	cbi	0x05, 7	; 5
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     360:	c6 01       	movw	r24, r12
     362:	b5 01       	movw	r22, r10
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	4a ef       	ldi	r20, 0xFA	; 250
     36a:	54 e4       	ldi	r21, 0x44	; 68
     36c:	0e 94 27 05 	call	0xa4e	; 0xa4e <__mulsf3>
     370:	7b 01       	movw	r14, r22
     372:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e8       	ldi	r20, 0x80	; 128
     37a:	5f e3       	ldi	r21, 0x3F	; 63
     37c:	0e 94 81 06 	call	0xd02	; 0xd02 <__ltsf2>
     380:	88 23       	and	r24, r24
     382:	1c f4       	brge	.+6      	; 0x38a <detach+0x4e>
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	24 c0       	rjmp	.+72     	; 0x3d2 <detach+0x96>
		__ticks = 1;
	else if (__tmp > 65535)
     38a:	c8 01       	movw	r24, r16
     38c:	b7 01       	movw	r22, r14
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	3f ef       	ldi	r19, 0xFF	; 255
     392:	4f e7       	ldi	r20, 0x7F	; 127
     394:	57 e4       	ldi	r21, 0x47	; 71
     396:	0e 94 21 06 	call	0xc42	; 0xc42 <__gtsf2>
     39a:	18 16       	cp	r1, r24
     39c:	b4 f4       	brge	.+44     	; 0x3ca <detach+0x8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     39e:	c6 01       	movw	r24, r12
     3a0:	b5 01       	movw	r22, r10
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	40 e2       	ldi	r20, 0x20	; 32
     3a8:	51 e4       	ldi	r21, 0x41	; 65
     3aa:	0e 94 27 05 	call	0xa4e	; 0xa4e <__mulsf3>
     3ae:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fixunssfsi>
     3b2:	88 ec       	ldi	r24, 0xC8	; 200
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <detach+0x86>
     3b8:	fc 01       	movw	r30, r24
     3ba:	31 97       	sbiw	r30, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <detach+0x7e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3be:	61 50       	subi	r22, 0x01	; 1
     3c0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3c2:	61 15       	cp	r22, r1
     3c4:	71 05       	cpc	r23, r1
     3c6:	c1 f7       	brne	.-16     	; 0x3b8 <detach+0x7c>
     3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <detach+0x9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ca:	c8 01       	movw	r24, r16
     3cc:	b7 01       	movw	r22, r14
     3ce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__fixunssfsi>
     3d2:	cb 01       	movw	r24, r22
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <detach+0x98>

	_delay_ms(time); // stay detached for desired time

	//switch E.P.M. direction 2 (re-attach)
	PORTB &= ~(1<<PORTB0); // clear inner LED, indicating direction 2
     3d8:	28 98       	cbi	0x05, 0	; 5
	PORTB |= (1<<7);//activate E.P.M direction 2
     3da:	2f 9a       	sbi	0x05, 7	; 5
     3dc:	80 ef       	ldi	r24, 0xF0	; 240
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <detach+0xa4>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     3e4:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     3e6:	2f 98       	cbi	0x05, 7	; 5

	return;
}
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	df 90       	pop	r13
     3f2:	cf 90       	pop	r12
     3f4:	bf 90       	pop	r11
     3f6:	af 90       	pop	r10
     3f8:	08 95       	ret

000003fa <reset_EPM>:

// reset EPM in case of robot/code malfunction
void reset_EPM(void) {

	//switch E.P.M. direction 2 (re-attach)
	PORTB &= ~(1<<PORTB0); // clear inner LED, indicating direction 2
     3fa:	28 98       	cbi	0x05, 0	; 5
	PORTB |= (1<<7);//activate E.P.M direction 2
     3fc:	2f 9a       	sbi	0x05, 7	; 5
     3fe:	80 ef       	ldi	r24, 0xF0	; 240
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <reset_EPM+0x8>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     406:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     408:	2f 98       	cbi	0x05, 7	; 5

	return;

}
     40a:	08 95       	ret

0000040c <main>:
static volatile char desired_beacon = 0;
static volatile int center_threshold = 10;

int main(void) {

	DDRB=0;
     40c:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
     40e:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
     410:	87 e0       	ldi	r24, 0x07	; 7
     412:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7); // enable EPM pins
     414:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
     416:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
     418:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
     41a:	2f 98       	cbi	0x05, 7	; 5

	DDRC=0; // enable IR LED
     41c:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
     41e:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
     420:	88 e0       	ldi	r24, 0x08	; 8
     422:	87 b9       	out	0x07, r24	; 7

	cli(); // disable interrupts
     424:	f8 94       	cli

	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
     42c:	8b e0       	ldi	r24, 0x0B	; 11
     42e:	80 bf       	out	0x30, r24	; 48

	// Initialize timer0 for timing sending of messages (1/8 prescaler, 8-bit timer rolls over at ~3.9 kHz Hz)
	TCCR0A |= (1<<WGM01); // // do not change any output pin, clear at compare match with OCR0A
     430:	84 b5       	in	r24, 0x24	; 36
     432:	82 60       	ori	r24, 0x02	; 2
     434:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0<<CS02)|(1<<CS01)|(0<<CS00); // prescaler of 1/8
     436:	85 b5       	in	r24, 0x25	; 37
     438:	82 60       	ori	r24, 0x02	; 2
     43a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 100; // interrupt every 100 counts, for sending a new bit every 2 cycles
     43c:	84 e6       	ldi	r24, 0x64	; 100
     43e:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
     440:	80 91 6e 00 	lds	r24, 0x006E
     444:	82 60       	ori	r24, 0x02	; 2
     446:	80 93 6e 00 	sts	0x006E, r24

	// Initialize timer1 for neighbor-marking, based on times of received messages
	TCCR1B |= (1<<CS12)|(0<<CS11)|(1<<CS10); // 1/1024 prescaler, counts at ~7.8kHz (1 count is 0.128 ms), 16-bit timer
     44a:	80 91 81 00 	lds	r24, 0x0081
     44e:	85 60       	ori	r24, 0x05	; 5
     450:	80 93 81 00 	sts	0x0081, r24

	// Initialize timer2 for timing receiving of messages (1/128 prescaler, 8-bit timer rolls over at ~250 Hz )
	TCCR2A |= (1<<WGM21); // do not change any output pin, clear at compare match with OCR2A
     454:	80 91 b0 00 	lds	r24, 0x00B0
     458:	82 60       	ori	r24, 0x02	; 2
     45a:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = (1<<OCIE2A); // compare match on OCR2A
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	80 93 70 00 	sts	0x0070, r24
    OCR2A = 200; // compare every 200 counts (every 3.2ms, 2x length of message)
     464:	88 ec       	ldi	r24, 0xC8	; 200
     466:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= (1<<CS22)|(0<<CS21)|(1<<CS20); // prescaler of 1/128: count every 16us
     46a:	80 91 b1 00 	lds	r24, 0x00B1
     46e:	85 60       	ori	r24, 0x05	; 5
     470:	80 93 b1 00 	sts	0x00B1, r24

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
     474:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
     476:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
     478:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<PORTC3);
     47a:	43 9a       	sbi	0x08, 3	; 8
     47c:	80 ed       	ldi	r24, 0xD0	; 208
     47e:	97 e0       	ldi	r25, 0x07	; 7
     480:	28 ec       	ldi	r18, 0xC8	; 200
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	f9 01       	movw	r30, r18
     486:	31 97       	sbiw	r30, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <main+0x7a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     48a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     48c:	d9 f7       	brne	.-10     	; 0x484 <main+0x78>
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
     48e:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     490:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
     492:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1<<PORTC3);
     494:	43 98       	cbi	0x08, 3	; 8

	// make sure EPM is activated at startup
	reset_EPM();
     496:	0e 94 fd 01 	call	0x3fa	; 0x3fa <reset_EPM>
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	48 ec       	ldi	r20, 0xC8	; 200
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	0b c0       	rjmp	.+22     	; 0x4ba <main+0xae>
     4a4:	fa 01       	movw	r30, r20
     4a6:	31 97       	sbiw	r30, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <main+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ac:	d9 f7       	brne	.-10     	; 0x4a4 <main+0x98>
	// wait here for a time (~20s) until all modules are spinning, then blink LEDs again
	int ww=0;
	while (ww<300) {

		_delay_ms(100);
		ww+=1;
     4ae:	2f 5f       	subi	r18, 0xFF	; 255
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
	// make sure EPM is activated at startup
	reset_EPM();

	// wait here for a time (~20s) until all modules are spinning, then blink LEDs again
	int ww=0;
	while (ww<300) {
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	2c 32       	cpi	r18, 0x2C	; 44
     4b6:	38 07       	cpc	r19, r24
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <main+0xb4>
     4ba:	88 ee       	ldi	r24, 0xE8	; 232
     4bc:	93 e0       	ldi	r25, 0x03	; 3
     4be:	f2 cf       	rjmp	.-28     	; 0x4a4 <main+0x98>
		_delay_ms(100);
		ww+=1;

	}

	PORTB |= (1<<PORTB0); // green
     4c0:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
     4c2:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
     4c4:	2a 9a       	sbi	0x05, 2	; 5
     4c6:	80 ed       	ldi	r24, 0xD0	; 208
     4c8:	97 e0       	ldi	r25, 0x07	; 7
     4ca:	28 ec       	ldi	r18, 0xC8	; 200
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	f9 01       	movw	r30, r18
     4d0:	31 97       	sbiw	r30, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <main+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d6:	d9 f7       	brne	.-10     	; 0x4ce <main+0xc2>
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
     4d8:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     4da:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
     4dc:	2a 98       	cbi	0x05, 2	; 5

	sei(); // enable interrupts
     4de:	78 94       	sei
						}
					}
					else if (lastRcv==beaconID3) { // if other two times are not zero, store time and add to beacons rcvd; else ignore
						if ((beacons_rcvd==2) && (beaconID1_time>0) && (beaconID2_time>0)) {
							beaconID3_time |= rcv_time;
							beacons_rcvd = 3;
     4e0:	63 e0       	ldi	r22, 0x03	; 3
						}
					}
					else if (lastRcv==beaconID2) { // if time3 is zero and time1 is not 0, store time and add to beacons rcvd; else ignore
						if ((beacons_rcvd==1) && (beaconID3_time==0) && (beaconID1_time>0)) {
							beaconID2_time |= rcv_time;
							beacons_rcvd = 2;
     4e2:	42 e0       	ldi	r20, 0x02	; 2
			if ((rcv_sx==1) && (rcv_ct==10)) { // got a new message and already calibrated
				if (beacons_rcvd < 3) { // store times from the three beacons in a row
					if (lastRcv==beaconID1) { // if other two times are 0, store time and add to beacons rcvd; else reset
						if ((beacons_rcvd==0) && (beaconID2_time==0) && (beaconID3_time==0)) {
							beaconID1_time |= rcv_time;
							beacons_rcvd = 1;
     4e4:	51 e0       	ldi	r21, 0x01	; 1
	int detach_time = 0;
	int dd = 0;
	
	while(1) { // main loop

		if (toSend==mobileID) { // don't bother trying to track beacons if you are not the mobile robot
     4e6:	90 91 00 01 	lds	r25, 0x0100
     4ea:	80 91 01 01 	lds	r24, 0x0101
     4ee:	98 17       	cp	r25, r24
     4f0:	d1 f7       	brne	.-12     	; 0x4e6 <main+0xda>
		
			// take 10 messages to calculate period		
			if ((rcv_sx==1) && (rcv_ct<10)) {
     4f2:	80 91 16 01 	lds	r24, 0x0116
     4f6:	90 91 17 01 	lds	r25, 0x0117
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	21 f5       	brne	.+72     	; 0x546 <main+0x13a>
     4fe:	80 91 1d 01 	lds	r24, 0x011D
     502:	8a 30       	cpi	r24, 0x0A	; 10
     504:	00 f5       	brcc	.+64     	; 0x546 <main+0x13a>
				if (lastRcv==beaconID1) { // only messages from beacon 1 for calculating period
     506:	90 91 1a 01 	lds	r25, 0x011A
     50a:	80 91 02 01 	lds	r24, 0x0102
     50e:	98 17       	cp	r25, r24
     510:	d1 f4       	brne	.+52     	; 0x546 <main+0x13a>
					PORTB |= (1<<PORTB2); // turn on LED to indicate calibration
     512:	2a 9a       	sbi	0x05, 2	; 5
					if (rcv_time>700) {
     514:	80 91 1b 01 	lds	r24, 0x011B
     518:	90 91 1c 01 	lds	r25, 0x011C
     51c:	8d 5b       	subi	r24, 0xBD	; 189
     51e:	92 40       	sbci	r25, 0x02	; 2
     520:	74 f0       	brlt	.+28     	; 0x53e <main+0x132>
						per = (per+rcv_time)/2;
     522:	80 91 1b 01 	lds	r24, 0x011B
     526:	90 91 1c 01 	lds	r25, 0x011C
						if (rcv_ct==9) {
     52a:	80 91 1d 01 	lds	r24, 0x011D
     52e:	89 30       	cpi	r24, 0x09	; 9
     530:	09 f4       	brne	.+2      	; 0x534 <main+0x128>
							detach_time = per/5; // time after receiving a message that it will detach the EPM
							//detach_time = detach_time/8; // convert roughly to ms
							PORTB &= ~(1<<PORTB2); // clear LED to indicate end of calibration
     532:	2a 98       	cbi	0x05, 2	; 5
						}
						rcv_ct+=1;	
     534:	80 91 1d 01 	lds	r24, 0x011D
     538:	8f 5f       	subi	r24, 0xFF	; 255
     53a:	80 93 1d 01 	sts	0x011D, r24
					}
					rcv_sx=0;
     53e:	10 92 17 01 	sts	0x0117, r1
     542:	10 92 16 01 	sts	0x0116, r1

			// calculate angles based on times between beacon messages, then pick beacon to move towards
			// rotation A: take in three messages, calculate "angles" (times between receptions)
			// rotation B: move towards selected beacon (towards beacon not asociated with the largest angle)
		
			if ((rcv_sx==1) && (rcv_ct==10)) { // got a new message and already calibrated
     546:	80 91 16 01 	lds	r24, 0x0116
     54a:	90 91 17 01 	lds	r25, 0x0117
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	51 f6       	brne	.-108    	; 0x4e6 <main+0xda>
     552:	80 91 1d 01 	lds	r24, 0x011D
     556:	8a 30       	cpi	r24, 0x0A	; 10
     558:	31 f6       	brne	.-116    	; 0x4e6 <main+0xda>
				if (beacons_rcvd < 3) { // store times from the three beacons in a row
     55a:	80 91 1e 01 	lds	r24, 0x011E
     55e:	83 30       	cpi	r24, 0x03	; 3
     560:	08 f0       	brcs	.+2      	; 0x564 <main+0x158>
     562:	9a c0       	rjmp	.+308    	; 0x698 <main+0x28c>
					if (lastRcv==beaconID1) { // if other two times are 0, store time and add to beacons rcvd; else reset
     564:	90 91 1a 01 	lds	r25, 0x011A
     568:	80 91 02 01 	lds	r24, 0x0102
     56c:	98 17       	cp	r25, r24
     56e:	29 f5       	brne	.+74     	; 0x5ba <main+0x1ae>
						if ((beacons_rcvd==0) && (beaconID2_time==0) && (beaconID3_time==0)) {
     570:	80 91 1e 01 	lds	r24, 0x011E
     574:	88 23       	and	r24, r24
     576:	09 f0       	breq	.+2      	; 0x57a <main+0x16e>
     578:	77 c0       	rjmp	.+238    	; 0x668 <main+0x25c>
     57a:	80 91 1f 01 	lds	r24, 0x011F
     57e:	90 91 20 01 	lds	r25, 0x0120
     582:	89 2b       	or	r24, r25
     584:	09 f0       	breq	.+2      	; 0x588 <main+0x17c>
     586:	70 c0       	rjmp	.+224    	; 0x668 <main+0x25c>
     588:	80 91 21 01 	lds	r24, 0x0121
     58c:	90 91 22 01 	lds	r25, 0x0122
     590:	89 2b       	or	r24, r25
     592:	09 f0       	breq	.+2      	; 0x596 <main+0x18a>
     594:	69 c0       	rjmp	.+210    	; 0x668 <main+0x25c>
							beaconID1_time |= rcv_time;
     596:	20 91 23 01 	lds	r18, 0x0123
     59a:	30 91 24 01 	lds	r19, 0x0124
     59e:	80 91 1b 01 	lds	r24, 0x011B
     5a2:	90 91 1c 01 	lds	r25, 0x011C
     5a6:	82 2b       	or	r24, r18
     5a8:	93 2b       	or	r25, r19
     5aa:	90 93 24 01 	sts	0x0124, r25
     5ae:	80 93 23 01 	sts	0x0123, r24
							beacons_rcvd = 1;
     5b2:	50 93 1e 01 	sts	0x011E, r21
							PORTB |= (1<<PORTB0);
     5b6:	28 9a       	sbi	0x05, 0	; 5
     5b8:	6f c0       	rjmp	.+222    	; 0x698 <main+0x28c>
								beacons_rcvd = 0;
								PORTB &= ~( (1<<PORTB0) | (1<<PORTB2) );
							}
						}
					}
					else if (lastRcv==beaconID2) { // if time3 is zero and time1 is not 0, store time and add to beacons rcvd; else ignore
     5ba:	90 91 1a 01 	lds	r25, 0x011A
     5be:	80 91 03 01 	lds	r24, 0x0103
     5c2:	98 17       	cp	r25, r24
     5c4:	31 f5       	brne	.+76     	; 0x612 <main+0x206>
						if ((beacons_rcvd==1) && (beaconID3_time==0) && (beaconID1_time>0)) {
     5c6:	80 91 1e 01 	lds	r24, 0x011E
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	09 f0       	breq	.+2      	; 0x5d0 <main+0x1c4>
     5ce:	4c c0       	rjmp	.+152    	; 0x668 <main+0x25c>
     5d0:	80 91 21 01 	lds	r24, 0x0121
     5d4:	90 91 22 01 	lds	r25, 0x0122
     5d8:	89 2b       	or	r24, r25
     5da:	09 f0       	breq	.+2      	; 0x5de <main+0x1d2>
     5dc:	45 c0       	rjmp	.+138    	; 0x668 <main+0x25c>
     5de:	80 91 23 01 	lds	r24, 0x0123
     5e2:	90 91 24 01 	lds	r25, 0x0124
     5e6:	18 16       	cp	r1, r24
     5e8:	19 06       	cpc	r1, r25
     5ea:	f4 f5       	brge	.+124    	; 0x668 <main+0x25c>
							beaconID2_time |= rcv_time;
     5ec:	20 91 1f 01 	lds	r18, 0x011F
     5f0:	30 91 20 01 	lds	r19, 0x0120
     5f4:	80 91 1b 01 	lds	r24, 0x011B
     5f8:	90 91 1c 01 	lds	r25, 0x011C
     5fc:	82 2b       	or	r24, r18
     5fe:	93 2b       	or	r25, r19
     600:	90 93 20 01 	sts	0x0120, r25
     604:	80 93 1f 01 	sts	0x011F, r24
							beacons_rcvd = 2;
     608:	40 93 1e 01 	sts	0x011E, r20
							PORTB |= (1<<PORTB2);
     60c:	2a 9a       	sbi	0x05, 2	; 5
							PORTB &= ~(1<<PORTB0);
     60e:	28 98       	cbi	0x05, 0	; 5
     610:	43 c0       	rjmp	.+134    	; 0x698 <main+0x28c>
								beacons_rcvd = 0;
								PORTB &= ~( (1<<PORTB0) | (1<<PORTB2) );
							}
						}
					}
					else if (lastRcv==beaconID3) { // if other two times are not zero, store time and add to beacons rcvd; else ignore
     612:	90 91 1a 01 	lds	r25, 0x011A
     616:	80 91 04 01 	lds	r24, 0x0104
     61a:	98 17       	cp	r25, r24
     61c:	e9 f5       	brne	.+122    	; 0x698 <main+0x28c>
						if ((beacons_rcvd==2) && (beaconID1_time>0) && (beaconID2_time>0)) {
     61e:	80 91 1e 01 	lds	r24, 0x011E
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	09 f5       	brne	.+66     	; 0x668 <main+0x25c>
     626:	80 91 23 01 	lds	r24, 0x0123
     62a:	90 91 24 01 	lds	r25, 0x0124
     62e:	18 16       	cp	r1, r24
     630:	19 06       	cpc	r1, r25
     632:	d4 f4       	brge	.+52     	; 0x668 <main+0x25c>
     634:	80 91 1f 01 	lds	r24, 0x011F
     638:	90 91 20 01 	lds	r25, 0x0120
     63c:	18 16       	cp	r1, r24
     63e:	19 06       	cpc	r1, r25
     640:	9c f4       	brge	.+38     	; 0x668 <main+0x25c>
							beaconID3_time |= rcv_time;
     642:	80 91 21 01 	lds	r24, 0x0121
     646:	90 91 22 01 	lds	r25, 0x0122
     64a:	20 91 1b 01 	lds	r18, 0x011B
     64e:	30 91 1c 01 	lds	r19, 0x011C
     652:	28 2b       	or	r18, r24
     654:	39 2b       	or	r19, r25
     656:	30 93 22 01 	sts	0x0122, r19
     65a:	20 93 21 01 	sts	0x0121, r18
							beacons_rcvd = 3;
     65e:	60 93 1e 01 	sts	0x011E, r22
							PORTB |= (1<<PORTB2)|(1<<PORTB0);
     662:	85 b1       	in	r24, 0x05	; 5
     664:	85 60       	ori	r24, 0x05	; 5
     666:	17 c0       	rjmp	.+46     	; 0x696 <main+0x28a>
						} else {
							if (rcv_time > 100) {
     668:	80 91 1b 01 	lds	r24, 0x011B
     66c:	90 91 1c 01 	lds	r25, 0x011C
     670:	85 36       	cpi	r24, 0x65	; 101
     672:	91 05       	cpc	r25, r1
     674:	8c f0       	brlt	.+34     	; 0x698 <main+0x28c>
								beaconID1_time = 0;
     676:	10 92 24 01 	sts	0x0124, r1
     67a:	10 92 23 01 	sts	0x0123, r1
								beaconID2_time = 0;
     67e:	10 92 20 01 	sts	0x0120, r1
     682:	10 92 1f 01 	sts	0x011F, r1
								beaconID3_time = 0;
     686:	10 92 22 01 	sts	0x0122, r1
     68a:	10 92 21 01 	sts	0x0121, r1
								beacons_rcvd = 0;
     68e:	10 92 1e 01 	sts	0x011E, r1
								PORTB &= ~( (1<<PORTB0) | (1<<PORTB2) );
     692:	85 b1       	in	r24, 0x05	; 5
     694:	8a 7f       	andi	r24, 0xFA	; 250
     696:	85 b9       	out	0x05, r24	; 5
							}
						}
					}
				}
				rcv_sx = 0;
     698:	10 92 17 01 	sts	0x0117, r1
     69c:	10 92 16 01 	sts	0x0116, r1
     6a0:	22 cf       	rjmp	.-444    	; 0x4e6 <main+0xda>

000006a2 <__fixunssfsi>:
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	5f e4       	ldi	r21, 0x4F	; 79
     6b6:	0e 94 51 06 	call	0xca2	; 0xca2 <__gesf2>
     6ba:	88 23       	and	r24, r24
     6bc:	8c f0       	brlt	.+34     	; 0x6e0 <__fixunssfsi+0x3e>
     6be:	c8 01       	movw	r24, r16
     6c0:	b7 01       	movw	r22, r14
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	5f e4       	ldi	r21, 0x4F	; 79
     6ca:	0e 94 c9 04 	call	0x992	; 0x992 <__subsf3>
     6ce:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fixsfsi>
     6d2:	9b 01       	movw	r18, r22
     6d4:	ac 01       	movw	r20, r24
     6d6:	20 50       	subi	r18, 0x00	; 0
     6d8:	30 40       	sbci	r19, 0x00	; 0
     6da:	40 40       	sbci	r20, 0x00	; 0
     6dc:	50 48       	sbci	r21, 0x80	; 128
     6de:	06 c0       	rjmp	.+12     	; 0x6ec <__fixunssfsi+0x4a>
     6e0:	c8 01       	movw	r24, r16
     6e2:	b7 01       	movw	r22, r14
     6e4:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fixsfsi>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	b9 01       	movw	r22, r18
     6ee:	ca 01       	movw	r24, r20
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	08 95       	ret

000006fa <_fpadd_parts>:
     6fa:	a0 e0       	ldi	r26, 0x00	; 0
     6fc:	b0 e0       	ldi	r27, 0x00	; 0
     6fe:	e3 e8       	ldi	r30, 0x83	; 131
     700:	f3 e0       	ldi	r31, 0x03	; 3
     702:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__prologue_saves__>
     706:	dc 01       	movw	r26, r24
     708:	2b 01       	movw	r4, r22
     70a:	fa 01       	movw	r30, r20
     70c:	9c 91       	ld	r25, X
     70e:	92 30       	cpi	r25, 0x02	; 2
     710:	08 f4       	brcc	.+2      	; 0x714 <_fpadd_parts+0x1a>
     712:	39 c1       	rjmp	.+626    	; 0x986 <__stack+0x87>
     714:	eb 01       	movw	r28, r22
     716:	88 81       	ld	r24, Y
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	08 f4       	brcc	.+2      	; 0x71e <_fpadd_parts+0x24>
     71c:	33 c1       	rjmp	.+614    	; 0x984 <__stack+0x85>
     71e:	94 30       	cpi	r25, 0x04	; 4
     720:	69 f4       	brne	.+26     	; 0x73c <_fpadd_parts+0x42>
     722:	84 30       	cpi	r24, 0x04	; 4
     724:	09 f0       	breq	.+2      	; 0x728 <_fpadd_parts+0x2e>
     726:	2f c1       	rjmp	.+606    	; 0x986 <__stack+0x87>
     728:	11 96       	adiw	r26, 0x01	; 1
     72a:	9c 91       	ld	r25, X
     72c:	11 97       	sbiw	r26, 0x01	; 1
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	98 17       	cp	r25, r24
     732:	09 f4       	brne	.+2      	; 0x736 <_fpadd_parts+0x3c>
     734:	28 c1       	rjmp	.+592    	; 0x986 <__stack+0x87>
     736:	a5 e0       	ldi	r26, 0x05	; 5
     738:	b1 e0       	ldi	r27, 0x01	; 1
     73a:	25 c1       	rjmp	.+586    	; 0x986 <__stack+0x87>
     73c:	84 30       	cpi	r24, 0x04	; 4
     73e:	09 f4       	brne	.+2      	; 0x742 <_fpadd_parts+0x48>
     740:	21 c1       	rjmp	.+578    	; 0x984 <__stack+0x85>
     742:	82 30       	cpi	r24, 0x02	; 2
     744:	a9 f4       	brne	.+42     	; 0x770 <_fpadd_parts+0x76>
     746:	92 30       	cpi	r25, 0x02	; 2
     748:	09 f0       	breq	.+2      	; 0x74c <_fpadd_parts+0x52>
     74a:	1d c1       	rjmp	.+570    	; 0x986 <__stack+0x87>
     74c:	9a 01       	movw	r18, r20
     74e:	ad 01       	movw	r20, r26
     750:	88 e0       	ldi	r24, 0x08	; 8
     752:	ea 01       	movw	r28, r20
     754:	09 90       	ld	r0, Y+
     756:	ae 01       	movw	r20, r28
     758:	e9 01       	movw	r28, r18
     75a:	09 92       	st	Y+, r0
     75c:	9e 01       	movw	r18, r28
     75e:	81 50       	subi	r24, 0x01	; 1
     760:	c1 f7       	brne	.-16     	; 0x752 <_fpadd_parts+0x58>
     762:	e2 01       	movw	r28, r4
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	11 96       	adiw	r26, 0x01	; 1
     768:	9c 91       	ld	r25, X
     76a:	89 23       	and	r24, r25
     76c:	81 83       	std	Z+1, r24	; 0x01
     76e:	08 c1       	rjmp	.+528    	; 0x980 <__stack+0x81>
     770:	92 30       	cpi	r25, 0x02	; 2
     772:	09 f4       	brne	.+2      	; 0x776 <_fpadd_parts+0x7c>
     774:	07 c1       	rjmp	.+526    	; 0x984 <__stack+0x85>
     776:	12 96       	adiw	r26, 0x02	; 2
     778:	2d 90       	ld	r2, X+
     77a:	3c 90       	ld	r3, X
     77c:	13 97       	sbiw	r26, 0x03	; 3
     77e:	eb 01       	movw	r28, r22
     780:	8a 81       	ldd	r24, Y+2	; 0x02
     782:	9b 81       	ldd	r25, Y+3	; 0x03
     784:	14 96       	adiw	r26, 0x04	; 4
     786:	ad 90       	ld	r10, X+
     788:	bd 90       	ld	r11, X+
     78a:	cd 90       	ld	r12, X+
     78c:	dc 90       	ld	r13, X
     78e:	17 97       	sbiw	r26, 0x07	; 7
     790:	ec 80       	ldd	r14, Y+4	; 0x04
     792:	fd 80       	ldd	r15, Y+5	; 0x05
     794:	0e 81       	ldd	r16, Y+6	; 0x06
     796:	1f 81       	ldd	r17, Y+7	; 0x07
     798:	91 01       	movw	r18, r2
     79a:	28 1b       	sub	r18, r24
     79c:	39 0b       	sbc	r19, r25
     79e:	b9 01       	movw	r22, r18
     7a0:	37 ff       	sbrs	r19, 7
     7a2:	04 c0       	rjmp	.+8      	; 0x7ac <_fpadd_parts+0xb2>
     7a4:	66 27       	eor	r22, r22
     7a6:	77 27       	eor	r23, r23
     7a8:	62 1b       	sub	r22, r18
     7aa:	73 0b       	sbc	r23, r19
     7ac:	60 32       	cpi	r22, 0x20	; 32
     7ae:	71 05       	cpc	r23, r1
     7b0:	0c f0       	brlt	.+2      	; 0x7b4 <_fpadd_parts+0xba>
     7b2:	61 c0       	rjmp	.+194    	; 0x876 <_fpadd_parts+0x17c>
     7b4:	12 16       	cp	r1, r18
     7b6:	13 06       	cpc	r1, r19
     7b8:	6c f5       	brge	.+90     	; 0x814 <_fpadd_parts+0x11a>
     7ba:	37 01       	movw	r6, r14
     7bc:	48 01       	movw	r8, r16
     7be:	06 2e       	mov	r0, r22
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <_fpadd_parts+0xd0>
     7c2:	96 94       	lsr	r9
     7c4:	87 94       	ror	r8
     7c6:	77 94       	ror	r7
     7c8:	67 94       	ror	r6
     7ca:	0a 94       	dec	r0
     7cc:	d2 f7       	brpl	.-12     	; 0x7c2 <_fpadd_parts+0xc8>
     7ce:	21 e0       	ldi	r18, 0x01	; 1
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <_fpadd_parts+0xe6>
     7d8:	22 0f       	add	r18, r18
     7da:	33 1f       	adc	r19, r19
     7dc:	44 1f       	adc	r20, r20
     7de:	55 1f       	adc	r21, r21
     7e0:	6a 95       	dec	r22
     7e2:	d2 f7       	brpl	.-12     	; 0x7d8 <_fpadd_parts+0xde>
     7e4:	21 50       	subi	r18, 0x01	; 1
     7e6:	30 40       	sbci	r19, 0x00	; 0
     7e8:	40 40       	sbci	r20, 0x00	; 0
     7ea:	50 40       	sbci	r21, 0x00	; 0
     7ec:	2e 21       	and	r18, r14
     7ee:	3f 21       	and	r19, r15
     7f0:	40 23       	and	r20, r16
     7f2:	51 23       	and	r21, r17
     7f4:	21 15       	cp	r18, r1
     7f6:	31 05       	cpc	r19, r1
     7f8:	41 05       	cpc	r20, r1
     7fa:	51 05       	cpc	r21, r1
     7fc:	21 f0       	breq	.+8      	; 0x806 <_fpadd_parts+0x10c>
     7fe:	21 e0       	ldi	r18, 0x01	; 1
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	79 01       	movw	r14, r18
     808:	8a 01       	movw	r16, r20
     80a:	e6 28       	or	r14, r6
     80c:	f7 28       	or	r15, r7
     80e:	08 29       	or	r16, r8
     810:	19 29       	or	r17, r9
     812:	3c c0       	rjmp	.+120    	; 0x88c <_fpadd_parts+0x192>
     814:	23 2b       	or	r18, r19
     816:	d1 f1       	breq	.+116    	; 0x88c <_fpadd_parts+0x192>
     818:	26 0e       	add	r2, r22
     81a:	37 1e       	adc	r3, r23
     81c:	35 01       	movw	r6, r10
     81e:	46 01       	movw	r8, r12
     820:	06 2e       	mov	r0, r22
     822:	04 c0       	rjmp	.+8      	; 0x82c <_fpadd_parts+0x132>
     824:	96 94       	lsr	r9
     826:	87 94       	ror	r8
     828:	77 94       	ror	r7
     82a:	67 94       	ror	r6
     82c:	0a 94       	dec	r0
     82e:	d2 f7       	brpl	.-12     	; 0x824 <_fpadd_parts+0x12a>
     830:	21 e0       	ldi	r18, 0x01	; 1
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	04 c0       	rjmp	.+8      	; 0x842 <_fpadd_parts+0x148>
     83a:	22 0f       	add	r18, r18
     83c:	33 1f       	adc	r19, r19
     83e:	44 1f       	adc	r20, r20
     840:	55 1f       	adc	r21, r21
     842:	6a 95       	dec	r22
     844:	d2 f7       	brpl	.-12     	; 0x83a <_fpadd_parts+0x140>
     846:	21 50       	subi	r18, 0x01	; 1
     848:	30 40       	sbci	r19, 0x00	; 0
     84a:	40 40       	sbci	r20, 0x00	; 0
     84c:	50 40       	sbci	r21, 0x00	; 0
     84e:	2a 21       	and	r18, r10
     850:	3b 21       	and	r19, r11
     852:	4c 21       	and	r20, r12
     854:	5d 21       	and	r21, r13
     856:	21 15       	cp	r18, r1
     858:	31 05       	cpc	r19, r1
     85a:	41 05       	cpc	r20, r1
     85c:	51 05       	cpc	r21, r1
     85e:	21 f0       	breq	.+8      	; 0x868 <_fpadd_parts+0x16e>
     860:	21 e0       	ldi	r18, 0x01	; 1
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	59 01       	movw	r10, r18
     86a:	6a 01       	movw	r12, r20
     86c:	a6 28       	or	r10, r6
     86e:	b7 28       	or	r11, r7
     870:	c8 28       	or	r12, r8
     872:	d9 28       	or	r13, r9
     874:	0b c0       	rjmp	.+22     	; 0x88c <_fpadd_parts+0x192>
     876:	82 15       	cp	r24, r2
     878:	93 05       	cpc	r25, r3
     87a:	2c f0       	brlt	.+10     	; 0x886 <_fpadd_parts+0x18c>
     87c:	1c 01       	movw	r2, r24
     87e:	aa 24       	eor	r10, r10
     880:	bb 24       	eor	r11, r11
     882:	65 01       	movw	r12, r10
     884:	03 c0       	rjmp	.+6      	; 0x88c <_fpadd_parts+0x192>
     886:	ee 24       	eor	r14, r14
     888:	ff 24       	eor	r15, r15
     88a:	87 01       	movw	r16, r14
     88c:	11 96       	adiw	r26, 0x01	; 1
     88e:	9c 91       	ld	r25, X
     890:	d2 01       	movw	r26, r4
     892:	11 96       	adiw	r26, 0x01	; 1
     894:	8c 91       	ld	r24, X
     896:	98 17       	cp	r25, r24
     898:	09 f4       	brne	.+2      	; 0x89c <_fpadd_parts+0x1a2>
     89a:	45 c0       	rjmp	.+138    	; 0x926 <__stack+0x27>
     89c:	99 23       	and	r25, r25
     89e:	39 f0       	breq	.+14     	; 0x8ae <_fpadd_parts+0x1b4>
     8a0:	a8 01       	movw	r20, r16
     8a2:	97 01       	movw	r18, r14
     8a4:	2a 19       	sub	r18, r10
     8a6:	3b 09       	sbc	r19, r11
     8a8:	4c 09       	sbc	r20, r12
     8aa:	5d 09       	sbc	r21, r13
     8ac:	06 c0       	rjmp	.+12     	; 0x8ba <_fpadd_parts+0x1c0>
     8ae:	a6 01       	movw	r20, r12
     8b0:	95 01       	movw	r18, r10
     8b2:	2e 19       	sub	r18, r14
     8b4:	3f 09       	sbc	r19, r15
     8b6:	40 0b       	sbc	r20, r16
     8b8:	51 0b       	sbc	r21, r17
     8ba:	57 fd       	sbrc	r21, 7
     8bc:	08 c0       	rjmp	.+16     	; 0x8ce <_fpadd_parts+0x1d4>
     8be:	11 82       	std	Z+1, r1	; 0x01
     8c0:	33 82       	std	Z+3, r3	; 0x03
     8c2:	22 82       	std	Z+2, r2	; 0x02
     8c4:	24 83       	std	Z+4, r18	; 0x04
     8c6:	35 83       	std	Z+5, r19	; 0x05
     8c8:	46 83       	std	Z+6, r20	; 0x06
     8ca:	57 83       	std	Z+7, r21	; 0x07
     8cc:	1d c0       	rjmp	.+58     	; 0x908 <__stack+0x9>
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	81 83       	std	Z+1, r24	; 0x01
     8d2:	33 82       	std	Z+3, r3	; 0x03
     8d4:	22 82       	std	Z+2, r2	; 0x02
     8d6:	88 27       	eor	r24, r24
     8d8:	99 27       	eor	r25, r25
     8da:	dc 01       	movw	r26, r24
     8dc:	82 1b       	sub	r24, r18
     8de:	93 0b       	sbc	r25, r19
     8e0:	a4 0b       	sbc	r26, r20
     8e2:	b5 0b       	sbc	r27, r21
     8e4:	84 83       	std	Z+4, r24	; 0x04
     8e6:	95 83       	std	Z+5, r25	; 0x05
     8e8:	a6 83       	std	Z+6, r26	; 0x06
     8ea:	b7 83       	std	Z+7, r27	; 0x07
     8ec:	0d c0       	rjmp	.+26     	; 0x908 <__stack+0x9>
     8ee:	22 0f       	add	r18, r18
     8f0:	33 1f       	adc	r19, r19
     8f2:	44 1f       	adc	r20, r20
     8f4:	55 1f       	adc	r21, r21
     8f6:	24 83       	std	Z+4, r18	; 0x04
     8f8:	35 83       	std	Z+5, r19	; 0x05
     8fa:	46 83       	std	Z+6, r20	; 0x06
     8fc:	57 83       	std	Z+7, r21	; 0x07
     8fe:	82 81       	ldd	r24, Z+2	; 0x02
     900:	93 81       	ldd	r25, Z+3	; 0x03
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	93 83       	std	Z+3, r25	; 0x03
     906:	82 83       	std	Z+2, r24	; 0x02
     908:	24 81       	ldd	r18, Z+4	; 0x04
     90a:	35 81       	ldd	r19, Z+5	; 0x05
     90c:	46 81       	ldd	r20, Z+6	; 0x06
     90e:	57 81       	ldd	r21, Z+7	; 0x07
     910:	da 01       	movw	r26, r20
     912:	c9 01       	movw	r24, r18
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	a1 09       	sbc	r26, r1
     918:	b1 09       	sbc	r27, r1
     91a:	8f 5f       	subi	r24, 0xFF	; 255
     91c:	9f 4f       	sbci	r25, 0xFF	; 255
     91e:	af 4f       	sbci	r26, 0xFF	; 255
     920:	bf 43       	sbci	r27, 0x3F	; 63
     922:	28 f3       	brcs	.-54     	; 0x8ee <_fpadd_parts+0x1f4>
     924:	0b c0       	rjmp	.+22     	; 0x93c <__stack+0x3d>
     926:	91 83       	std	Z+1, r25	; 0x01
     928:	33 82       	std	Z+3, r3	; 0x03
     92a:	22 82       	std	Z+2, r2	; 0x02
     92c:	ea 0c       	add	r14, r10
     92e:	fb 1c       	adc	r15, r11
     930:	0c 1d       	adc	r16, r12
     932:	1d 1d       	adc	r17, r13
     934:	e4 82       	std	Z+4, r14	; 0x04
     936:	f5 82       	std	Z+5, r15	; 0x05
     938:	06 83       	std	Z+6, r16	; 0x06
     93a:	17 83       	std	Z+7, r17	; 0x07
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	80 83       	st	Z, r24
     940:	24 81       	ldd	r18, Z+4	; 0x04
     942:	35 81       	ldd	r19, Z+5	; 0x05
     944:	46 81       	ldd	r20, Z+6	; 0x06
     946:	57 81       	ldd	r21, Z+7	; 0x07
     948:	57 ff       	sbrs	r21, 7
     94a:	1a c0       	rjmp	.+52     	; 0x980 <__stack+0x81>
     94c:	c9 01       	movw	r24, r18
     94e:	aa 27       	eor	r26, r26
     950:	97 fd       	sbrc	r25, 7
     952:	a0 95       	com	r26
     954:	ba 2f       	mov	r27, r26
     956:	81 70       	andi	r24, 0x01	; 1
     958:	90 70       	andi	r25, 0x00	; 0
     95a:	a0 70       	andi	r26, 0x00	; 0
     95c:	b0 70       	andi	r27, 0x00	; 0
     95e:	56 95       	lsr	r21
     960:	47 95       	ror	r20
     962:	37 95       	ror	r19
     964:	27 95       	ror	r18
     966:	82 2b       	or	r24, r18
     968:	93 2b       	or	r25, r19
     96a:	a4 2b       	or	r26, r20
     96c:	b5 2b       	or	r27, r21
     96e:	84 83       	std	Z+4, r24	; 0x04
     970:	95 83       	std	Z+5, r25	; 0x05
     972:	a6 83       	std	Z+6, r26	; 0x06
     974:	b7 83       	std	Z+7, r27	; 0x07
     976:	82 81       	ldd	r24, Z+2	; 0x02
     978:	93 81       	ldd	r25, Z+3	; 0x03
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	93 83       	std	Z+3, r25	; 0x03
     97e:	82 83       	std	Z+2, r24	; 0x02
     980:	df 01       	movw	r26, r30
     982:	01 c0       	rjmp	.+2      	; 0x986 <__stack+0x87>
     984:	d2 01       	movw	r26, r4
     986:	cd 01       	movw	r24, r26
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	e2 e1       	ldi	r30, 0x12	; 18
     98e:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__epilogue_restores__>

00000992 <__subsf3>:
     992:	a0 e2       	ldi	r26, 0x20	; 32
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	ef ec       	ldi	r30, 0xCF	; 207
     998:	f4 e0       	ldi	r31, 0x04	; 4
     99a:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__prologue_saves__+0x18>
     99e:	69 83       	std	Y+1, r22	; 0x01
     9a0:	7a 83       	std	Y+2, r23	; 0x02
     9a2:	8b 83       	std	Y+3, r24	; 0x03
     9a4:	9c 83       	std	Y+4, r25	; 0x04
     9a6:	2d 83       	std	Y+5, r18	; 0x05
     9a8:	3e 83       	std	Y+6, r19	; 0x06
     9aa:	4f 83       	std	Y+7, r20	; 0x07
     9ac:	58 87       	std	Y+8, r21	; 0x08
     9ae:	e9 e0       	ldi	r30, 0x09	; 9
     9b0:	ee 2e       	mov	r14, r30
     9b2:	f1 2c       	mov	r15, r1
     9b4:	ec 0e       	add	r14, r28
     9b6:	fd 1e       	adc	r15, r29
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	b7 01       	movw	r22, r14
     9be:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     9c2:	8e 01       	movw	r16, r28
     9c4:	0f 5e       	subi	r16, 0xEF	; 239
     9c6:	1f 4f       	sbci	r17, 0xFF	; 255
     9c8:	ce 01       	movw	r24, r28
     9ca:	05 96       	adiw	r24, 0x05	; 5
     9cc:	b8 01       	movw	r22, r16
     9ce:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     9d2:	8a 89       	ldd	r24, Y+18	; 0x12
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	89 27       	eor	r24, r25
     9d8:	8a 8b       	std	Y+18, r24	; 0x12
     9da:	c7 01       	movw	r24, r14
     9dc:	b8 01       	movw	r22, r16
     9de:	ae 01       	movw	r20, r28
     9e0:	47 5e       	subi	r20, 0xE7	; 231
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_fpadd_parts>
     9e8:	0e 94 05 07 	call	0xe0a	; 0xe0a <__pack_f>
     9ec:	a0 96       	adiw	r28, 0x20	; 32
     9ee:	e6 e0       	ldi	r30, 0x06	; 6
     9f0:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__epilogue_restores__+0x18>

000009f4 <__addsf3>:
     9f4:	a0 e2       	ldi	r26, 0x20	; 32
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	e0 e0       	ldi	r30, 0x00	; 0
     9fa:	f5 e0       	ldi	r31, 0x05	; 5
     9fc:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__prologue_saves__+0x18>
     a00:	69 83       	std	Y+1, r22	; 0x01
     a02:	7a 83       	std	Y+2, r23	; 0x02
     a04:	8b 83       	std	Y+3, r24	; 0x03
     a06:	9c 83       	std	Y+4, r25	; 0x04
     a08:	2d 83       	std	Y+5, r18	; 0x05
     a0a:	3e 83       	std	Y+6, r19	; 0x06
     a0c:	4f 83       	std	Y+7, r20	; 0x07
     a0e:	58 87       	std	Y+8, r21	; 0x08
     a10:	f9 e0       	ldi	r31, 0x09	; 9
     a12:	ef 2e       	mov	r14, r31
     a14:	f1 2c       	mov	r15, r1
     a16:	ec 0e       	add	r14, r28
     a18:	fd 1e       	adc	r15, r29
     a1a:	ce 01       	movw	r24, r28
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	b7 01       	movw	r22, r14
     a20:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     a24:	8e 01       	movw	r16, r28
     a26:	0f 5e       	subi	r16, 0xEF	; 239
     a28:	1f 4f       	sbci	r17, 0xFF	; 255
     a2a:	ce 01       	movw	r24, r28
     a2c:	05 96       	adiw	r24, 0x05	; 5
     a2e:	b8 01       	movw	r22, r16
     a30:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     a34:	c7 01       	movw	r24, r14
     a36:	b8 01       	movw	r22, r16
     a38:	ae 01       	movw	r20, r28
     a3a:	47 5e       	subi	r20, 0xE7	; 231
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_fpadd_parts>
     a42:	0e 94 05 07 	call	0xe0a	; 0xe0a <__pack_f>
     a46:	a0 96       	adiw	r28, 0x20	; 32
     a48:	e6 e0       	ldi	r30, 0x06	; 6
     a4a:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__epilogue_restores__+0x18>

00000a4e <__mulsf3>:
     a4e:	a0 e2       	ldi	r26, 0x20	; 32
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	ed e2       	ldi	r30, 0x2D	; 45
     a54:	f5 e0       	ldi	r31, 0x05	; 5
     a56:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__prologue_saves__>
     a5a:	69 83       	std	Y+1, r22	; 0x01
     a5c:	7a 83       	std	Y+2, r23	; 0x02
     a5e:	8b 83       	std	Y+3, r24	; 0x03
     a60:	9c 83       	std	Y+4, r25	; 0x04
     a62:	2d 83       	std	Y+5, r18	; 0x05
     a64:	3e 83       	std	Y+6, r19	; 0x06
     a66:	4f 83       	std	Y+7, r20	; 0x07
     a68:	58 87       	std	Y+8, r21	; 0x08
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	be 01       	movw	r22, r28
     a70:	67 5f       	subi	r22, 0xF7	; 247
     a72:	7f 4f       	sbci	r23, 0xFF	; 255
     a74:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     a78:	ce 01       	movw	r24, r28
     a7a:	05 96       	adiw	r24, 0x05	; 5
     a7c:	be 01       	movw	r22, r28
     a7e:	6f 5e       	subi	r22, 0xEF	; 239
     a80:	7f 4f       	sbci	r23, 0xFF	; 255
     a82:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     a86:	99 85       	ldd	r25, Y+9	; 0x09
     a88:	92 30       	cpi	r25, 0x02	; 2
     a8a:	88 f0       	brcs	.+34     	; 0xaae <__mulsf3+0x60>
     a8c:	89 89       	ldd	r24, Y+17	; 0x11
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	c8 f0       	brcs	.+50     	; 0xac4 <__mulsf3+0x76>
     a92:	94 30       	cpi	r25, 0x04	; 4
     a94:	19 f4       	brne	.+6      	; 0xa9c <__mulsf3+0x4e>
     a96:	82 30       	cpi	r24, 0x02	; 2
     a98:	51 f4       	brne	.+20     	; 0xaae <__mulsf3+0x60>
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__mulsf3+0x56>
     a9c:	84 30       	cpi	r24, 0x04	; 4
     a9e:	29 f4       	brne	.+10     	; 0xaaa <__mulsf3+0x5c>
     aa0:	92 30       	cpi	r25, 0x02	; 2
     aa2:	81 f4       	brne	.+32     	; 0xac4 <__mulsf3+0x76>
     aa4:	85 e0       	ldi	r24, 0x05	; 5
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	c6 c0       	rjmp	.+396    	; 0xc36 <__mulsf3+0x1e8>
     aaa:	92 30       	cpi	r25, 0x02	; 2
     aac:	49 f4       	brne	.+18     	; 0xac0 <__mulsf3+0x72>
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ab2:	8a 89       	ldd	r24, Y+18	; 0x12
     ab4:	98 13       	cpse	r25, r24
     ab6:	21 e0       	ldi	r18, 0x01	; 1
     ab8:	2a 87       	std	Y+10, r18	; 0x0a
     aba:	ce 01       	movw	r24, r28
     abc:	09 96       	adiw	r24, 0x09	; 9
     abe:	bb c0       	rjmp	.+374    	; 0xc36 <__mulsf3+0x1e8>
     ac0:	82 30       	cpi	r24, 0x02	; 2
     ac2:	49 f4       	brne	.+18     	; 0xad6 <__mulsf3+0x88>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ac8:	8a 89       	ldd	r24, Y+18	; 0x12
     aca:	98 13       	cpse	r25, r24
     acc:	21 e0       	ldi	r18, 0x01	; 1
     ace:	2a 8b       	std	Y+18, r18	; 0x12
     ad0:	ce 01       	movw	r24, r28
     ad2:	41 96       	adiw	r24, 0x11	; 17
     ad4:	b0 c0       	rjmp	.+352    	; 0xc36 <__mulsf3+0x1e8>
     ad6:	2d 84       	ldd	r2, Y+13	; 0x0d
     ad8:	3e 84       	ldd	r3, Y+14	; 0x0e
     ada:	4f 84       	ldd	r4, Y+15	; 0x0f
     adc:	58 88       	ldd	r5, Y+16	; 0x10
     ade:	6d 88       	ldd	r6, Y+21	; 0x15
     ae0:	7e 88       	ldd	r7, Y+22	; 0x16
     ae2:	8f 88       	ldd	r8, Y+23	; 0x17
     ae4:	98 8c       	ldd	r9, Y+24	; 0x18
     ae6:	ee 24       	eor	r14, r14
     ae8:	ff 24       	eor	r15, r15
     aea:	87 01       	movw	r16, r14
     aec:	aa 24       	eor	r10, r10
     aee:	bb 24       	eor	r11, r11
     af0:	65 01       	movw	r12, r10
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	e0 e0       	ldi	r30, 0x00	; 0
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	c1 01       	movw	r24, r2
     b00:	81 70       	andi	r24, 0x01	; 1
     b02:	90 70       	andi	r25, 0x00	; 0
     b04:	89 2b       	or	r24, r25
     b06:	e9 f0       	breq	.+58     	; 0xb42 <__mulsf3+0xf4>
     b08:	e6 0c       	add	r14, r6
     b0a:	f7 1c       	adc	r15, r7
     b0c:	08 1d       	adc	r16, r8
     b0e:	19 1d       	adc	r17, r9
     b10:	9a 01       	movw	r18, r20
     b12:	ab 01       	movw	r20, r22
     b14:	2a 0d       	add	r18, r10
     b16:	3b 1d       	adc	r19, r11
     b18:	4c 1d       	adc	r20, r12
     b1a:	5d 1d       	adc	r21, r13
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	e6 14       	cp	r14, r6
     b26:	f7 04       	cpc	r15, r7
     b28:	08 05       	cpc	r16, r8
     b2a:	19 05       	cpc	r17, r9
     b2c:	20 f4       	brcc	.+8      	; 0xb36 <__mulsf3+0xe8>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	ba 01       	movw	r22, r20
     b38:	a9 01       	movw	r20, r18
     b3a:	48 0f       	add	r20, r24
     b3c:	59 1f       	adc	r21, r25
     b3e:	6a 1f       	adc	r22, r26
     b40:	7b 1f       	adc	r23, r27
     b42:	aa 0c       	add	r10, r10
     b44:	bb 1c       	adc	r11, r11
     b46:	cc 1c       	adc	r12, r12
     b48:	dd 1c       	adc	r13, r13
     b4a:	97 fe       	sbrs	r9, 7
     b4c:	08 c0       	rjmp	.+16     	; 0xb5e <__mulsf3+0x110>
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 e0       	ldi	r26, 0x00	; 0
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	a8 2a       	or	r10, r24
     b58:	b9 2a       	or	r11, r25
     b5a:	ca 2a       	or	r12, r26
     b5c:	db 2a       	or	r13, r27
     b5e:	31 96       	adiw	r30, 0x01	; 1
     b60:	e0 32       	cpi	r30, 0x20	; 32
     b62:	f1 05       	cpc	r31, r1
     b64:	49 f0       	breq	.+18     	; 0xb78 <__mulsf3+0x12a>
     b66:	66 0c       	add	r6, r6
     b68:	77 1c       	adc	r7, r7
     b6a:	88 1c       	adc	r8, r8
     b6c:	99 1c       	adc	r9, r9
     b6e:	56 94       	lsr	r5
     b70:	47 94       	ror	r4
     b72:	37 94       	ror	r3
     b74:	27 94       	ror	r2
     b76:	c3 cf       	rjmp	.-122    	; 0xafe <__mulsf3+0xb0>
     b78:	fa 85       	ldd	r31, Y+10	; 0x0a
     b7a:	ea 89       	ldd	r30, Y+18	; 0x12
     b7c:	2b 89       	ldd	r18, Y+19	; 0x13
     b7e:	3c 89       	ldd	r19, Y+20	; 0x14
     b80:	8b 85       	ldd	r24, Y+11	; 0x0b
     b82:	9c 85       	ldd	r25, Y+12	; 0x0c
     b84:	28 0f       	add	r18, r24
     b86:	39 1f       	adc	r19, r25
     b88:	2e 5f       	subi	r18, 0xFE	; 254
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
     b8c:	17 c0       	rjmp	.+46     	; 0xbbc <__mulsf3+0x16e>
     b8e:	ca 01       	movw	r24, r20
     b90:	81 70       	andi	r24, 0x01	; 1
     b92:	90 70       	andi	r25, 0x00	; 0
     b94:	89 2b       	or	r24, r25
     b96:	61 f0       	breq	.+24     	; 0xbb0 <__mulsf3+0x162>
     b98:	16 95       	lsr	r17
     b9a:	07 95       	ror	r16
     b9c:	f7 94       	ror	r15
     b9e:	e7 94       	ror	r14
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	a0 e0       	ldi	r26, 0x00	; 0
     ba6:	b0 e8       	ldi	r27, 0x80	; 128
     ba8:	e8 2a       	or	r14, r24
     baa:	f9 2a       	or	r15, r25
     bac:	0a 2b       	or	r16, r26
     bae:	1b 2b       	or	r17, r27
     bb0:	76 95       	lsr	r23
     bb2:	67 95       	ror	r22
     bb4:	57 95       	ror	r21
     bb6:	47 95       	ror	r20
     bb8:	2f 5f       	subi	r18, 0xFF	; 255
     bba:	3f 4f       	sbci	r19, 0xFF	; 255
     bbc:	77 fd       	sbrc	r23, 7
     bbe:	e7 cf       	rjmp	.-50     	; 0xb8e <__mulsf3+0x140>
     bc0:	0c c0       	rjmp	.+24     	; 0xbda <__mulsf3+0x18c>
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	17 fd       	sbrc	r17, 7
     bcc:	41 60       	ori	r20, 0x01	; 1
     bce:	ee 0c       	add	r14, r14
     bd0:	ff 1c       	adc	r15, r15
     bd2:	00 1f       	adc	r16, r16
     bd4:	11 1f       	adc	r17, r17
     bd6:	21 50       	subi	r18, 0x01	; 1
     bd8:	30 40       	sbci	r19, 0x00	; 0
     bda:	40 30       	cpi	r20, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	59 07       	cpc	r21, r25
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	69 07       	cpc	r22, r25
     be4:	90 e4       	ldi	r25, 0x40	; 64
     be6:	79 07       	cpc	r23, r25
     be8:	60 f3       	brcs	.-40     	; 0xbc2 <__mulsf3+0x174>
     bea:	2b 8f       	std	Y+27, r18	; 0x1b
     bec:	3c 8f       	std	Y+28, r19	; 0x1c
     bee:	db 01       	movw	r26, r22
     bf0:	ca 01       	movw	r24, r20
     bf2:	8f 77       	andi	r24, 0x7F	; 127
     bf4:	90 70       	andi	r25, 0x00	; 0
     bf6:	a0 70       	andi	r26, 0x00	; 0
     bf8:	b0 70       	andi	r27, 0x00	; 0
     bfa:	80 34       	cpi	r24, 0x40	; 64
     bfc:	91 05       	cpc	r25, r1
     bfe:	a1 05       	cpc	r26, r1
     c00:	b1 05       	cpc	r27, r1
     c02:	61 f4       	brne	.+24     	; 0xc1c <__mulsf3+0x1ce>
     c04:	47 fd       	sbrc	r20, 7
     c06:	0a c0       	rjmp	.+20     	; 0xc1c <__mulsf3+0x1ce>
     c08:	e1 14       	cp	r14, r1
     c0a:	f1 04       	cpc	r15, r1
     c0c:	01 05       	cpc	r16, r1
     c0e:	11 05       	cpc	r17, r1
     c10:	29 f0       	breq	.+10     	; 0xc1c <__mulsf3+0x1ce>
     c12:	40 5c       	subi	r20, 0xC0	; 192
     c14:	5f 4f       	sbci	r21, 0xFF	; 255
     c16:	6f 4f       	sbci	r22, 0xFF	; 255
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	40 78       	andi	r20, 0x80	; 128
     c1c:	1a 8e       	std	Y+26, r1	; 0x1a
     c1e:	fe 17       	cp	r31, r30
     c20:	11 f0       	breq	.+4      	; 0xc26 <__mulsf3+0x1d8>
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	8a 8f       	std	Y+26, r24	; 0x1a
     c26:	4d 8f       	std	Y+29, r20	; 0x1d
     c28:	5e 8f       	std	Y+30, r21	; 0x1e
     c2a:	6f 8f       	std	Y+31, r22	; 0x1f
     c2c:	78 a3       	std	Y+32, r23	; 0x20
     c2e:	83 e0       	ldi	r24, 0x03	; 3
     c30:	89 8f       	std	Y+25, r24	; 0x19
     c32:	ce 01       	movw	r24, r28
     c34:	49 96       	adiw	r24, 0x19	; 25
     c36:	0e 94 05 07 	call	0xe0a	; 0xe0a <__pack_f>
     c3a:	a0 96       	adiw	r28, 0x20	; 32
     c3c:	e2 e1       	ldi	r30, 0x12	; 18
     c3e:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__epilogue_restores__>

00000c42 <__gtsf2>:
     c42:	a8 e1       	ldi	r26, 0x18	; 24
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e7 e2       	ldi	r30, 0x27	; 39
     c48:	f6 e0       	ldi	r31, 0x06	; 6
     c4a:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__prologue_saves__+0x18>
     c4e:	69 83       	std	Y+1, r22	; 0x01
     c50:	7a 83       	std	Y+2, r23	; 0x02
     c52:	8b 83       	std	Y+3, r24	; 0x03
     c54:	9c 83       	std	Y+4, r25	; 0x04
     c56:	2d 83       	std	Y+5, r18	; 0x05
     c58:	3e 83       	std	Y+6, r19	; 0x06
     c5a:	4f 83       	std	Y+7, r20	; 0x07
     c5c:	58 87       	std	Y+8, r21	; 0x08
     c5e:	89 e0       	ldi	r24, 0x09	; 9
     c60:	e8 2e       	mov	r14, r24
     c62:	f1 2c       	mov	r15, r1
     c64:	ec 0e       	add	r14, r28
     c66:	fd 1e       	adc	r15, r29
     c68:	ce 01       	movw	r24, r28
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	b7 01       	movw	r22, r14
     c6e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     c72:	8e 01       	movw	r16, r28
     c74:	0f 5e       	subi	r16, 0xEF	; 239
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	ce 01       	movw	r24, r28
     c7a:	05 96       	adiw	r24, 0x05	; 5
     c7c:	b8 01       	movw	r22, r16
     c7e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     c82:	89 85       	ldd	r24, Y+9	; 0x09
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	40 f0       	brcs	.+16     	; 0xc98 <__gtsf2+0x56>
     c88:	89 89       	ldd	r24, Y+17	; 0x11
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	28 f0       	brcs	.+10     	; 0xc98 <__gtsf2+0x56>
     c8e:	c7 01       	movw	r24, r14
     c90:	b8 01       	movw	r22, r16
     c92:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fpcmp_parts_f>
     c96:	01 c0       	rjmp	.+2      	; 0xc9a <__gtsf2+0x58>
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	68 96       	adiw	r28, 0x18	; 24
     c9c:	e6 e0       	ldi	r30, 0x06	; 6
     c9e:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__epilogue_restores__+0x18>

00000ca2 <__gesf2>:
     ca2:	a8 e1       	ldi	r26, 0x18	; 24
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e7 e5       	ldi	r30, 0x57	; 87
     ca8:	f6 e0       	ldi	r31, 0x06	; 6
     caa:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__prologue_saves__+0x18>
     cae:	69 83       	std	Y+1, r22	; 0x01
     cb0:	7a 83       	std	Y+2, r23	; 0x02
     cb2:	8b 83       	std	Y+3, r24	; 0x03
     cb4:	9c 83       	std	Y+4, r25	; 0x04
     cb6:	2d 83       	std	Y+5, r18	; 0x05
     cb8:	3e 83       	std	Y+6, r19	; 0x06
     cba:	4f 83       	std	Y+7, r20	; 0x07
     cbc:	58 87       	std	Y+8, r21	; 0x08
     cbe:	89 e0       	ldi	r24, 0x09	; 9
     cc0:	e8 2e       	mov	r14, r24
     cc2:	f1 2c       	mov	r15, r1
     cc4:	ec 0e       	add	r14, r28
     cc6:	fd 1e       	adc	r15, r29
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	b7 01       	movw	r22, r14
     cce:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     cd2:	8e 01       	movw	r16, r28
     cd4:	0f 5e       	subi	r16, 0xEF	; 239
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	ce 01       	movw	r24, r28
     cda:	05 96       	adiw	r24, 0x05	; 5
     cdc:	b8 01       	movw	r22, r16
     cde:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	82 30       	cpi	r24, 0x02	; 2
     ce6:	40 f0       	brcs	.+16     	; 0xcf8 <__gesf2+0x56>
     ce8:	89 89       	ldd	r24, Y+17	; 0x11
     cea:	82 30       	cpi	r24, 0x02	; 2
     cec:	28 f0       	brcs	.+10     	; 0xcf8 <__gesf2+0x56>
     cee:	c7 01       	movw	r24, r14
     cf0:	b8 01       	movw	r22, r16
     cf2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fpcmp_parts_f>
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <__gesf2+0x58>
     cf8:	8f ef       	ldi	r24, 0xFF	; 255
     cfa:	68 96       	adiw	r28, 0x18	; 24
     cfc:	e6 e0       	ldi	r30, 0x06	; 6
     cfe:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__epilogue_restores__+0x18>

00000d02 <__ltsf2>:
     d02:	a8 e1       	ldi	r26, 0x18	; 24
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e7 e8       	ldi	r30, 0x87	; 135
     d08:	f6 e0       	ldi	r31, 0x06	; 6
     d0a:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__prologue_saves__+0x18>
     d0e:	69 83       	std	Y+1, r22	; 0x01
     d10:	7a 83       	std	Y+2, r23	; 0x02
     d12:	8b 83       	std	Y+3, r24	; 0x03
     d14:	9c 83       	std	Y+4, r25	; 0x04
     d16:	2d 83       	std	Y+5, r18	; 0x05
     d18:	3e 83       	std	Y+6, r19	; 0x06
     d1a:	4f 83       	std	Y+7, r20	; 0x07
     d1c:	58 87       	std	Y+8, r21	; 0x08
     d1e:	89 e0       	ldi	r24, 0x09	; 9
     d20:	e8 2e       	mov	r14, r24
     d22:	f1 2c       	mov	r15, r1
     d24:	ec 0e       	add	r14, r28
     d26:	fd 1e       	adc	r15, r29
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	b7 01       	movw	r22, r14
     d2e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     d32:	8e 01       	movw	r16, r28
     d34:	0f 5e       	subi	r16, 0xEF	; 239
     d36:	1f 4f       	sbci	r17, 0xFF	; 255
     d38:	ce 01       	movw	r24, r28
     d3a:	05 96       	adiw	r24, 0x05	; 5
     d3c:	b8 01       	movw	r22, r16
     d3e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     d42:	89 85       	ldd	r24, Y+9	; 0x09
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	40 f0       	brcs	.+16     	; 0xd58 <__ltsf2+0x56>
     d48:	89 89       	ldd	r24, Y+17	; 0x11
     d4a:	82 30       	cpi	r24, 0x02	; 2
     d4c:	28 f0       	brcs	.+10     	; 0xd58 <__ltsf2+0x56>
     d4e:	c7 01       	movw	r24, r14
     d50:	b8 01       	movw	r22, r16
     d52:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fpcmp_parts_f>
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <__ltsf2+0x58>
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	68 96       	adiw	r28, 0x18	; 24
     d5c:	e6 e0       	ldi	r30, 0x06	; 6
     d5e:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__epilogue_restores__+0x18>

00000d62 <__fixsfsi>:
     d62:	ac e0       	ldi	r26, 0x0C	; 12
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e7 eb       	ldi	r30, 0xB7	; 183
     d68:	f6 e0       	ldi	r31, 0x06	; 6
     d6a:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__prologue_saves__+0x20>
     d6e:	69 83       	std	Y+1, r22	; 0x01
     d70:	7a 83       	std	Y+2, r23	; 0x02
     d72:	8b 83       	std	Y+3, r24	; 0x03
     d74:	9c 83       	std	Y+4, r25	; 0x04
     d76:	ce 01       	movw	r24, r28
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	be 01       	movw	r22, r28
     d7c:	6b 5f       	subi	r22, 0xFB	; 251
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__unpack_f>
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	82 30       	cpi	r24, 0x02	; 2
     d88:	61 f1       	breq	.+88     	; 0xde2 <__fixsfsi+0x80>
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	50 f1       	brcs	.+84     	; 0xde2 <__fixsfsi+0x80>
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	21 f4       	brne	.+8      	; 0xd9a <__fixsfsi+0x38>
     d92:	8e 81       	ldd	r24, Y+6	; 0x06
     d94:	88 23       	and	r24, r24
     d96:	51 f1       	breq	.+84     	; 0xdec <__fixsfsi+0x8a>
     d98:	2e c0       	rjmp	.+92     	; 0xdf6 <__fixsfsi+0x94>
     d9a:	2f 81       	ldd	r18, Y+7	; 0x07
     d9c:	38 85       	ldd	r19, Y+8	; 0x08
     d9e:	37 fd       	sbrc	r19, 7
     da0:	20 c0       	rjmp	.+64     	; 0xde2 <__fixsfsi+0x80>
     da2:	6e 81       	ldd	r22, Y+6	; 0x06
     da4:	2f 31       	cpi	r18, 0x1F	; 31
     da6:	31 05       	cpc	r19, r1
     da8:	1c f0       	brlt	.+6      	; 0xdb0 <__fixsfsi+0x4e>
     daa:	66 23       	and	r22, r22
     dac:	f9 f0       	breq	.+62     	; 0xdec <__fixsfsi+0x8a>
     dae:	23 c0       	rjmp	.+70     	; 0xdf6 <__fixsfsi+0x94>
     db0:	8e e1       	ldi	r24, 0x1E	; 30
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	82 1b       	sub	r24, r18
     db6:	93 0b       	sbc	r25, r19
     db8:	29 85       	ldd	r18, Y+9	; 0x09
     dba:	3a 85       	ldd	r19, Y+10	; 0x0a
     dbc:	4b 85       	ldd	r20, Y+11	; 0x0b
     dbe:	5c 85       	ldd	r21, Y+12	; 0x0c
     dc0:	04 c0       	rjmp	.+8      	; 0xdca <__fixsfsi+0x68>
     dc2:	56 95       	lsr	r21
     dc4:	47 95       	ror	r20
     dc6:	37 95       	ror	r19
     dc8:	27 95       	ror	r18
     dca:	8a 95       	dec	r24
     dcc:	d2 f7       	brpl	.-12     	; 0xdc2 <__fixsfsi+0x60>
     dce:	66 23       	and	r22, r22
     dd0:	b1 f0       	breq	.+44     	; 0xdfe <__fixsfsi+0x9c>
     dd2:	50 95       	com	r21
     dd4:	40 95       	com	r20
     dd6:	30 95       	com	r19
     dd8:	21 95       	neg	r18
     dda:	3f 4f       	sbci	r19, 0xFF	; 255
     ddc:	4f 4f       	sbci	r20, 0xFF	; 255
     dde:	5f 4f       	sbci	r21, 0xFF	; 255
     de0:	0e c0       	rjmp	.+28     	; 0xdfe <__fixsfsi+0x9c>
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	09 c0       	rjmp	.+18     	; 0xdfe <__fixsfsi+0x9c>
     dec:	2f ef       	ldi	r18, 0xFF	; 255
     dee:	3f ef       	ldi	r19, 0xFF	; 255
     df0:	4f ef       	ldi	r20, 0xFF	; 255
     df2:	5f e7       	ldi	r21, 0x7F	; 127
     df4:	04 c0       	rjmp	.+8      	; 0xdfe <__fixsfsi+0x9c>
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	50 e8       	ldi	r21, 0x80	; 128
     dfe:	b9 01       	movw	r22, r18
     e00:	ca 01       	movw	r24, r20
     e02:	2c 96       	adiw	r28, 0x0c	; 12
     e04:	e2 e0       	ldi	r30, 0x02	; 2
     e06:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__epilogue_restores__+0x20>

00000e0a <__pack_f>:
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	fc 01       	movw	r30, r24
     e16:	e4 80       	ldd	r14, Z+4	; 0x04
     e18:	f5 80       	ldd	r15, Z+5	; 0x05
     e1a:	06 81       	ldd	r16, Z+6	; 0x06
     e1c:	17 81       	ldd	r17, Z+7	; 0x07
     e1e:	d1 80       	ldd	r13, Z+1	; 0x01
     e20:	80 81       	ld	r24, Z
     e22:	82 30       	cpi	r24, 0x02	; 2
     e24:	48 f4       	brcc	.+18     	; 0xe38 <__pack_f+0x2e>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	a0 e1       	ldi	r26, 0x10	; 16
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e8 2a       	or	r14, r24
     e30:	f9 2a       	or	r15, r25
     e32:	0a 2b       	or	r16, r26
     e34:	1b 2b       	or	r17, r27
     e36:	a5 c0       	rjmp	.+330    	; 0xf82 <__pack_f+0x178>
     e38:	84 30       	cpi	r24, 0x04	; 4
     e3a:	09 f4       	brne	.+2      	; 0xe3e <__pack_f+0x34>
     e3c:	9f c0       	rjmp	.+318    	; 0xf7c <__pack_f+0x172>
     e3e:	82 30       	cpi	r24, 0x02	; 2
     e40:	21 f4       	brne	.+8      	; 0xe4a <__pack_f+0x40>
     e42:	ee 24       	eor	r14, r14
     e44:	ff 24       	eor	r15, r15
     e46:	87 01       	movw	r16, r14
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <__pack_f+0x4a>
     e4a:	e1 14       	cp	r14, r1
     e4c:	f1 04       	cpc	r15, r1
     e4e:	01 05       	cpc	r16, r1
     e50:	11 05       	cpc	r17, r1
     e52:	19 f4       	brne	.+6      	; 0xe5a <__pack_f+0x50>
     e54:	e0 e0       	ldi	r30, 0x00	; 0
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	96 c0       	rjmp	.+300    	; 0xf86 <__pack_f+0x17c>
     e5a:	62 81       	ldd	r22, Z+2	; 0x02
     e5c:	73 81       	ldd	r23, Z+3	; 0x03
     e5e:	9f ef       	ldi	r25, 0xFF	; 255
     e60:	62 38       	cpi	r22, 0x82	; 130
     e62:	79 07       	cpc	r23, r25
     e64:	0c f0       	brlt	.+2      	; 0xe68 <__pack_f+0x5e>
     e66:	5b c0       	rjmp	.+182    	; 0xf1e <__pack_f+0x114>
     e68:	22 e8       	ldi	r18, 0x82	; 130
     e6a:	3f ef       	ldi	r19, 0xFF	; 255
     e6c:	26 1b       	sub	r18, r22
     e6e:	37 0b       	sbc	r19, r23
     e70:	2a 31       	cpi	r18, 0x1A	; 26
     e72:	31 05       	cpc	r19, r1
     e74:	2c f0       	brlt	.+10     	; 0xe80 <__pack_f+0x76>
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	2a c0       	rjmp	.+84     	; 0xed4 <__pack_f+0xca>
     e80:	b8 01       	movw	r22, r16
     e82:	a7 01       	movw	r20, r14
     e84:	02 2e       	mov	r0, r18
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <__pack_f+0x86>
     e88:	76 95       	lsr	r23
     e8a:	67 95       	ror	r22
     e8c:	57 95       	ror	r21
     e8e:	47 95       	ror	r20
     e90:	0a 94       	dec	r0
     e92:	d2 f7       	brpl	.-12     	; 0xe88 <__pack_f+0x7e>
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	a0 e0       	ldi	r26, 0x00	; 0
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <__pack_f+0x9c>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	aa 1f       	adc	r26, r26
     ea4:	bb 1f       	adc	r27, r27
     ea6:	2a 95       	dec	r18
     ea8:	d2 f7       	brpl	.-12     	; 0xe9e <__pack_f+0x94>
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	a1 09       	sbc	r26, r1
     eae:	b1 09       	sbc	r27, r1
     eb0:	8e 21       	and	r24, r14
     eb2:	9f 21       	and	r25, r15
     eb4:	a0 23       	and	r26, r16
     eb6:	b1 23       	and	r27, r17
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	a1 05       	cpc	r26, r1
     ebc:	b1 05       	cpc	r27, r1
     ebe:	21 f0       	breq	.+8      	; 0xec8 <__pack_f+0xbe>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	a0 e0       	ldi	r26, 0x00	; 0
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	9a 01       	movw	r18, r20
     eca:	ab 01       	movw	r20, r22
     ecc:	28 2b       	or	r18, r24
     ece:	39 2b       	or	r19, r25
     ed0:	4a 2b       	or	r20, r26
     ed2:	5b 2b       	or	r21, r27
     ed4:	da 01       	movw	r26, r20
     ed6:	c9 01       	movw	r24, r18
     ed8:	8f 77       	andi	r24, 0x7F	; 127
     eda:	90 70       	andi	r25, 0x00	; 0
     edc:	a0 70       	andi	r26, 0x00	; 0
     ede:	b0 70       	andi	r27, 0x00	; 0
     ee0:	80 34       	cpi	r24, 0x40	; 64
     ee2:	91 05       	cpc	r25, r1
     ee4:	a1 05       	cpc	r26, r1
     ee6:	b1 05       	cpc	r27, r1
     ee8:	39 f4       	brne	.+14     	; 0xef8 <__pack_f+0xee>
     eea:	27 ff       	sbrs	r18, 7
     eec:	09 c0       	rjmp	.+18     	; 0xf00 <__pack_f+0xf6>
     eee:	20 5c       	subi	r18, 0xC0	; 192
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	4f 4f       	sbci	r20, 0xFF	; 255
     ef4:	5f 4f       	sbci	r21, 0xFF	; 255
     ef6:	04 c0       	rjmp	.+8      	; 0xf00 <__pack_f+0xf6>
     ef8:	21 5c       	subi	r18, 0xC1	; 193
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	4f 4f       	sbci	r20, 0xFF	; 255
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	e0 e0       	ldi	r30, 0x00	; 0
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	20 30       	cpi	r18, 0x00	; 0
     f06:	a0 e0       	ldi	r26, 0x00	; 0
     f08:	3a 07       	cpc	r19, r26
     f0a:	a0 e0       	ldi	r26, 0x00	; 0
     f0c:	4a 07       	cpc	r20, r26
     f0e:	a0 e4       	ldi	r26, 0x40	; 64
     f10:	5a 07       	cpc	r21, r26
     f12:	10 f0       	brcs	.+4      	; 0xf18 <__pack_f+0x10e>
     f14:	e1 e0       	ldi	r30, 0x01	; 1
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	79 01       	movw	r14, r18
     f1a:	8a 01       	movw	r16, r20
     f1c:	27 c0       	rjmp	.+78     	; 0xf6c <__pack_f+0x162>
     f1e:	60 38       	cpi	r22, 0x80	; 128
     f20:	71 05       	cpc	r23, r1
     f22:	64 f5       	brge	.+88     	; 0xf7c <__pack_f+0x172>
     f24:	fb 01       	movw	r30, r22
     f26:	e1 58       	subi	r30, 0x81	; 129
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	d8 01       	movw	r26, r16
     f2c:	c7 01       	movw	r24, r14
     f2e:	8f 77       	andi	r24, 0x7F	; 127
     f30:	90 70       	andi	r25, 0x00	; 0
     f32:	a0 70       	andi	r26, 0x00	; 0
     f34:	b0 70       	andi	r27, 0x00	; 0
     f36:	80 34       	cpi	r24, 0x40	; 64
     f38:	91 05       	cpc	r25, r1
     f3a:	a1 05       	cpc	r26, r1
     f3c:	b1 05       	cpc	r27, r1
     f3e:	39 f4       	brne	.+14     	; 0xf4e <__pack_f+0x144>
     f40:	e7 fe       	sbrs	r14, 7
     f42:	0d c0       	rjmp	.+26     	; 0xf5e <__pack_f+0x154>
     f44:	80 e4       	ldi	r24, 0x40	; 64
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a0 e0       	ldi	r26, 0x00	; 0
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	04 c0       	rjmp	.+8      	; 0xf56 <__pack_f+0x14c>
     f4e:	8f e3       	ldi	r24, 0x3F	; 63
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	a0 e0       	ldi	r26, 0x00	; 0
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e8 0e       	add	r14, r24
     f58:	f9 1e       	adc	r15, r25
     f5a:	0a 1f       	adc	r16, r26
     f5c:	1b 1f       	adc	r17, r27
     f5e:	17 ff       	sbrs	r17, 7
     f60:	05 c0       	rjmp	.+10     	; 0xf6c <__pack_f+0x162>
     f62:	16 95       	lsr	r17
     f64:	07 95       	ror	r16
     f66:	f7 94       	ror	r15
     f68:	e7 94       	ror	r14
     f6a:	31 96       	adiw	r30, 0x01	; 1
     f6c:	87 e0       	ldi	r24, 0x07	; 7
     f6e:	16 95       	lsr	r17
     f70:	07 95       	ror	r16
     f72:	f7 94       	ror	r15
     f74:	e7 94       	ror	r14
     f76:	8a 95       	dec	r24
     f78:	d1 f7       	brne	.-12     	; 0xf6e <__pack_f+0x164>
     f7a:	05 c0       	rjmp	.+10     	; 0xf86 <__pack_f+0x17c>
     f7c:	ee 24       	eor	r14, r14
     f7e:	ff 24       	eor	r15, r15
     f80:	87 01       	movw	r16, r14
     f82:	ef ef       	ldi	r30, 0xFF	; 255
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	6e 2f       	mov	r22, r30
     f88:	67 95       	ror	r22
     f8a:	66 27       	eor	r22, r22
     f8c:	67 95       	ror	r22
     f8e:	90 2f       	mov	r25, r16
     f90:	9f 77       	andi	r25, 0x7F	; 127
     f92:	d7 94       	ror	r13
     f94:	dd 24       	eor	r13, r13
     f96:	d7 94       	ror	r13
     f98:	8e 2f       	mov	r24, r30
     f9a:	86 95       	lsr	r24
     f9c:	49 2f       	mov	r20, r25
     f9e:	46 2b       	or	r20, r22
     fa0:	58 2f       	mov	r21, r24
     fa2:	5d 29       	or	r21, r13
     fa4:	b7 01       	movw	r22, r14
     fa6:	ca 01       	movw	r24, r20
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ff 90       	pop	r15
     fae:	ef 90       	pop	r14
     fb0:	df 90       	pop	r13
     fb2:	08 95       	ret

00000fb4 <__unpack_f>:
     fb4:	fc 01       	movw	r30, r24
     fb6:	db 01       	movw	r26, r22
     fb8:	40 81       	ld	r20, Z
     fba:	51 81       	ldd	r21, Z+1	; 0x01
     fbc:	22 81       	ldd	r18, Z+2	; 0x02
     fbe:	62 2f       	mov	r22, r18
     fc0:	6f 77       	andi	r22, 0x7F	; 127
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	22 1f       	adc	r18, r18
     fc6:	22 27       	eor	r18, r18
     fc8:	22 1f       	adc	r18, r18
     fca:	93 81       	ldd	r25, Z+3	; 0x03
     fcc:	89 2f       	mov	r24, r25
     fce:	88 0f       	add	r24, r24
     fd0:	82 2b       	or	r24, r18
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	99 1f       	adc	r25, r25
     fd8:	99 27       	eor	r25, r25
     fda:	99 1f       	adc	r25, r25
     fdc:	11 96       	adiw	r26, 0x01	; 1
     fde:	9c 93       	st	X, r25
     fe0:	11 97       	sbiw	r26, 0x01	; 1
     fe2:	21 15       	cp	r18, r1
     fe4:	31 05       	cpc	r19, r1
     fe6:	a9 f5       	brne	.+106    	; 0x1052 <__unpack_f+0x9e>
     fe8:	41 15       	cp	r20, r1
     fea:	51 05       	cpc	r21, r1
     fec:	61 05       	cpc	r22, r1
     fee:	71 05       	cpc	r23, r1
     ff0:	11 f4       	brne	.+4      	; 0xff6 <__unpack_f+0x42>
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	37 c0       	rjmp	.+110    	; 0x1064 <__unpack_f+0xb0>
     ff6:	82 e8       	ldi	r24, 0x82	; 130
     ff8:	9f ef       	ldi	r25, 0xFF	; 255
     ffa:	13 96       	adiw	r26, 0x03	; 3
     ffc:	9c 93       	st	X, r25
     ffe:	8e 93       	st	-X, r24
    1000:	12 97       	sbiw	r26, 0x02	; 2
    1002:	9a 01       	movw	r18, r20
    1004:	ab 01       	movw	r20, r22
    1006:	67 e0       	ldi	r22, 0x07	; 7
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	44 1f       	adc	r20, r20
    100e:	55 1f       	adc	r21, r21
    1010:	6a 95       	dec	r22
    1012:	d1 f7       	brne	.-12     	; 0x1008 <__unpack_f+0x54>
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	8c 93       	st	X, r24
    1018:	0d c0       	rjmp	.+26     	; 0x1034 <__unpack_f+0x80>
    101a:	22 0f       	add	r18, r18
    101c:	33 1f       	adc	r19, r19
    101e:	44 1f       	adc	r20, r20
    1020:	55 1f       	adc	r21, r21
    1022:	12 96       	adiw	r26, 0x02	; 2
    1024:	8d 91       	ld	r24, X+
    1026:	9c 91       	ld	r25, X
    1028:	13 97       	sbiw	r26, 0x03	; 3
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	13 96       	adiw	r26, 0x03	; 3
    102e:	9c 93       	st	X, r25
    1030:	8e 93       	st	-X, r24
    1032:	12 97       	sbiw	r26, 0x02	; 2
    1034:	20 30       	cpi	r18, 0x00	; 0
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	38 07       	cpc	r19, r24
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	48 07       	cpc	r20, r24
    103e:	80 e4       	ldi	r24, 0x40	; 64
    1040:	58 07       	cpc	r21, r24
    1042:	58 f3       	brcs	.-42     	; 0x101a <__unpack_f+0x66>
    1044:	14 96       	adiw	r26, 0x04	; 4
    1046:	2d 93       	st	X+, r18
    1048:	3d 93       	st	X+, r19
    104a:	4d 93       	st	X+, r20
    104c:	5c 93       	st	X, r21
    104e:	17 97       	sbiw	r26, 0x07	; 7
    1050:	08 95       	ret
    1052:	2f 3f       	cpi	r18, 0xFF	; 255
    1054:	31 05       	cpc	r19, r1
    1056:	79 f4       	brne	.+30     	; 0x1076 <__unpack_f+0xc2>
    1058:	41 15       	cp	r20, r1
    105a:	51 05       	cpc	r21, r1
    105c:	61 05       	cpc	r22, r1
    105e:	71 05       	cpc	r23, r1
    1060:	19 f4       	brne	.+6      	; 0x1068 <__unpack_f+0xb4>
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	8c 93       	st	X, r24
    1066:	08 95       	ret
    1068:	64 ff       	sbrs	r22, 4
    106a:	03 c0       	rjmp	.+6      	; 0x1072 <__unpack_f+0xbe>
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	8c 93       	st	X, r24
    1070:	12 c0       	rjmp	.+36     	; 0x1096 <__unpack_f+0xe2>
    1072:	1c 92       	st	X, r1
    1074:	10 c0       	rjmp	.+32     	; 0x1096 <__unpack_f+0xe2>
    1076:	2f 57       	subi	r18, 0x7F	; 127
    1078:	30 40       	sbci	r19, 0x00	; 0
    107a:	13 96       	adiw	r26, 0x03	; 3
    107c:	3c 93       	st	X, r19
    107e:	2e 93       	st	-X, r18
    1080:	12 97       	sbiw	r26, 0x02	; 2
    1082:	83 e0       	ldi	r24, 0x03	; 3
    1084:	8c 93       	st	X, r24
    1086:	87 e0       	ldi	r24, 0x07	; 7
    1088:	44 0f       	add	r20, r20
    108a:	55 1f       	adc	r21, r21
    108c:	66 1f       	adc	r22, r22
    108e:	77 1f       	adc	r23, r23
    1090:	8a 95       	dec	r24
    1092:	d1 f7       	brne	.-12     	; 0x1088 <__unpack_f+0xd4>
    1094:	70 64       	ori	r23, 0x40	; 64
    1096:	14 96       	adiw	r26, 0x04	; 4
    1098:	4d 93       	st	X+, r20
    109a:	5d 93       	st	X+, r21
    109c:	6d 93       	st	X+, r22
    109e:	7c 93       	st	X, r23
    10a0:	17 97       	sbiw	r26, 0x07	; 7
    10a2:	08 95       	ret

000010a4 <__fpcmp_parts_f>:
    10a4:	1f 93       	push	r17
    10a6:	dc 01       	movw	r26, r24
    10a8:	fb 01       	movw	r30, r22
    10aa:	9c 91       	ld	r25, X
    10ac:	92 30       	cpi	r25, 0x02	; 2
    10ae:	08 f4       	brcc	.+2      	; 0x10b2 <__fpcmp_parts_f+0xe>
    10b0:	47 c0       	rjmp	.+142    	; 0x1140 <__fpcmp_parts_f+0x9c>
    10b2:	80 81       	ld	r24, Z
    10b4:	82 30       	cpi	r24, 0x02	; 2
    10b6:	08 f4       	brcc	.+2      	; 0x10ba <__fpcmp_parts_f+0x16>
    10b8:	43 c0       	rjmp	.+134    	; 0x1140 <__fpcmp_parts_f+0x9c>
    10ba:	94 30       	cpi	r25, 0x04	; 4
    10bc:	51 f4       	brne	.+20     	; 0x10d2 <__fpcmp_parts_f+0x2e>
    10be:	11 96       	adiw	r26, 0x01	; 1
    10c0:	1c 91       	ld	r17, X
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	99 f5       	brne	.+102    	; 0x112c <__fpcmp_parts_f+0x88>
    10c6:	81 81       	ldd	r24, Z+1	; 0x01
    10c8:	68 2f       	mov	r22, r24
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	61 1b       	sub	r22, r17
    10ce:	71 09       	sbc	r23, r1
    10d0:	3f c0       	rjmp	.+126    	; 0x1150 <__fpcmp_parts_f+0xac>
    10d2:	84 30       	cpi	r24, 0x04	; 4
    10d4:	21 f0       	breq	.+8      	; 0x10de <__fpcmp_parts_f+0x3a>
    10d6:	92 30       	cpi	r25, 0x02	; 2
    10d8:	31 f4       	brne	.+12     	; 0x10e6 <__fpcmp_parts_f+0x42>
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	b9 f1       	breq	.+110    	; 0x114c <__fpcmp_parts_f+0xa8>
    10de:	81 81       	ldd	r24, Z+1	; 0x01
    10e0:	88 23       	and	r24, r24
    10e2:	89 f1       	breq	.+98     	; 0x1146 <__fpcmp_parts_f+0xa2>
    10e4:	2d c0       	rjmp	.+90     	; 0x1140 <__fpcmp_parts_f+0x9c>
    10e6:	11 96       	adiw	r26, 0x01	; 1
    10e8:	1c 91       	ld	r17, X
    10ea:	11 97       	sbiw	r26, 0x01	; 1
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	f1 f0       	breq	.+60     	; 0x112c <__fpcmp_parts_f+0x88>
    10f0:	81 81       	ldd	r24, Z+1	; 0x01
    10f2:	18 17       	cp	r17, r24
    10f4:	d9 f4       	brne	.+54     	; 0x112c <__fpcmp_parts_f+0x88>
    10f6:	12 96       	adiw	r26, 0x02	; 2
    10f8:	2d 91       	ld	r18, X+
    10fa:	3c 91       	ld	r19, X
    10fc:	13 97       	sbiw	r26, 0x03	; 3
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	82 17       	cp	r24, r18
    1104:	93 07       	cpc	r25, r19
    1106:	94 f0       	brlt	.+36     	; 0x112c <__fpcmp_parts_f+0x88>
    1108:	28 17       	cp	r18, r24
    110a:	39 07       	cpc	r19, r25
    110c:	bc f0       	brlt	.+46     	; 0x113c <__fpcmp_parts_f+0x98>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	8d 91       	ld	r24, X+
    1112:	9d 91       	ld	r25, X+
    1114:	0d 90       	ld	r0, X+
    1116:	bc 91       	ld	r27, X
    1118:	a0 2d       	mov	r26, r0
    111a:	24 81       	ldd	r18, Z+4	; 0x04
    111c:	35 81       	ldd	r19, Z+5	; 0x05
    111e:	46 81       	ldd	r20, Z+6	; 0x06
    1120:	57 81       	ldd	r21, Z+7	; 0x07
    1122:	28 17       	cp	r18, r24
    1124:	39 07       	cpc	r19, r25
    1126:	4a 07       	cpc	r20, r26
    1128:	5b 07       	cpc	r21, r27
    112a:	18 f4       	brcc	.+6      	; 0x1132 <__fpcmp_parts_f+0x8e>
    112c:	11 23       	and	r17, r17
    112e:	41 f0       	breq	.+16     	; 0x1140 <__fpcmp_parts_f+0x9c>
    1130:	0a c0       	rjmp	.+20     	; 0x1146 <__fpcmp_parts_f+0xa2>
    1132:	82 17       	cp	r24, r18
    1134:	93 07       	cpc	r25, r19
    1136:	a4 07       	cpc	r26, r20
    1138:	b5 07       	cpc	r27, r21
    113a:	40 f4       	brcc	.+16     	; 0x114c <__fpcmp_parts_f+0xa8>
    113c:	11 23       	and	r17, r17
    113e:	19 f0       	breq	.+6      	; 0x1146 <__fpcmp_parts_f+0xa2>
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	05 c0       	rjmp	.+10     	; 0x1150 <__fpcmp_parts_f+0xac>
    1146:	6f ef       	ldi	r22, 0xFF	; 255
    1148:	7f ef       	ldi	r23, 0xFF	; 255
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <__fpcmp_parts_f+0xac>
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	cb 01       	movw	r24, r22
    1152:	1f 91       	pop	r17
    1154:	08 95       	ret

00001156 <__prologue_saves__>:
    1156:	2f 92       	push	r2
    1158:	3f 92       	push	r3
    115a:	4f 92       	push	r4
    115c:	5f 92       	push	r5
    115e:	6f 92       	push	r6
    1160:	7f 92       	push	r7
    1162:	8f 92       	push	r8
    1164:	9f 92       	push	r9
    1166:	af 92       	push	r10
    1168:	bf 92       	push	r11
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	ca 1b       	sub	r28, r26
    1180:	db 0b       	sbc	r29, r27
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	09 94       	ijmp

0000118e <__epilogue_restores__>:
    118e:	2a 88       	ldd	r2, Y+18	; 0x12
    1190:	39 88       	ldd	r3, Y+17	; 0x11
    1192:	48 88       	ldd	r4, Y+16	; 0x10
    1194:	5f 84       	ldd	r5, Y+15	; 0x0f
    1196:	6e 84       	ldd	r6, Y+14	; 0x0e
    1198:	7d 84       	ldd	r7, Y+13	; 0x0d
    119a:	8c 84       	ldd	r8, Y+12	; 0x0c
    119c:	9b 84       	ldd	r9, Y+11	; 0x0b
    119e:	aa 84       	ldd	r10, Y+10	; 0x0a
    11a0:	b9 84       	ldd	r11, Y+9	; 0x09
    11a2:	c8 84       	ldd	r12, Y+8	; 0x08
    11a4:	df 80       	ldd	r13, Y+7	; 0x07
    11a6:	ee 80       	ldd	r14, Y+6	; 0x06
    11a8:	fd 80       	ldd	r15, Y+5	; 0x05
    11aa:	0c 81       	ldd	r16, Y+4	; 0x04
    11ac:	1b 81       	ldd	r17, Y+3	; 0x03
    11ae:	aa 81       	ldd	r26, Y+2	; 0x02
    11b0:	b9 81       	ldd	r27, Y+1	; 0x01
    11b2:	ce 0f       	add	r28, r30
    11b4:	d1 1d       	adc	r29, r1
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	ed 01       	movw	r28, r26
    11c2:	08 95       	ret

000011c4 <_exit>:
    11c4:	f8 94       	cli

000011c6 <__stop_program>:
    11c6:	ff cf       	rjmp	.-2      	; 0x11c6 <__stop_program>
