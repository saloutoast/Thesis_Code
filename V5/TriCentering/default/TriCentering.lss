
TriCentering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000014e8  0000157c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800110  00800110  0000158c  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001d3  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002247  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001086  00000000  00000000  00003b06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001581  00000000  00000000  00004b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00006110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000471  00000000  00000000  000062e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000098a  00000000  00000000  00006751  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000070db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_23>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ee       	ldi	r30, 0xE8	; 232
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 32       	cpi	r26, 0x28	; 40
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 0f 02 	call	0x41e	; 0x41e <main>
      9e:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_23>:

	}

}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25

	if (rcving==0) {
      b8:	80 91 16 01 	lds	r24, 0x0116
      bc:	88 23       	and	r24, r24
      be:	81 f4       	brne	.+32     	; 0xe0 <__vector_23+0x3a>

		TCNT2=0;
      c0:	10 92 b2 00 	sts	0x00B2, r1
		rcving=1;
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	80 93 16 01 	sts	0x0116, r24
		rcvd=0x80;
      ca:	80 e8       	ldi	r24, 0x80	; 128
      cc:	80 93 17 01 	sts	0x0117, r24
		ACSR &= ~(1<<ACIS0); // change to falling edge
      d0:	80 b7       	in	r24, 0x30	; 48
      d2:	8e 7f       	andi	r24, 0xFE	; 254
      d4:	80 bf       	out	0x30, r24	; 48
		rcv_sx = 0; // reset success flag
      d6:	10 92 19 01 	sts	0x0119, r1
      da:	10 92 18 01 	sts	0x0118, r1
      de:	aa c0       	rjmp	.+340    	; 0x234 <__vector_23+0x18e>
		//PORTB &= ~(1<<PORTB1);
		//PORTB &= ~(1<<PORTB2);

	} else { // first rising edge has been detected (rcving=1)

		if (!(ACSR&(1<<ACIS0))) { // check for first falling edge
      e0:	00 b6       	in	r0, 0x30	; 48
      e2:	00 fc       	sbrc	r0, 0
      e4:	0d c0       	rjmp	.+26     	; 0x100 <__vector_23+0x5a>

			distance = 0;
      e6:	10 92 1a 01 	sts	0x011A, r1
			distance |= TCNT2; // use timer value for distance
      ea:	80 91 1a 01 	lds	r24, 0x011A
      ee:	90 91 b2 00 	lds	r25, 0x00B2
      f2:	98 2b       	or	r25, r24
      f4:	90 93 1a 01 	sts	0x011A, r25
			ACSR |= (1<<ACIS0); // switch back to rising edge
      f8:	80 b7       	in	r24, 0x30	; 48
      fa:	81 60       	ori	r24, 0x01	; 1
      fc:	80 bf       	out	0x30, r24	; 48
      fe:	9a c0       	rjmp	.+308    	; 0x234 <__vector_23+0x18e>
		} else { // on subsequent rising edges
			// TODO: add LED debugging for each bit
			//PORTB |= (1<<PORTB0);

			// match rising edges to closest expected time in rcvd
			bit_time = 0;
     100:	10 92 1b 01 	sts	0x011B, r1
			bit_time |= TCNT2; // time that rising edge was detected
     104:	80 91 1b 01 	lds	r24, 0x011B
     108:	90 91 b2 00 	lds	r25, 0x00B2
     10c:	98 2b       	or	r25, r24
     10e:	90 93 1b 01 	sts	0x011B, r25
			
			if ((bit_time>=10)&(bit_time<=17)) { rcvd |= 0x40; }
     112:	80 91 1b 01 	lds	r24, 0x011B
     116:	90 91 1b 01 	lds	r25, 0x011B
     11a:	8a 30       	cpi	r24, 0x0A	; 10
     11c:	30 f0       	brcs	.+12     	; 0x12a <__vector_23+0x84>
     11e:	92 31       	cpi	r25, 0x12	; 18
     120:	20 f4       	brcc	.+8      	; 0x12a <__vector_23+0x84>
     122:	80 91 17 01 	lds	r24, 0x0117
     126:	80 64       	ori	r24, 0x40	; 64
     128:	3b c0       	rjmp	.+118    	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=22)&(bit_time<=29)) { rcvd |= 0x20; }
     12a:	80 91 1b 01 	lds	r24, 0x011B
     12e:	90 91 1b 01 	lds	r25, 0x011B
     132:	86 31       	cpi	r24, 0x16	; 22
     134:	30 f0       	brcs	.+12     	; 0x142 <__vector_23+0x9c>
     136:	9e 31       	cpi	r25, 0x1E	; 30
     138:	20 f4       	brcc	.+8      	; 0x142 <__vector_23+0x9c>
     13a:	80 91 17 01 	lds	r24, 0x0117
     13e:	80 62       	ori	r24, 0x20	; 32
     140:	2f c0       	rjmp	.+94     	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=35)&(bit_time<=42)) { rcvd |= 0x10; }
     142:	80 91 1b 01 	lds	r24, 0x011B
     146:	90 91 1b 01 	lds	r25, 0x011B
     14a:	83 32       	cpi	r24, 0x23	; 35
     14c:	30 f0       	brcs	.+12     	; 0x15a <__vector_23+0xb4>
     14e:	9b 32       	cpi	r25, 0x2B	; 43
     150:	20 f4       	brcc	.+8      	; 0x15a <__vector_23+0xb4>
     152:	80 91 17 01 	lds	r24, 0x0117
     156:	80 61       	ori	r24, 0x10	; 16
     158:	23 c0       	rjmp	.+70     	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=47)&(bit_time<=54)) { rcvd |= 0x08; }
     15a:	80 91 1b 01 	lds	r24, 0x011B
     15e:	90 91 1b 01 	lds	r25, 0x011B
     162:	8f 32       	cpi	r24, 0x2F	; 47
     164:	30 f0       	brcs	.+12     	; 0x172 <__vector_23+0xcc>
     166:	97 33       	cpi	r25, 0x37	; 55
     168:	20 f4       	brcc	.+8      	; 0x172 <__vector_23+0xcc>
     16a:	80 91 17 01 	lds	r24, 0x0117
     16e:	88 60       	ori	r24, 0x08	; 8
     170:	17 c0       	rjmp	.+46     	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=60)&(bit_time<=67)) { rcvd |= 0x04; }
     172:	80 91 1b 01 	lds	r24, 0x011B
     176:	90 91 1b 01 	lds	r25, 0x011B
     17a:	8c 33       	cpi	r24, 0x3C	; 60
     17c:	30 f0       	brcs	.+12     	; 0x18a <__vector_23+0xe4>
     17e:	94 34       	cpi	r25, 0x44	; 68
     180:	20 f4       	brcc	.+8      	; 0x18a <__vector_23+0xe4>
     182:	80 91 17 01 	lds	r24, 0x0117
     186:	84 60       	ori	r24, 0x04	; 4
     188:	0b c0       	rjmp	.+22     	; 0x1a0 <__vector_23+0xfa>
			else if ((bit_time>=72)&(bit_time<=79)) { rcvd |= 0x02; }
     18a:	80 91 1b 01 	lds	r24, 0x011B
     18e:	90 91 1b 01 	lds	r25, 0x011B
     192:	88 34       	cpi	r24, 0x48	; 72
     194:	40 f0       	brcs	.+16     	; 0x1a6 <__vector_23+0x100>
     196:	90 35       	cpi	r25, 0x50	; 80
     198:	30 f4       	brcc	.+12     	; 0x1a6 <__vector_23+0x100>
     19a:	80 91 17 01 	lds	r24, 0x0117
     19e:	82 60       	ori	r24, 0x02	; 2
     1a0:	80 93 17 01 	sts	0x0117, r24
     1a4:	47 c0       	rjmp	.+142    	; 0x234 <__vector_23+0x18e>
			else if ((bit_time>=85)&(bit_time<=92)) { // eighth bit has been received
     1a6:	80 91 1b 01 	lds	r24, 0x011B
     1aa:	90 91 1b 01 	lds	r25, 0x011B
     1ae:	85 35       	cpi	r24, 0x55	; 85
     1b0:	d8 f1       	brcs	.+118    	; 0x228 <__vector_23+0x182>
     1b2:	9d 35       	cpi	r25, 0x5D	; 93
     1b4:	c8 f5       	brcc	.+114    	; 0x228 <__vector_23+0x182>
				rcvd |= 0x01; 
     1b6:	80 91 17 01 	lds	r24, 0x0117
     1ba:	81 60       	ori	r24, 0x01	; 1
     1bc:	80 93 17 01 	sts	0x0117, r24
				rcv_sx = 1;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	90 93 19 01 	sts	0x0119, r25
     1c8:	80 93 18 01 	sts	0x0118, r24
				lastRcv = 0;
     1cc:	10 92 1c 01 	sts	0x011C, r1
				lastRcv |= rcvd; // store message
     1d0:	90 91 1c 01 	lds	r25, 0x011C
     1d4:	80 91 17 01 	lds	r24, 0x0117
     1d8:	89 2b       	or	r24, r25
     1da:	80 93 1c 01 	sts	0x011C, r24
				//PORTB |= (1<<PORTB1);
				//PORTB &= ~(1<<PORTB0);
				//if (lastRcv==toRcv1) { PORTB |= (1<<PORTB2); }
				//if (lastRcv==toRcv2) { PORTB |= (1<<PORTB0); }

				if (rcv_ct<10) { // during calibration
     1de:	80 91 1d 01 	lds	r24, 0x011D
     1e2:	8a 30       	cpi	r24, 0x0A	; 10
     1e4:	58 f4       	brcc	.+22     	; 0x1fc <__vector_23+0x156>
					if (lastRcv==beaconID1) {
     1e6:	90 91 1c 01 	lds	r25, 0x011C
     1ea:	80 91 01 01 	lds	r24, 0x0101
     1ee:	98 17       	cp	r25, r24
     1f0:	29 f0       	breq	.+10     	; 0x1fc <__vector_23+0x156>
						rcv_time = 0;
						rcv_time |= TCNT1;
						TCNT1 = 0; // reset timer1 on received messages
					} else { // ignore message
						rcv_sx = 0;
     1f2:	10 92 19 01 	sts	0x0119, r1
     1f6:	10 92 18 01 	sts	0x0118, r1
     1fa:	16 c0       	rjmp	.+44     	; 0x228 <__vector_23+0x182>
					}
				} else { // after calibration
					rcv_time = 0;
     1fc:	10 92 1f 01 	sts	0x011F, r1
     200:	10 92 1e 01 	sts	0x011E, r1
					rcv_time |= TCNT1;
     204:	80 91 1e 01 	lds	r24, 0x011E
     208:	90 91 1f 01 	lds	r25, 0x011F
     20c:	20 91 84 00 	lds	r18, 0x0084
     210:	30 91 85 00 	lds	r19, 0x0085
     214:	82 2b       	or	r24, r18
     216:	93 2b       	or	r25, r19
     218:	90 93 1f 01 	sts	0x011F, r25
     21c:	80 93 1e 01 	sts	0x011E, r24
					TCNT1 = 0; // reset timer1 on received messages
     220:	10 92 85 00 	sts	0x0085, r1
     224:	10 92 84 00 	sts	0x0084, r1
				rcving = 0; // reset receiving variables
				TCNT2 = 0;
				rcvd = 0;

			}  else { // bad rising edge means message is bad, discard and reset
				rcving = 0; // reset receiving variables
     228:	10 92 16 01 	sts	0x0116, r1
				TCNT2 = 0;
     22c:	10 92 b2 00 	sts	0x00B2, r1
				rcvd = 0;
     230:	10 92 17 01 	sts	0x0117, r1
	/* while(ACSR & (1<<ACO)) {
		PORTB |= (1<<PORTB0);
	}
	PORTB &= ~(1<<PORTB0); */

} 
     234:	9f 91       	pop	r25
     236:	8f 91       	pop	r24
     238:	3f 91       	pop	r19
     23a:	2f 91       	pop	r18
     23c:	0f 90       	pop	r0
     23e:	0f be       	out	0x3f, r0	; 63
     240:	0f 90       	pop	r0
     242:	1f 90       	pop	r1
     244:	18 95       	reti

00000246 <__vector_7>:

// reset routine for message reception
ISR(TIMER2_COMPA_vect) { // timer2 interrupt routine
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1

	rcving = 0;
     250:	10 92 16 01 	sts	0x0116, r1
	rcvd = 0;
     254:	10 92 17 01 	sts	0x0117, r1
	//PORTB &= ~(1<<PORTB0);
	//PORTB &= ~(1<<PORTB1);

}
     258:	0f 90       	pop	r0
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	0f 90       	pop	r0
     25e:	1f 90       	pop	r1
     260:	18 95       	reti

00000262 <__vector_14>:

// routine for timer0 to send messages, pause for a longer time between messages
ISR(TIMER0_COMPA_vect) { // timer0 interrupt routine
     262:	1f 92       	push	r1
     264:	0f 92       	push	r0
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	0f 92       	push	r0
     26a:	11 24       	eor	r1, r1
     26c:	2f 93       	push	r18
     26e:	3f 93       	push	r19
     270:	4f 93       	push	r20
     272:	5f 93       	push	r21
     274:	6f 93       	push	r22
     276:	7f 93       	push	r23
     278:	8f 93       	push	r24
     27a:	9f 93       	push	r25
     27c:	ef 93       	push	r30
     27e:	ff 93       	push	r31

	if (bits_sent<8) { // if the whole message has not been sent
     280:	80 91 10 01 	lds	r24, 0x0110
     284:	90 91 11 01 	lds	r25, 0x0111
     288:	08 97       	sbiw	r24, 0x08	; 8
     28a:	0c f0       	brlt	.+2      	; 0x28e <__vector_14+0x2c>
     28c:	40 c0       	rjmp	.+128    	; 0x30e <__vector_14+0xac>
		if (pause==0) { // 0,1 half of bit to be sent
     28e:	80 91 12 01 	lds	r24, 0x0112
     292:	90 91 13 01 	lds	r25, 0x0113
     296:	89 2b       	or	r24, r25
     298:	a1 f5       	brne	.+104    	; 0x302 <__vector_14+0xa0>
			new_bit = (toSend & (1<<(7-bits_sent))) >> (7-bits_sent);
     29a:	40 91 00 01 	lds	r20, 0x0100
     29e:	80 91 10 01 	lds	r24, 0x0110
     2a2:	90 91 11 01 	lds	r25, 0x0111
     2a6:	e0 91 10 01 	lds	r30, 0x0110
     2aa:	f0 91 11 01 	lds	r31, 0x0111
     2ae:	27 e0       	ldi	r18, 0x07	; 7
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	b9 01       	movw	r22, r18
     2b4:	68 1b       	sub	r22, r24
     2b6:	79 0b       	sbc	r23, r25
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <__vector_14+0x60>
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	6a 95       	dec	r22
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <__vector_14+0x5c>
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	84 23       	and	r24, r20
     2ca:	95 23       	and	r25, r21
     2cc:	2e 1b       	sub	r18, r30
     2ce:	3f 0b       	sbc	r19, r31
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <__vector_14+0x74>
     2d2:	95 95       	asr	r25
     2d4:	87 95       	ror	r24
     2d6:	2a 95       	dec	r18
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <__vector_14+0x70>
     2da:	90 93 15 01 	sts	0x0115, r25
     2de:	80 93 14 01 	sts	0x0114, r24
			if(new_bit==1) { // turn on LEDs
     2e2:	80 91 14 01 	lds	r24, 0x0114
     2e6:	90 91 15 01 	lds	r25, 0x0115
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	11 f4       	brne	.+4      	; 0x2f2 <__vector_14+0x90>
				PORTC |= (1<<PORTC3);
     2ee:	43 9a       	sbi	0x08, 3	; 8
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <__vector_14+0x92>
				//PORTB |= (1<<PORTB2);
			} else { // turn off LEDs
				PORTC &= ~(1<<PORTC3);
     2f2:	43 98       	cbi	0x08, 3	; 8
				//PORTB &= ~(1<<PORTB2);
			}
			pause = 1; // pause after sending a bit
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	90 93 13 01 	sts	0x0113, r25
     2fc:	80 93 12 01 	sts	0x0112, r24
     300:	1a c0       	rjmp	.+52     	; 0x336 <__vector_14+0xd4>
		} else { // pausing between bits
			pause = 0; // send new bit on next interrupt
     302:	10 92 13 01 	sts	0x0113, r1
     306:	10 92 12 01 	sts	0x0112, r1
			PORTC &= ~(1<<PORTC3); // ensure LEDs are low for pause
     30a:	43 98       	cbi	0x08, 3	; 8
     30c:	0b c0       	rjmp	.+22     	; 0x324 <__vector_14+0xc2>
			//PORTB &= ~(1<<PORTB2);
			bits_sent += 1; // increment bits_sent after each pause
		}
	} else { // if bits_sent >= 8, reset variables and pause for a bit
		if (bits_sent>=40) { // wait for 2 messages, send again
     30e:	80 91 10 01 	lds	r24, 0x0110
     312:	90 91 11 01 	lds	r25, 0x0111
     316:	88 97       	sbiw	r24, 0x28	; 40
     318:	2c f0       	brlt	.+10     	; 0x324 <__vector_14+0xc2>
			bits_sent = 0; 
     31a:	10 92 11 01 	sts	0x0111, r1
     31e:	10 92 10 01 	sts	0x0110, r1
     322:	09 c0       	rjmp	.+18     	; 0x336 <__vector_14+0xd4>
		} else {
			bits_sent+=1; // increment bits_sent for timing between messages
     324:	80 91 10 01 	lds	r24, 0x0110
     328:	90 91 11 01 	lds	r25, 0x0111
     32c:	01 96       	adiw	r24, 0x01	; 1
     32e:	90 93 11 01 	sts	0x0111, r25
     332:	80 93 10 01 	sts	0x0110, r24
		}
		
		// TODO: could disable ISR here, for send_msg function?
	}

}
     336:	ff 91       	pop	r31
     338:	ef 91       	pop	r30
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	7f 91       	pop	r23
     340:	6f 91       	pop	r22
     342:	5f 91       	pop	r21
     344:	4f 91       	pop	r20
     346:	3f 91       	pop	r19
     348:	2f 91       	pop	r18
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <detach>:

// "move" by detaching magnet for a specified time in ms
void detach(double time) {
     354:	af 92       	push	r10
     356:	bf 92       	push	r11
     358:	cf 92       	push	r12
     35a:	df 92       	push	r13
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	5b 01       	movw	r10, r22
     366:	6c 01       	movw	r12, r24

	//switch E.P.M. direction 1 (detach)
	//PORTB |= (1<<PORTB0); // set inner LED, indicating direction 1
	PORTB |= (1<<6);//activate E.P.M direction 1
     368:	2e 9a       	sbi	0x05, 6	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     36a:	80 ef       	ldi	r24, 0xF0	; 240
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <detach+0x1a>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     372:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     374:	2f 98       	cbi	0x05, 7	; 5
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     376:	c6 01       	movw	r24, r12
     378:	b5 01       	movw	r22, r10
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	4a ef       	ldi	r20, 0xFA	; 250
     380:	54 e4       	ldi	r21, 0x44	; 68
     382:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__mulsf3>
     386:	7b 01       	movw	r14, r22
     388:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	40 e8       	ldi	r20, 0x80	; 128
     390:	5f e3       	ldi	r21, 0x3F	; 63
     392:	0e 94 11 08 	call	0x1022	; 0x1022 <__ltsf2>
     396:	88 23       	and	r24, r24
     398:	1c f4       	brge	.+6      	; 0x3a0 <detach+0x4c>
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	24 c0       	rjmp	.+72     	; 0x3e8 <detach+0x94>
		__ticks = 1;
	else if (__tmp > 65535)
     3a0:	c8 01       	movw	r24, r16
     3a2:	b7 01       	movw	r22, r14
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	3f ef       	ldi	r19, 0xFF	; 255
     3a8:	4f e7       	ldi	r20, 0x7F	; 127
     3aa:	57 e4       	ldi	r21, 0x47	; 71
     3ac:	0e 94 b1 07 	call	0xf62	; 0xf62 <__gtsf2>
     3b0:	18 16       	cp	r1, r24
     3b2:	b4 f4       	brge	.+44     	; 0x3e0 <detach+0x8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3b4:	c6 01       	movw	r24, r12
     3b6:	b5 01       	movw	r22, r10
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	40 e2       	ldi	r20, 0x20	; 32
     3be:	51 e4       	ldi	r21, 0x41	; 65
     3c0:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__mulsf3>
     3c4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fixunssfsi>
     3c8:	88 ec       	ldi	r24, 0xC8	; 200
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <detach+0x84>
     3ce:	fc 01       	movw	r30, r24
     3d0:	31 97       	sbiw	r30, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <detach+0x7c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3d4:	61 50       	subi	r22, 0x01	; 1
     3d6:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3d8:	61 15       	cp	r22, r1
     3da:	71 05       	cpc	r23, r1
     3dc:	c1 f7       	brne	.-16     	; 0x3ce <detach+0x7a>
     3de:	07 c0       	rjmp	.+14     	; 0x3ee <detach+0x9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3e0:	c8 01       	movw	r24, r16
     3e2:	b7 01       	movw	r22, r14
     3e4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__fixunssfsi>
     3e8:	cb 01       	movw	r24, r22
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <detach+0x96>

	_delay_ms(time); // stay detached for desired time

	//switch E.P.M. direction 2 (re-attach)
	//PORTB &= ~(1<<PORTB0); // clear inner LED, indicating direction 2
	PORTB |= (1<<7);//activate E.P.M direction 2
     3ee:	2f 9a       	sbi	0x05, 7	; 5
     3f0:	80 ef       	ldi	r24, 0xF0	; 240
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <detach+0xa0>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     3f8:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     3fa:	2f 98       	cbi	0x05, 7	; 5

	return;
}
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	bf 90       	pop	r11
     40a:	af 90       	pop	r10
     40c:	08 95       	ret

0000040e <reset_EPM>:
// reset EPM in case of robot/code malfunction
void reset_EPM(void) {

	//switch E.P.M. direction 2 (re-attach)
	//PORTB &= ~(1<<PORTB0); // clear inner LED, indicating direction 2
	PORTB |= (1<<7);//activate E.P.M direction 2
     40e:	2f 9a       	sbi	0x05, 7	; 5
     410:	80 ef       	ldi	r24, 0xF0	; 240
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <reset_EPM+0x6>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     418:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     41a:	2f 98       	cbi	0x05, 7	; 5

	return;

}
     41c:	08 95       	ret

0000041e <main>:
static volatile int beaconID3_time = 0;
static volatile char beacons_rcvd = 0;
static volatile char desired_beacon = 0;
static volatile int center_threshold = 100;

int main(void) {
     41e:	ef 92       	push	r14
     420:	ff 92       	push	r15
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29

	DDRB=0;
     42a:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
     42c:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
     42e:	87 e0       	ldi	r24, 0x07	; 7
     430:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7); // enable EPM pins
     432:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
     434:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
     436:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
     438:	2f 98       	cbi	0x05, 7	; 5

	DDRC=0; // enable IR LED
     43a:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
     43c:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
     43e:	88 e0       	ldi	r24, 0x08	; 8
     440:	87 b9       	out	0x07, r24	; 7

	cli(); // disable interrupts
     442:	f8 94       	cli

	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
     444:	83 e0       	ldi	r24, 0x03	; 3
     446:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
     44a:	8b e0       	ldi	r24, 0x0B	; 11
     44c:	80 bf       	out	0x30, r24	; 48

	// Initialize timer0 for timing sending of messages (1/8 prescaler, 8-bit timer rolls over at ~3.9 kHz Hz)
	TCCR0A |= (1<<WGM01); // // do not change any output pin, clear at compare match with OCR0A
     44e:	84 b5       	in	r24, 0x24	; 36
     450:	82 60       	ori	r24, 0x02	; 2
     452:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0<<CS02)|(1<<CS01)|(0<<CS00); // prescaler of 1/8
     454:	85 b5       	in	r24, 0x25	; 37
     456:	82 60       	ori	r24, 0x02	; 2
     458:	85 bd       	out	0x25, r24	; 37
	OCR0A = 100; // interrupt every 100 counts, for sending a new bit every 2 cycles
     45a:	84 e6       	ldi	r24, 0x64	; 100
     45c:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
     45e:	80 91 6e 00 	lds	r24, 0x006E
     462:	82 60       	ori	r24, 0x02	; 2
     464:	80 93 6e 00 	sts	0x006E, r24

	// Initialize timer1 for neighbor-marking, based on times of received messages
	TCCR1B |= (1<<CS12)|(0<<CS11)|(1<<CS10); // 1/1024 prescaler, counts at ~7.8kHz (1 count is 0.128 ms), 16-bit timer
     468:	80 91 81 00 	lds	r24, 0x0081
     46c:	85 60       	ori	r24, 0x05	; 5
     46e:	80 93 81 00 	sts	0x0081, r24

	// Initialize timer2 for timing receiving of messages (1/128 prescaler, 8-bit timer rolls over at ~250 Hz )
	TCCR2A |= (1<<WGM21); // do not change any output pin, clear at compare match with OCR2A
     472:	80 91 b0 00 	lds	r24, 0x00B0
     476:	82 60       	ori	r24, 0x02	; 2
     478:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = (1<<OCIE2A); // compare match on OCR2A
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	80 93 70 00 	sts	0x0070, r24
    OCR2A = 200; // compare every 200 counts (every 3.2ms, 2x length of message)
     482:	88 ec       	ldi	r24, 0xC8	; 200
     484:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= (1<<CS22)|(0<<CS21)|(1<<CS20); // prescaler of 1/128: count every 16us
     488:	80 91 b1 00 	lds	r24, 0x00B1
     48c:	85 60       	ori	r24, 0x05	; 5
     48e:	80 93 b1 00 	sts	0x00B1, r24

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
     492:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
     494:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
     496:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<PORTC3);
     498:	43 9a       	sbi	0x08, 3	; 8
     49a:	80 ed       	ldi	r24, 0xD0	; 208
     49c:	97 e0       	ldi	r25, 0x07	; 7
     49e:	28 ec       	ldi	r18, 0xC8	; 200
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	f9 01       	movw	r30, r18
     4a4:	31 97       	sbiw	r30, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <main+0x86>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4aa:	d9 f7       	brne	.-10     	; 0x4a2 <main+0x84>
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
     4ac:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     4ae:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
     4b0:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1<<PORTC3);
     4b2:	43 98       	cbi	0x08, 3	; 8

	// make sure EPM is activated at startup
	reset_EPM();
     4b4:	0e 94 07 02 	call	0x40e	; 0x40e <reset_EPM>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	48 ec       	ldi	r20, 0xC8	; 200
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	0b c0       	rjmp	.+22     	; 0x4d8 <main+0xba>
     4c2:	fa 01       	movw	r30, r20
     4c4:	31 97       	sbiw	r30, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <main+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <main+0xa4>
	// wait here for a time (~30s) until all modules are spinning, then blink LEDs again
	int ww=0;
	while (ww<300) {

		_delay_ms(100);
		ww+=1;
     4cc:	2f 5f       	subi	r18, 0xFF	; 255
     4ce:	3f 4f       	sbci	r19, 0xFF	; 255
	// make sure EPM is activated at startup
	reset_EPM();

	// wait here for a time (~30s) until all modules are spinning, then blink LEDs again
	int ww=0;
	while (ww<300) {
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	2c 32       	cpi	r18, 0x2C	; 44
     4d4:	38 07       	cpc	r19, r24
     4d6:	19 f0       	breq	.+6      	; 0x4de <main+0xc0>
     4d8:	88 ee       	ldi	r24, 0xE8	; 232
     4da:	93 e0       	ldi	r25, 0x03	; 3
     4dc:	f2 cf       	rjmp	.-28     	; 0x4c2 <main+0xa4>
		_delay_ms(100);
		ww+=1;

	}

	PORTB |= (1<<PORTB0); // green
     4de:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
     4e0:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
     4e2:	2a 9a       	sbi	0x05, 2	; 5
     4e4:	80 ed       	ldi	r24, 0xD0	; 208
     4e6:	97 e0       	ldi	r25, 0x07	; 7
     4e8:	28 ec       	ldi	r18, 0xC8	; 200
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	f9 01       	movw	r30, r18
     4ee:	31 97       	sbiw	r30, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <main+0xd0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4f4:	d9 f7       	brne	.-10     	; 0x4ec <main+0xce>
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
     4f6:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     4f8:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
     4fa:	2a 98       	cbi	0x05, 2	; 5

	// turn on LED corresponing to beacon number
	if (toSend==beaconID1) { PORTB |= (1<<PORTB0); }
     4fc:	90 91 00 01 	lds	r25, 0x0100
     500:	80 91 01 01 	lds	r24, 0x0101
     504:	98 17       	cp	r25, r24
     506:	09 f4       	brne	.+2      	; 0x50a <main+0xec>
     508:	28 9a       	sbi	0x05, 0	; 5
	if (toSend==beaconID2) { PORTB |= (1<<PORTB1); }
     50a:	90 91 00 01 	lds	r25, 0x0100
     50e:	80 91 02 01 	lds	r24, 0x0102
     512:	98 17       	cp	r25, r24
     514:	09 f4       	brne	.+2      	; 0x518 <main+0xfa>
     516:	29 9a       	sbi	0x05, 1	; 5
	if (toSend==beaconID3) { PORTB |= (1<<PORTB2); }
     518:	90 91 00 01 	lds	r25, 0x0100
     51c:	80 91 03 01 	lds	r24, 0x0103
     520:	98 17       	cp	r25, r24
     522:	09 f4       	brne	.+2      	; 0x526 <main+0x108>
     524:	2a 9a       	sbi	0x05, 2	; 5

	sei(); // enable interrupts
     526:	78 94       	sei
	int per = 0;
	//int cur_time = 0;
	int detach_time = 0;
	int dd = 0;

	rcv_ct = 10;
     528:	8a e0       	ldi	r24, 0x0A	; 10
     52a:	80 93 1d 01 	sts	0x011D, r24
     52e:	c8 ec       	ldi	r28, 0xC8	; 200
     530:	d0 e0       	ldi	r29, 0x00	; 0
							cli();
							PORTB |= (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2); 
						}
					}

					beacons_rcvd=4; // indicated that direction of motion has been decided
     532:	14 e0       	ldi	r17, 0x04	; 4
						}
					}
					else if (lastRcv==beaconID3) { // if other two times are not zero, store time and add to beacons rcvd; else ignore
						if ((beacons_rcvd==2) && (beaconID1_time>0) && (beaconID2_time>0)) {
							beaconID3_time |= rcv_time;
							beacons_rcvd = 3;
     534:	03 e0       	ldi	r16, 0x03	; 3
						}
					}
					else if (lastRcv==beaconID2) { // if time3 is zero and time1 is not 0, store time and add to beacons rcvd; else ignore
						if ((beacons_rcvd==1) && (beaconID3_time==0) && (beaconID1_time>0)) {
							beaconID2_time |= rcv_time;
							beacons_rcvd = 2;
     536:	82 e0       	ldi	r24, 0x02	; 2
     538:	f8 2e       	mov	r15, r24

				if (beacons_rcvd < 3) { // store times from the three beacons in a row
					if (lastRcv==beaconID1) { // if other two times are 0, store time and add to beacons rcvd; else reset
						if ((beacons_rcvd==0) && (beaconID2_time==0) && (beaconID3_time==0)) {
							beaconID1_time |= rcv_time;
							beacons_rcvd = 1;
     53a:	ee 24       	eor	r14, r14
     53c:	e3 94       	inc	r14

	rcv_ct = 10;
	
	while(1) { // main loop

		if (toSend==mobileID) { // don't bother trying to track beacons if you are not the mobile robot
     53e:	90 91 00 01 	lds	r25, 0x0100
     542:	80 91 04 01 	lds	r24, 0x0104
     546:	98 17       	cp	r25, r24
     548:	d1 f7       	brne	.-12     	; 0x53e <main+0x120>
		
			// take 10 messages to calculate period		
			if ((rcv_sx==1) && (rcv_ct<10)) {
     54a:	80 91 18 01 	lds	r24, 0x0118
     54e:	90 91 19 01 	lds	r25, 0x0119
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	59 f5       	brne	.+86     	; 0x5ac <main+0x18e>
     556:	80 91 1d 01 	lds	r24, 0x011D
     55a:	8a 30       	cpi	r24, 0x0A	; 10
     55c:	38 f5       	brcc	.+78     	; 0x5ac <main+0x18e>
				if (lastRcv==beaconID1) { // only messages from beacon 1 for calculating period
     55e:	90 91 1c 01 	lds	r25, 0x011C
     562:	80 91 01 01 	lds	r24, 0x0101
     566:	98 17       	cp	r25, r24
     568:	09 f5       	brne	.+66     	; 0x5ac <main+0x18e>
					PORTB |= (1<<PORTB2); // turn on LED to indicate calibration
     56a:	2a 9a       	sbi	0x05, 2	; 5
					if ((rcv_time>1000)&&(rcv_time<4000)) {
     56c:	80 91 1e 01 	lds	r24, 0x011E
     570:	90 91 1f 01 	lds	r25, 0x011F
     574:	89 5e       	subi	r24, 0xE9	; 233
     576:	93 40       	sbci	r25, 0x03	; 3
     578:	ac f0       	brlt	.+42     	; 0x5a4 <main+0x186>
     57a:	80 91 1e 01 	lds	r24, 0x011E
     57e:	90 91 1f 01 	lds	r25, 0x011F
     582:	80 5a       	subi	r24, 0xA0	; 160
     584:	9f 40       	sbci	r25, 0x0F	; 15
     586:	74 f4       	brge	.+28     	; 0x5a4 <main+0x186>
						per = per + (rcv_time/10);
     588:	80 91 1e 01 	lds	r24, 0x011E
     58c:	90 91 1f 01 	lds	r25, 0x011F
						if (rcv_ct==9) {
     590:	80 91 1d 01 	lds	r24, 0x011D
     594:	89 30       	cpi	r24, 0x09	; 9
     596:	09 f4       	brne	.+2      	; 0x59a <main+0x17c>
							//detach_time = per/5; // time after receiving a message that it will detach the EPM
							//detach_time = detach_time/8; // convert roughly to ms
							PORTB &= ~(1<<PORTB2); // clear LED to indicate end of calibration
     598:	2a 98       	cbi	0x05, 2	; 5
						}
						rcv_ct+=1;	
     59a:	80 91 1d 01 	lds	r24, 0x011D
     59e:	8f 5f       	subi	r24, 0xFF	; 255
     5a0:	80 93 1d 01 	sts	0x011D, r24
					}
					rcv_sx=0;
     5a4:	10 92 19 01 	sts	0x0119, r1
     5a8:	10 92 18 01 	sts	0x0118, r1

			// calculate angles based on times between beacon messages, then pick beacon to move towards
			// rotation A: take in three messages, calculate "angles" (times between receptions)
			// rotation B: move towards selected beacon (towards beacon not asociated with the largest angle)
		
			if ((rcv_sx==1) && (rcv_ct==10)) { // got a new message and already calibrated
     5ac:	80 91 18 01 	lds	r24, 0x0118
     5b0:	90 91 19 01 	lds	r25, 0x0119
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	09 f0       	breq	.+2      	; 0x5ba <main+0x19c>
     5b8:	c4 c1       	rjmp	.+904    	; 0x942 <__stack+0x43>
     5ba:	80 91 1d 01 	lds	r24, 0x011D
     5be:	8a 30       	cpi	r24, 0x0A	; 10
     5c0:	09 f0       	breq	.+2      	; 0x5c4 <main+0x1a6>
     5c2:	bf c1       	rjmp	.+894    	; 0x942 <__stack+0x43>

				if (beacons_rcvd < 3) { // store times from the three beacons in a row
     5c4:	80 91 20 01 	lds	r24, 0x0120
     5c8:	83 30       	cpi	r24, 0x03	; 3
     5ca:	08 f0       	brcs	.+2      	; 0x5ce <main+0x1b0>
     5cc:	92 c0       	rjmp	.+292    	; 0x6f2 <main+0x2d4>
					if (lastRcv==beaconID1) { // if other two times are 0, store time and add to beacons rcvd; else reset
     5ce:	90 91 1c 01 	lds	r25, 0x011C
     5d2:	80 91 01 01 	lds	r24, 0x0101
     5d6:	98 17       	cp	r25, r24
     5d8:	21 f5       	brne	.+72     	; 0x622 <main+0x204>
						if ((beacons_rcvd==0) && (beaconID2_time==0) && (beaconID3_time==0)) {
     5da:	80 91 20 01 	lds	r24, 0x0120
     5de:	88 23       	and	r24, r24
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <main+0x1c6>
     5e2:	72 c0       	rjmp	.+228    	; 0x6c8 <main+0x2aa>
     5e4:	80 91 21 01 	lds	r24, 0x0121
     5e8:	90 91 22 01 	lds	r25, 0x0122
     5ec:	89 2b       	or	r24, r25
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <main+0x1d4>
     5f0:	6b c0       	rjmp	.+214    	; 0x6c8 <main+0x2aa>
     5f2:	80 91 23 01 	lds	r24, 0x0123
     5f6:	90 91 24 01 	lds	r25, 0x0124
     5fa:	89 2b       	or	r24, r25
     5fc:	09 f0       	breq	.+2      	; 0x600 <main+0x1e2>
     5fe:	64 c0       	rjmp	.+200    	; 0x6c8 <main+0x2aa>
							beaconID1_time |= rcv_time;
     600:	20 91 25 01 	lds	r18, 0x0125
     604:	30 91 26 01 	lds	r19, 0x0126
     608:	80 91 1e 01 	lds	r24, 0x011E
     60c:	90 91 1f 01 	lds	r25, 0x011F
     610:	82 2b       	or	r24, r18
     612:	93 2b       	or	r25, r19
     614:	90 93 26 01 	sts	0x0126, r25
     618:	80 93 25 01 	sts	0x0125, r24
							beacons_rcvd = 1;
     61c:	e0 92 20 01 	sts	0x0120, r14
     620:	68 c0       	rjmp	.+208    	; 0x6f2 <main+0x2d4>
								beacons_rcvd = 0;
								//PORTB &= ~( (1<<PORTB0) | (1<<PORTB2) );
							}
						}
					}
					else if (lastRcv==beaconID2) { // if time3 is zero and time1 is not 0, store time and add to beacons rcvd; else ignore
     622:	90 91 1c 01 	lds	r25, 0x011C
     626:	80 91 02 01 	lds	r24, 0x0102
     62a:	98 17       	cp	r25, r24
     62c:	21 f5       	brne	.+72     	; 0x676 <main+0x258>
						if ((beacons_rcvd==1) && (beaconID3_time==0) && (beaconID1_time>0)) {
     62e:	80 91 20 01 	lds	r24, 0x0120
     632:	81 30       	cpi	r24, 0x01	; 1
     634:	09 f0       	breq	.+2      	; 0x638 <main+0x21a>
     636:	48 c0       	rjmp	.+144    	; 0x6c8 <main+0x2aa>
     638:	80 91 23 01 	lds	r24, 0x0123
     63c:	90 91 24 01 	lds	r25, 0x0124
     640:	89 2b       	or	r24, r25
     642:	09 f0       	breq	.+2      	; 0x646 <main+0x228>
     644:	41 c0       	rjmp	.+130    	; 0x6c8 <main+0x2aa>
     646:	80 91 25 01 	lds	r24, 0x0125
     64a:	90 91 26 01 	lds	r25, 0x0126
     64e:	18 16       	cp	r1, r24
     650:	19 06       	cpc	r1, r25
     652:	d4 f5       	brge	.+116    	; 0x6c8 <main+0x2aa>
							beaconID2_time |= rcv_time;
     654:	20 91 21 01 	lds	r18, 0x0121
     658:	30 91 22 01 	lds	r19, 0x0122
     65c:	80 91 1e 01 	lds	r24, 0x011E
     660:	90 91 1f 01 	lds	r25, 0x011F
     664:	82 2b       	or	r24, r18
     666:	93 2b       	or	r25, r19
     668:	90 93 22 01 	sts	0x0122, r25
     66c:	80 93 21 01 	sts	0x0121, r24
							beacons_rcvd = 2;
     670:	f0 92 20 01 	sts	0x0120, r15
     674:	3e c0       	rjmp	.+124    	; 0x6f2 <main+0x2d4>
								beacons_rcvd = 0;
								//PORTB &= ~( (1<<PORTB0) | (1<<PORTB2) );
							}
						}
					}
					else if (lastRcv==beaconID3) { // if other two times are not zero, store time and add to beacons rcvd; else ignore
     676:	90 91 1c 01 	lds	r25, 0x011C
     67a:	80 91 03 01 	lds	r24, 0x0103
     67e:	98 17       	cp	r25, r24
     680:	c1 f5       	brne	.+112    	; 0x6f2 <main+0x2d4>
						if ((beacons_rcvd==2) && (beaconID1_time>0) && (beaconID2_time>0)) {
     682:	80 91 20 01 	lds	r24, 0x0120
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	f9 f4       	brne	.+62     	; 0x6c8 <main+0x2aa>
     68a:	80 91 25 01 	lds	r24, 0x0125
     68e:	90 91 26 01 	lds	r25, 0x0126
     692:	18 16       	cp	r1, r24
     694:	19 06       	cpc	r1, r25
     696:	c4 f4       	brge	.+48     	; 0x6c8 <main+0x2aa>
     698:	80 91 21 01 	lds	r24, 0x0121
     69c:	90 91 22 01 	lds	r25, 0x0122
     6a0:	18 16       	cp	r1, r24
     6a2:	19 06       	cpc	r1, r25
     6a4:	8c f4       	brge	.+34     	; 0x6c8 <main+0x2aa>
							beaconID3_time |= rcv_time;
     6a6:	20 91 23 01 	lds	r18, 0x0123
     6aa:	30 91 24 01 	lds	r19, 0x0124
     6ae:	80 91 1e 01 	lds	r24, 0x011E
     6b2:	90 91 1f 01 	lds	r25, 0x011F
     6b6:	82 2b       	or	r24, r18
     6b8:	93 2b       	or	r25, r19
     6ba:	90 93 24 01 	sts	0x0124, r25
     6be:	80 93 23 01 	sts	0x0123, r24
							beacons_rcvd = 3;
     6c2:	00 93 20 01 	sts	0x0120, r16
     6c6:	15 c0       	rjmp	.+42     	; 0x6f2 <main+0x2d4>
							//PORTB |= (1<<PORTB2)|(1<<PORTB0);
						} else {
							if (rcv_time > 100) {
     6c8:	80 91 1e 01 	lds	r24, 0x011E
     6cc:	90 91 1f 01 	lds	r25, 0x011F
     6d0:	85 36       	cpi	r24, 0x65	; 101
     6d2:	91 05       	cpc	r25, r1
     6d4:	74 f0       	brlt	.+28     	; 0x6f2 <main+0x2d4>
								beaconID1_time = 0;
     6d6:	10 92 26 01 	sts	0x0126, r1
     6da:	10 92 25 01 	sts	0x0125, r1
								beaconID2_time = 0;
     6de:	10 92 22 01 	sts	0x0122, r1
     6e2:	10 92 21 01 	sts	0x0121, r1
								beaconID3_time = 0;
     6e6:	10 92 24 01 	sts	0x0124, r1
     6ea:	10 92 23 01 	sts	0x0123, r1
								beacons_rcvd = 0;
     6ee:	10 92 20 01 	sts	0x0120, r1
				// if 3->1 (beaconID1_time) is the longest time, move to beacon 2
				// if 1->2 (beaconID2_time) is the longest time, move to beacon 3
				// if 2->3 (beaconID3_time) is the longest time, move to beacon 1

				// calculate movement
				if (beacons_rcvd==3) {
     6f2:	80 91 20 01 	lds	r24, 0x0120
     6f6:	83 30       	cpi	r24, 0x03	; 3
     6f8:	09 f0       	breq	.+2      	; 0x6fc <main+0x2de>
     6fa:	1f c1       	rjmp	.+574    	; 0x93a <__stack+0x3b>

					//PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );

					if ((beaconID1_time>(beaconID2_time+center_threshold)) && (beaconID1_time>(beaconID2_time+center_threshold))) {
     6fc:	40 91 25 01 	lds	r20, 0x0125
     700:	50 91 26 01 	lds	r21, 0x0126
     704:	20 91 21 01 	lds	r18, 0x0121
     708:	30 91 22 01 	lds	r19, 0x0122
     70c:	80 91 05 01 	lds	r24, 0x0105
     710:	90 91 06 01 	lds	r25, 0x0106
     714:	82 0f       	add	r24, r18
     716:	93 1f       	adc	r25, r19
     718:	84 17       	cp	r24, r20
     71a:	95 07       	cpc	r25, r21
     71c:	ec f4       	brge	.+58     	; 0x758 <main+0x33a>
     71e:	40 91 25 01 	lds	r20, 0x0125
     722:	50 91 26 01 	lds	r21, 0x0126
     726:	20 91 21 01 	lds	r18, 0x0121
     72a:	30 91 22 01 	lds	r19, 0x0122
     72e:	80 91 05 01 	lds	r24, 0x0105
     732:	90 91 06 01 	lds	r25, 0x0106
     736:	82 0f       	add	r24, r18
     738:	93 1f       	adc	r25, r19
     73a:	84 17       	cp	r24, r20
     73c:	95 07       	cpc	r25, r21
     73e:	64 f4       	brge	.+24     	; 0x758 <main+0x33a>
						desired_beacon |= beaconID2;
     740:	80 91 27 01 	lds	r24, 0x0127
     744:	90 91 02 01 	lds	r25, 0x0102
     748:	98 2b       	or	r25, r24
     74a:	90 93 27 01 	sts	0x0127, r25
						detach_time = per/5;
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     74e:	85 b1       	in	r24, 0x05	; 5
     750:	88 7f       	andi	r24, 0xF8	; 248
     752:	85 b9       	out	0x05, r24	; 5
						PORTB |= (1<<PORTB1);
     754:	29 9a       	sbi	0x05, 1	; 5
     756:	ef c0       	rjmp	.+478    	; 0x936 <__stack+0x37>
							PORTB|=(1<<PORTB1);
							_delay_ms(250);
							PORTB&=~(1<<PORTB1);
							_delay_ms(250);
						}*/
					} else if ((beaconID2_time>(beaconID1_time+center_threshold)) && (beaconID2_time>(beaconID3_time+center_threshold))) {
     758:	40 91 21 01 	lds	r20, 0x0121
     75c:	50 91 22 01 	lds	r21, 0x0122
     760:	20 91 25 01 	lds	r18, 0x0125
     764:	30 91 26 01 	lds	r19, 0x0126
     768:	80 91 05 01 	lds	r24, 0x0105
     76c:	90 91 06 01 	lds	r25, 0x0106
     770:	82 0f       	add	r24, r18
     772:	93 1f       	adc	r25, r19
     774:	84 17       	cp	r24, r20
     776:	95 07       	cpc	r25, r21
     778:	ec f4       	brge	.+58     	; 0x7b4 <main+0x396>
     77a:	40 91 21 01 	lds	r20, 0x0121
     77e:	50 91 22 01 	lds	r21, 0x0122
     782:	20 91 23 01 	lds	r18, 0x0123
     786:	30 91 24 01 	lds	r19, 0x0124
     78a:	80 91 05 01 	lds	r24, 0x0105
     78e:	90 91 06 01 	lds	r25, 0x0106
     792:	82 0f       	add	r24, r18
     794:	93 1f       	adc	r25, r19
     796:	84 17       	cp	r24, r20
     798:	95 07       	cpc	r25, r21
     79a:	64 f4       	brge	.+24     	; 0x7b4 <main+0x396>
						desired_beacon |= beaconID3;
     79c:	80 91 27 01 	lds	r24, 0x0127
     7a0:	90 91 03 01 	lds	r25, 0x0103
     7a4:	98 2b       	or	r25, r24
     7a6:	90 93 27 01 	sts	0x0127, r25
						detach_time = per/5;
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     7aa:	85 b1       	in	r24, 0x05	; 5
     7ac:	88 7f       	andi	r24, 0xF8	; 248
     7ae:	85 b9       	out	0x05, r24	; 5
						PORTB |= (1<<PORTB2);
     7b0:	2a 9a       	sbi	0x05, 2	; 5
     7b2:	c1 c0       	rjmp	.+386    	; 0x936 <__stack+0x37>
							PORTB|=(1<<PORTB2);
							_delay_ms(250);
							PORTB&=~(1<<PORTB2);
							_delay_ms(250);
						}*/
					} else if ((beaconID3_time>(beaconID1_time+center_threshold)) && (beaconID3_time>(beaconID1_time+center_threshold))) {
     7b4:	40 91 23 01 	lds	r20, 0x0123
     7b8:	50 91 24 01 	lds	r21, 0x0124
     7bc:	20 91 25 01 	lds	r18, 0x0125
     7c0:	30 91 26 01 	lds	r19, 0x0126
     7c4:	80 91 05 01 	lds	r24, 0x0105
     7c8:	90 91 06 01 	lds	r25, 0x0106
     7cc:	82 0f       	add	r24, r18
     7ce:	93 1f       	adc	r25, r19
     7d0:	84 17       	cp	r24, r20
     7d2:	95 07       	cpc	r25, r21
     7d4:	ec f4       	brge	.+58     	; 0x810 <main+0x3f2>
     7d6:	40 91 23 01 	lds	r20, 0x0123
     7da:	50 91 24 01 	lds	r21, 0x0124
     7de:	20 91 25 01 	lds	r18, 0x0125
     7e2:	30 91 26 01 	lds	r19, 0x0126
     7e6:	80 91 05 01 	lds	r24, 0x0105
     7ea:	90 91 06 01 	lds	r25, 0x0106
     7ee:	82 0f       	add	r24, r18
     7f0:	93 1f       	adc	r25, r19
     7f2:	84 17       	cp	r24, r20
     7f4:	95 07       	cpc	r25, r21
     7f6:	64 f4       	brge	.+24     	; 0x810 <main+0x3f2>
						desired_beacon |= beaconID1;
     7f8:	80 91 27 01 	lds	r24, 0x0127
     7fc:	90 91 01 01 	lds	r25, 0x0101
     800:	98 2b       	or	r25, r24
     802:	90 93 27 01 	sts	0x0127, r25
						detach_time = per/5;
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     806:	85 b1       	in	r24, 0x05	; 5
     808:	88 7f       	andi	r24, 0xF8	; 248
     80a:	85 b9       	out	0x05, r24	; 5
						PORTB |= (1<<PORTB0);
     80c:	28 9a       	sbi	0x05, 0	; 5
     80e:	93 c0       	rjmp	.+294    	; 0x936 <__stack+0x37>
							PORTB|=(1<<PORTB0);
							_delay_ms(250);
							PORTB&=~(1<<PORTB0);
							_delay_ms(250);
						}*/
					} else if ((beaconID1_time<(beaconID2_time-(center_threshold))) && (beaconID1_time<(beaconID2_time-(center_threshold)))) {
     810:	80 91 25 01 	lds	r24, 0x0125
     814:	90 91 26 01 	lds	r25, 0x0126
     818:	20 91 21 01 	lds	r18, 0x0121
     81c:	30 91 22 01 	lds	r19, 0x0122
     820:	40 91 05 01 	lds	r20, 0x0105
     824:	50 91 06 01 	lds	r21, 0x0106
     828:	24 1b       	sub	r18, r20
     82a:	35 0b       	sbc	r19, r21
     82c:	82 17       	cp	r24, r18
     82e:	93 07       	cpc	r25, r19
     830:	f4 f4       	brge	.+60     	; 0x86e <main+0x450>
     832:	80 91 25 01 	lds	r24, 0x0125
     836:	90 91 26 01 	lds	r25, 0x0126
     83a:	20 91 21 01 	lds	r18, 0x0121
     83e:	30 91 22 01 	lds	r19, 0x0122
     842:	40 91 05 01 	lds	r20, 0x0105
     846:	50 91 06 01 	lds	r21, 0x0106
     84a:	24 1b       	sub	r18, r20
     84c:	35 0b       	sbc	r19, r21
     84e:	82 17       	cp	r24, r18
     850:	93 07       	cpc	r25, r19
     852:	6c f4       	brge	.+26     	; 0x86e <main+0x450>
						desired_beacon |= beaconID3; // move CW towards beacon 3, then resume centering routine
     854:	90 91 27 01 	lds	r25, 0x0127
     858:	80 91 03 01 	lds	r24, 0x0103
     85c:	89 2b       	or	r24, r25
     85e:	80 93 27 01 	sts	0x0127, r24
						detach_time = (per/5)+(per/6);
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     862:	85 b1       	in	r24, 0x05	; 5
     864:	88 7f       	andi	r24, 0xF8	; 248
     866:	85 b9       	out	0x05, r24	; 5
						PORTB |= ( (1<<PORTB2) | (1<<PORTB1) );
     868:	85 b1       	in	r24, 0x05	; 5
     86a:	86 60       	ori	r24, 0x06	; 6
     86c:	5d c0       	rjmp	.+186    	; 0x928 <__stack+0x29>
					} else if ((beaconID2_time<(beaconID1_time-(center_threshold))) && (beaconID2_time<(beaconID3_time-(center_threshold)))) {
     86e:	80 91 21 01 	lds	r24, 0x0121
     872:	90 91 22 01 	lds	r25, 0x0122
     876:	20 91 25 01 	lds	r18, 0x0125
     87a:	30 91 26 01 	lds	r19, 0x0126
     87e:	40 91 05 01 	lds	r20, 0x0105
     882:	50 91 06 01 	lds	r21, 0x0106
     886:	24 1b       	sub	r18, r20
     888:	35 0b       	sbc	r19, r21
     88a:	82 17       	cp	r24, r18
     88c:	93 07       	cpc	r25, r19
     88e:	f4 f4       	brge	.+60     	; 0x8cc <main+0x4ae>
     890:	80 91 21 01 	lds	r24, 0x0121
     894:	90 91 22 01 	lds	r25, 0x0122
     898:	20 91 23 01 	lds	r18, 0x0123
     89c:	30 91 24 01 	lds	r19, 0x0124
     8a0:	40 91 05 01 	lds	r20, 0x0105
     8a4:	50 91 06 01 	lds	r21, 0x0106
     8a8:	24 1b       	sub	r18, r20
     8aa:	35 0b       	sbc	r19, r21
     8ac:	82 17       	cp	r24, r18
     8ae:	93 07       	cpc	r25, r19
     8b0:	6c f4       	brge	.+26     	; 0x8cc <main+0x4ae>
						desired_beacon |= beaconID1; // move CW towards beacon 1, then resume centering routine
     8b2:	90 91 27 01 	lds	r25, 0x0127
     8b6:	80 91 01 01 	lds	r24, 0x0101
     8ba:	89 2b       	or	r24, r25
     8bc:	80 93 27 01 	sts	0x0127, r24
						detach_time = (per/5)+(per/6);
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     8c0:	85 b1       	in	r24, 0x05	; 5
     8c2:	88 7f       	andi	r24, 0xF8	; 248
     8c4:	85 b9       	out	0x05, r24	; 5
						PORTB |= ( (1<<PORTB0) | (1<<PORTB2) );
     8c6:	85 b1       	in	r24, 0x05	; 5
     8c8:	85 60       	ori	r24, 0x05	; 5
     8ca:	2e c0       	rjmp	.+92     	; 0x928 <__stack+0x29>
					} else if ((beaconID3_time<(beaconID1_time-(center_threshold))) && (beaconID3_time<(beaconID1_time-(center_threshold)))) {
     8cc:	80 91 23 01 	lds	r24, 0x0123
     8d0:	90 91 24 01 	lds	r25, 0x0124
     8d4:	20 91 25 01 	lds	r18, 0x0125
     8d8:	30 91 26 01 	lds	r19, 0x0126
     8dc:	40 91 05 01 	lds	r20, 0x0105
     8e0:	50 91 06 01 	lds	r21, 0x0106
     8e4:	24 1b       	sub	r18, r20
     8e6:	35 0b       	sbc	r19, r21
     8e8:	82 17       	cp	r24, r18
     8ea:	93 07       	cpc	r25, r19
     8ec:	fc f4       	brge	.+62     	; 0x92c <__stack+0x2d>
     8ee:	80 91 23 01 	lds	r24, 0x0123
     8f2:	90 91 24 01 	lds	r25, 0x0124
     8f6:	20 91 25 01 	lds	r18, 0x0125
     8fa:	30 91 26 01 	lds	r19, 0x0126
     8fe:	40 91 05 01 	lds	r20, 0x0105
     902:	50 91 06 01 	lds	r21, 0x0106
     906:	24 1b       	sub	r18, r20
     908:	35 0b       	sbc	r19, r21
     90a:	82 17       	cp	r24, r18
     90c:	93 07       	cpc	r25, r19
     90e:	74 f4       	brge	.+28     	; 0x92c <__stack+0x2d>
						desired_beacon |= beaconID2; // move CW towards beacon 2, then resume centering routine
     910:	90 91 27 01 	lds	r25, 0x0127
     914:	80 91 02 01 	lds	r24, 0x0102
     918:	89 2b       	or	r24, r25
     91a:	80 93 27 01 	sts	0x0127, r24
						detach_time = (per/5)+(per/6);
						PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     91e:	85 b1       	in	r24, 0x05	; 5
     920:	88 7f       	andi	r24, 0xF8	; 248
     922:	85 b9       	out	0x05, r24	; 5
						PORTB |= ( (1<<PORTB1) | (1<<PORTB0) );
     924:	85 b1       	in	r24, 0x05	; 5
     926:	83 60       	ori	r24, 0x03	; 3
     928:	85 b9       	out	0x05, r24	; 5
     92a:	05 c0       	rjmp	.+10     	; 0x936 <__stack+0x37>
					} else { // within centering threshold, end of program
						while(1) { 
							cli();
     92c:	f8 94       	cli
							PORTB |= (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2); 
     92e:	85 b1       	in	r24, 0x05	; 5
     930:	87 60       	ori	r24, 0x07	; 7
     932:	85 b9       	out	0x05, r24	; 5
     934:	fb cf       	rjmp	.-10     	; 0x92c <__stack+0x2d>
						}
					}

					beacons_rcvd=4; // indicated that direction of motion has been decided
     936:	10 93 20 01 	sts	0x0120, r17
					
				}
				rcv_sx = 0; // wait for next rotation to execute movement
     93a:	10 92 19 01 	sts	0x0119, r1
     93e:	10 92 18 01 	sts	0x0118, r1
			}

			if ((rcv_sx==1)&&(beacons_rcvd==4)) { // now, execute the movement, to ensure correct direction	
     942:	80 91 18 01 	lds	r24, 0x0118
     946:	90 91 19 01 	lds	r25, 0x0119
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	09 f0       	breq	.+2      	; 0x950 <__stack+0x51>
     94e:	f7 cd       	rjmp	.-1042   	; 0x53e <main+0x120>
     950:	80 91 20 01 	lds	r24, 0x0120
     954:	84 30       	cpi	r24, 0x04	; 4
     956:	09 f0       	breq	.+2      	; 0x95a <__stack+0x5b>
     958:	f2 cd       	rjmp	.-1052   	; 0x53e <main+0x120>
				// execute movement
				if((lastRcv==desired_beacon)&&(rcv_time>100)) { // if last message is from desired beacon -> start movement sequence
     95a:	90 91 1c 01 	lds	r25, 0x011C
     95e:	80 91 27 01 	lds	r24, 0x0127
     962:	98 17       	cp	r25, r24
     964:	49 f5       	brne	.+82     	; 0x9b8 <__stack+0xb9>
     966:	80 91 1e 01 	lds	r24, 0x011E
     96a:	90 91 1f 01 	lds	r25, 0x011F
     96e:	85 36       	cpi	r24, 0x65	; 101
     970:	91 05       	cpc	r25, r1
     972:	14 f1       	brlt	.+68     	; 0x9b8 <__stack+0xb9>
					cli(); // disable all interrupts so that movement can be executed
     974:	f8 94       	cli
     976:	80 e2       	ldi	r24, 0x20	; 32
     978:	93 e0       	ldi	r25, 0x03	; 3
     97a:	fe 01       	movw	r30, r28
     97c:	31 97       	sbiw	r30, 0x01	; 1
     97e:	f1 f7       	brne	.-4      	; 0x97c <__stack+0x7d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     980:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     982:	d9 f7       	brne	.-10     	; 0x97a <__stack+0x7b>
					while (dd<detach_time) {
						_delay_us(140);
						dd+=1;
					} */
					_delay_ms(80); // hard-coded delay based on 72 deg at ~165 rpm					
					detach(80);
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	80 ea       	ldi	r24, 0xA0	; 160
     98a:	92 e4       	ldi	r25, 0x42	; 66
     98c:	0e 94 aa 01 	call	0x354	; 0x354 <detach>
					// reset movement variables
					beaconID1_time = 0;
     990:	10 92 26 01 	sts	0x0126, r1
     994:	10 92 25 01 	sts	0x0125, r1
					beaconID2_time = 0;
     998:	10 92 22 01 	sts	0x0122, r1
     99c:	10 92 21 01 	sts	0x0121, r1
					beaconID3_time = 0;
     9a0:	10 92 24 01 	sts	0x0124, r1
     9a4:	10 92 23 01 	sts	0x0123, r1
					beacons_rcvd = 0;
     9a8:	10 92 20 01 	sts	0x0120, r1
					desired_beacon = 0;
     9ac:	10 92 27 01 	sts	0x0127, r1
					detach_time = 0;
					PORTB &= ~( (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0) );
     9b0:	85 b1       	in	r24, 0x05	; 5
     9b2:	88 7f       	andi	r24, 0xF8	; 248
     9b4:	85 b9       	out	0x05, r24	; 5
					sei(); // re-enable interrupts again to plan next movement
     9b6:	78 94       	sei
				}
				rcv_sx = 0;
     9b8:	10 92 19 01 	sts	0x0119, r1
     9bc:	10 92 18 01 	sts	0x0118, r1
     9c0:	be cd       	rjmp	.-1156   	; 0x53e <main+0x120>

000009c2 <__fixunssfsi>:
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	7b 01       	movw	r14, r22
     9cc:	8c 01       	movw	r16, r24
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	5f e4       	ldi	r21, 0x4F	; 79
     9d6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__gesf2>
     9da:	88 23       	and	r24, r24
     9dc:	8c f0       	brlt	.+34     	; 0xa00 <__fixunssfsi+0x3e>
     9de:	c8 01       	movw	r24, r16
     9e0:	b7 01       	movw	r22, r14
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	5f e4       	ldi	r21, 0x4F	; 79
     9ea:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__subsf3>
     9ee:	0e 94 41 08 	call	0x1082	; 0x1082 <__fixsfsi>
     9f2:	9b 01       	movw	r18, r22
     9f4:	ac 01       	movw	r20, r24
     9f6:	20 50       	subi	r18, 0x00	; 0
     9f8:	30 40       	sbci	r19, 0x00	; 0
     9fa:	40 40       	sbci	r20, 0x00	; 0
     9fc:	50 48       	sbci	r21, 0x80	; 128
     9fe:	06 c0       	rjmp	.+12     	; 0xa0c <__fixunssfsi+0x4a>
     a00:	c8 01       	movw	r24, r16
     a02:	b7 01       	movw	r22, r14
     a04:	0e 94 41 08 	call	0x1082	; 0x1082 <__fixsfsi>
     a08:	9b 01       	movw	r18, r22
     a0a:	ac 01       	movw	r20, r24
     a0c:	b9 01       	movw	r22, r18
     a0e:	ca 01       	movw	r24, r20
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	08 95       	ret

00000a1a <_fpadd_parts>:
     a1a:	a0 e0       	ldi	r26, 0x00	; 0
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	e3 e1       	ldi	r30, 0x13	; 19
     a20:	f5 e0       	ldi	r31, 0x05	; 5
     a22:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__prologue_saves__>
     a26:	dc 01       	movw	r26, r24
     a28:	2b 01       	movw	r4, r22
     a2a:	fa 01       	movw	r30, r20
     a2c:	9c 91       	ld	r25, X
     a2e:	92 30       	cpi	r25, 0x02	; 2
     a30:	08 f4       	brcc	.+2      	; 0xa34 <_fpadd_parts+0x1a>
     a32:	39 c1       	rjmp	.+626    	; 0xca6 <_fpadd_parts+0x28c>
     a34:	eb 01       	movw	r28, r22
     a36:	88 81       	ld	r24, Y
     a38:	82 30       	cpi	r24, 0x02	; 2
     a3a:	08 f4       	brcc	.+2      	; 0xa3e <_fpadd_parts+0x24>
     a3c:	33 c1       	rjmp	.+614    	; 0xca4 <_fpadd_parts+0x28a>
     a3e:	94 30       	cpi	r25, 0x04	; 4
     a40:	69 f4       	brne	.+26     	; 0xa5c <_fpadd_parts+0x42>
     a42:	84 30       	cpi	r24, 0x04	; 4
     a44:	09 f0       	breq	.+2      	; 0xa48 <_fpadd_parts+0x2e>
     a46:	2f c1       	rjmp	.+606    	; 0xca6 <_fpadd_parts+0x28c>
     a48:	11 96       	adiw	r26, 0x01	; 1
     a4a:	9c 91       	ld	r25, X
     a4c:	11 97       	sbiw	r26, 0x01	; 1
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	98 17       	cp	r25, r24
     a52:	09 f4       	brne	.+2      	; 0xa56 <_fpadd_parts+0x3c>
     a54:	28 c1       	rjmp	.+592    	; 0xca6 <_fpadd_parts+0x28c>
     a56:	a7 e0       	ldi	r26, 0x07	; 7
     a58:	b1 e0       	ldi	r27, 0x01	; 1
     a5a:	25 c1       	rjmp	.+586    	; 0xca6 <_fpadd_parts+0x28c>
     a5c:	84 30       	cpi	r24, 0x04	; 4
     a5e:	09 f4       	brne	.+2      	; 0xa62 <_fpadd_parts+0x48>
     a60:	21 c1       	rjmp	.+578    	; 0xca4 <_fpadd_parts+0x28a>
     a62:	82 30       	cpi	r24, 0x02	; 2
     a64:	a9 f4       	brne	.+42     	; 0xa90 <_fpadd_parts+0x76>
     a66:	92 30       	cpi	r25, 0x02	; 2
     a68:	09 f0       	breq	.+2      	; 0xa6c <_fpadd_parts+0x52>
     a6a:	1d c1       	rjmp	.+570    	; 0xca6 <_fpadd_parts+0x28c>
     a6c:	9a 01       	movw	r18, r20
     a6e:	ad 01       	movw	r20, r26
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	ea 01       	movw	r28, r20
     a74:	09 90       	ld	r0, Y+
     a76:	ae 01       	movw	r20, r28
     a78:	e9 01       	movw	r28, r18
     a7a:	09 92       	st	Y+, r0
     a7c:	9e 01       	movw	r18, r28
     a7e:	81 50       	subi	r24, 0x01	; 1
     a80:	c1 f7       	brne	.-16     	; 0xa72 <_fpadd_parts+0x58>
     a82:	e2 01       	movw	r28, r4
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	11 96       	adiw	r26, 0x01	; 1
     a88:	9c 91       	ld	r25, X
     a8a:	89 23       	and	r24, r25
     a8c:	81 83       	std	Z+1, r24	; 0x01
     a8e:	08 c1       	rjmp	.+528    	; 0xca0 <_fpadd_parts+0x286>
     a90:	92 30       	cpi	r25, 0x02	; 2
     a92:	09 f4       	brne	.+2      	; 0xa96 <_fpadd_parts+0x7c>
     a94:	07 c1       	rjmp	.+526    	; 0xca4 <_fpadd_parts+0x28a>
     a96:	12 96       	adiw	r26, 0x02	; 2
     a98:	2d 90       	ld	r2, X+
     a9a:	3c 90       	ld	r3, X
     a9c:	13 97       	sbiw	r26, 0x03	; 3
     a9e:	eb 01       	movw	r28, r22
     aa0:	8a 81       	ldd	r24, Y+2	; 0x02
     aa2:	9b 81       	ldd	r25, Y+3	; 0x03
     aa4:	14 96       	adiw	r26, 0x04	; 4
     aa6:	ad 90       	ld	r10, X+
     aa8:	bd 90       	ld	r11, X+
     aaa:	cd 90       	ld	r12, X+
     aac:	dc 90       	ld	r13, X
     aae:	17 97       	sbiw	r26, 0x07	; 7
     ab0:	ec 80       	ldd	r14, Y+4	; 0x04
     ab2:	fd 80       	ldd	r15, Y+5	; 0x05
     ab4:	0e 81       	ldd	r16, Y+6	; 0x06
     ab6:	1f 81       	ldd	r17, Y+7	; 0x07
     ab8:	91 01       	movw	r18, r2
     aba:	28 1b       	sub	r18, r24
     abc:	39 0b       	sbc	r19, r25
     abe:	b9 01       	movw	r22, r18
     ac0:	37 ff       	sbrs	r19, 7
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <_fpadd_parts+0xb2>
     ac4:	66 27       	eor	r22, r22
     ac6:	77 27       	eor	r23, r23
     ac8:	62 1b       	sub	r22, r18
     aca:	73 0b       	sbc	r23, r19
     acc:	60 32       	cpi	r22, 0x20	; 32
     ace:	71 05       	cpc	r23, r1
     ad0:	0c f0       	brlt	.+2      	; 0xad4 <_fpadd_parts+0xba>
     ad2:	61 c0       	rjmp	.+194    	; 0xb96 <_fpadd_parts+0x17c>
     ad4:	12 16       	cp	r1, r18
     ad6:	13 06       	cpc	r1, r19
     ad8:	6c f5       	brge	.+90     	; 0xb34 <_fpadd_parts+0x11a>
     ada:	37 01       	movw	r6, r14
     adc:	48 01       	movw	r8, r16
     ade:	06 2e       	mov	r0, r22
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <_fpadd_parts+0xd0>
     ae2:	96 94       	lsr	r9
     ae4:	87 94       	ror	r8
     ae6:	77 94       	ror	r7
     ae8:	67 94       	ror	r6
     aea:	0a 94       	dec	r0
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <_fpadd_parts+0xc8>
     aee:	21 e0       	ldi	r18, 0x01	; 1
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <_fpadd_parts+0xe6>
     af8:	22 0f       	add	r18, r18
     afa:	33 1f       	adc	r19, r19
     afc:	44 1f       	adc	r20, r20
     afe:	55 1f       	adc	r21, r21
     b00:	6a 95       	dec	r22
     b02:	d2 f7       	brpl	.-12     	; 0xaf8 <_fpadd_parts+0xde>
     b04:	21 50       	subi	r18, 0x01	; 1
     b06:	30 40       	sbci	r19, 0x00	; 0
     b08:	40 40       	sbci	r20, 0x00	; 0
     b0a:	50 40       	sbci	r21, 0x00	; 0
     b0c:	2e 21       	and	r18, r14
     b0e:	3f 21       	and	r19, r15
     b10:	40 23       	and	r20, r16
     b12:	51 23       	and	r21, r17
     b14:	21 15       	cp	r18, r1
     b16:	31 05       	cpc	r19, r1
     b18:	41 05       	cpc	r20, r1
     b1a:	51 05       	cpc	r21, r1
     b1c:	21 f0       	breq	.+8      	; 0xb26 <_fpadd_parts+0x10c>
     b1e:	21 e0       	ldi	r18, 0x01	; 1
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	40 e0       	ldi	r20, 0x00	; 0
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	79 01       	movw	r14, r18
     b28:	8a 01       	movw	r16, r20
     b2a:	e6 28       	or	r14, r6
     b2c:	f7 28       	or	r15, r7
     b2e:	08 29       	or	r16, r8
     b30:	19 29       	or	r17, r9
     b32:	3c c0       	rjmp	.+120    	; 0xbac <_fpadd_parts+0x192>
     b34:	23 2b       	or	r18, r19
     b36:	d1 f1       	breq	.+116    	; 0xbac <_fpadd_parts+0x192>
     b38:	26 0e       	add	r2, r22
     b3a:	37 1e       	adc	r3, r23
     b3c:	35 01       	movw	r6, r10
     b3e:	46 01       	movw	r8, r12
     b40:	06 2e       	mov	r0, r22
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <_fpadd_parts+0x132>
     b44:	96 94       	lsr	r9
     b46:	87 94       	ror	r8
     b48:	77 94       	ror	r7
     b4a:	67 94       	ror	r6
     b4c:	0a 94       	dec	r0
     b4e:	d2 f7       	brpl	.-12     	; 0xb44 <_fpadd_parts+0x12a>
     b50:	21 e0       	ldi	r18, 0x01	; 1
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	04 c0       	rjmp	.+8      	; 0xb62 <_fpadd_parts+0x148>
     b5a:	22 0f       	add	r18, r18
     b5c:	33 1f       	adc	r19, r19
     b5e:	44 1f       	adc	r20, r20
     b60:	55 1f       	adc	r21, r21
     b62:	6a 95       	dec	r22
     b64:	d2 f7       	brpl	.-12     	; 0xb5a <_fpadd_parts+0x140>
     b66:	21 50       	subi	r18, 0x01	; 1
     b68:	30 40       	sbci	r19, 0x00	; 0
     b6a:	40 40       	sbci	r20, 0x00	; 0
     b6c:	50 40       	sbci	r21, 0x00	; 0
     b6e:	2a 21       	and	r18, r10
     b70:	3b 21       	and	r19, r11
     b72:	4c 21       	and	r20, r12
     b74:	5d 21       	and	r21, r13
     b76:	21 15       	cp	r18, r1
     b78:	31 05       	cpc	r19, r1
     b7a:	41 05       	cpc	r20, r1
     b7c:	51 05       	cpc	r21, r1
     b7e:	21 f0       	breq	.+8      	; 0xb88 <_fpadd_parts+0x16e>
     b80:	21 e0       	ldi	r18, 0x01	; 1
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	59 01       	movw	r10, r18
     b8a:	6a 01       	movw	r12, r20
     b8c:	a6 28       	or	r10, r6
     b8e:	b7 28       	or	r11, r7
     b90:	c8 28       	or	r12, r8
     b92:	d9 28       	or	r13, r9
     b94:	0b c0       	rjmp	.+22     	; 0xbac <_fpadd_parts+0x192>
     b96:	82 15       	cp	r24, r2
     b98:	93 05       	cpc	r25, r3
     b9a:	2c f0       	brlt	.+10     	; 0xba6 <_fpadd_parts+0x18c>
     b9c:	1c 01       	movw	r2, r24
     b9e:	aa 24       	eor	r10, r10
     ba0:	bb 24       	eor	r11, r11
     ba2:	65 01       	movw	r12, r10
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <_fpadd_parts+0x192>
     ba6:	ee 24       	eor	r14, r14
     ba8:	ff 24       	eor	r15, r15
     baa:	87 01       	movw	r16, r14
     bac:	11 96       	adiw	r26, 0x01	; 1
     bae:	9c 91       	ld	r25, X
     bb0:	d2 01       	movw	r26, r4
     bb2:	11 96       	adiw	r26, 0x01	; 1
     bb4:	8c 91       	ld	r24, X
     bb6:	98 17       	cp	r25, r24
     bb8:	09 f4       	brne	.+2      	; 0xbbc <_fpadd_parts+0x1a2>
     bba:	45 c0       	rjmp	.+138    	; 0xc46 <_fpadd_parts+0x22c>
     bbc:	99 23       	and	r25, r25
     bbe:	39 f0       	breq	.+14     	; 0xbce <_fpadd_parts+0x1b4>
     bc0:	a8 01       	movw	r20, r16
     bc2:	97 01       	movw	r18, r14
     bc4:	2a 19       	sub	r18, r10
     bc6:	3b 09       	sbc	r19, r11
     bc8:	4c 09       	sbc	r20, r12
     bca:	5d 09       	sbc	r21, r13
     bcc:	06 c0       	rjmp	.+12     	; 0xbda <_fpadd_parts+0x1c0>
     bce:	a6 01       	movw	r20, r12
     bd0:	95 01       	movw	r18, r10
     bd2:	2e 19       	sub	r18, r14
     bd4:	3f 09       	sbc	r19, r15
     bd6:	40 0b       	sbc	r20, r16
     bd8:	51 0b       	sbc	r21, r17
     bda:	57 fd       	sbrc	r21, 7
     bdc:	08 c0       	rjmp	.+16     	; 0xbee <_fpadd_parts+0x1d4>
     bde:	11 82       	std	Z+1, r1	; 0x01
     be0:	33 82       	std	Z+3, r3	; 0x03
     be2:	22 82       	std	Z+2, r2	; 0x02
     be4:	24 83       	std	Z+4, r18	; 0x04
     be6:	35 83       	std	Z+5, r19	; 0x05
     be8:	46 83       	std	Z+6, r20	; 0x06
     bea:	57 83       	std	Z+7, r21	; 0x07
     bec:	1d c0       	rjmp	.+58     	; 0xc28 <_fpadd_parts+0x20e>
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	81 83       	std	Z+1, r24	; 0x01
     bf2:	33 82       	std	Z+3, r3	; 0x03
     bf4:	22 82       	std	Z+2, r2	; 0x02
     bf6:	88 27       	eor	r24, r24
     bf8:	99 27       	eor	r25, r25
     bfa:	dc 01       	movw	r26, r24
     bfc:	82 1b       	sub	r24, r18
     bfe:	93 0b       	sbc	r25, r19
     c00:	a4 0b       	sbc	r26, r20
     c02:	b5 0b       	sbc	r27, r21
     c04:	84 83       	std	Z+4, r24	; 0x04
     c06:	95 83       	std	Z+5, r25	; 0x05
     c08:	a6 83       	std	Z+6, r26	; 0x06
     c0a:	b7 83       	std	Z+7, r27	; 0x07
     c0c:	0d c0       	rjmp	.+26     	; 0xc28 <_fpadd_parts+0x20e>
     c0e:	22 0f       	add	r18, r18
     c10:	33 1f       	adc	r19, r19
     c12:	44 1f       	adc	r20, r20
     c14:	55 1f       	adc	r21, r21
     c16:	24 83       	std	Z+4, r18	; 0x04
     c18:	35 83       	std	Z+5, r19	; 0x05
     c1a:	46 83       	std	Z+6, r20	; 0x06
     c1c:	57 83       	std	Z+7, r21	; 0x07
     c1e:	82 81       	ldd	r24, Z+2	; 0x02
     c20:	93 81       	ldd	r25, Z+3	; 0x03
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	93 83       	std	Z+3, r25	; 0x03
     c26:	82 83       	std	Z+2, r24	; 0x02
     c28:	24 81       	ldd	r18, Z+4	; 0x04
     c2a:	35 81       	ldd	r19, Z+5	; 0x05
     c2c:	46 81       	ldd	r20, Z+6	; 0x06
     c2e:	57 81       	ldd	r21, Z+7	; 0x07
     c30:	da 01       	movw	r26, r20
     c32:	c9 01       	movw	r24, r18
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	a1 09       	sbc	r26, r1
     c38:	b1 09       	sbc	r27, r1
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	9f 4f       	sbci	r25, 0xFF	; 255
     c3e:	af 4f       	sbci	r26, 0xFF	; 255
     c40:	bf 43       	sbci	r27, 0x3F	; 63
     c42:	28 f3       	brcs	.-54     	; 0xc0e <_fpadd_parts+0x1f4>
     c44:	0b c0       	rjmp	.+22     	; 0xc5c <_fpadd_parts+0x242>
     c46:	91 83       	std	Z+1, r25	; 0x01
     c48:	33 82       	std	Z+3, r3	; 0x03
     c4a:	22 82       	std	Z+2, r2	; 0x02
     c4c:	ea 0c       	add	r14, r10
     c4e:	fb 1c       	adc	r15, r11
     c50:	0c 1d       	adc	r16, r12
     c52:	1d 1d       	adc	r17, r13
     c54:	e4 82       	std	Z+4, r14	; 0x04
     c56:	f5 82       	std	Z+5, r15	; 0x05
     c58:	06 83       	std	Z+6, r16	; 0x06
     c5a:	17 83       	std	Z+7, r17	; 0x07
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	80 83       	st	Z, r24
     c60:	24 81       	ldd	r18, Z+4	; 0x04
     c62:	35 81       	ldd	r19, Z+5	; 0x05
     c64:	46 81       	ldd	r20, Z+6	; 0x06
     c66:	57 81       	ldd	r21, Z+7	; 0x07
     c68:	57 ff       	sbrs	r21, 7
     c6a:	1a c0       	rjmp	.+52     	; 0xca0 <_fpadd_parts+0x286>
     c6c:	c9 01       	movw	r24, r18
     c6e:	aa 27       	eor	r26, r26
     c70:	97 fd       	sbrc	r25, 7
     c72:	a0 95       	com	r26
     c74:	ba 2f       	mov	r27, r26
     c76:	81 70       	andi	r24, 0x01	; 1
     c78:	90 70       	andi	r25, 0x00	; 0
     c7a:	a0 70       	andi	r26, 0x00	; 0
     c7c:	b0 70       	andi	r27, 0x00	; 0
     c7e:	56 95       	lsr	r21
     c80:	47 95       	ror	r20
     c82:	37 95       	ror	r19
     c84:	27 95       	ror	r18
     c86:	82 2b       	or	r24, r18
     c88:	93 2b       	or	r25, r19
     c8a:	a4 2b       	or	r26, r20
     c8c:	b5 2b       	or	r27, r21
     c8e:	84 83       	std	Z+4, r24	; 0x04
     c90:	95 83       	std	Z+5, r25	; 0x05
     c92:	a6 83       	std	Z+6, r26	; 0x06
     c94:	b7 83       	std	Z+7, r27	; 0x07
     c96:	82 81       	ldd	r24, Z+2	; 0x02
     c98:	93 81       	ldd	r25, Z+3	; 0x03
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	93 83       	std	Z+3, r25	; 0x03
     c9e:	82 83       	std	Z+2, r24	; 0x02
     ca0:	df 01       	movw	r26, r30
     ca2:	01 c0       	rjmp	.+2      	; 0xca6 <_fpadd_parts+0x28c>
     ca4:	d2 01       	movw	r26, r4
     ca6:	cd 01       	movw	r24, r26
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	e2 e1       	ldi	r30, 0x12	; 18
     cae:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__epilogue_restores__>

00000cb2 <__subsf3>:
     cb2:	a0 e2       	ldi	r26, 0x20	; 32
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ef e5       	ldi	r30, 0x5F	; 95
     cb8:	f6 e0       	ldi	r31, 0x06	; 6
     cba:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__prologue_saves__+0x18>
     cbe:	69 83       	std	Y+1, r22	; 0x01
     cc0:	7a 83       	std	Y+2, r23	; 0x02
     cc2:	8b 83       	std	Y+3, r24	; 0x03
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	2d 83       	std	Y+5, r18	; 0x05
     cc8:	3e 83       	std	Y+6, r19	; 0x06
     cca:	4f 83       	std	Y+7, r20	; 0x07
     ccc:	58 87       	std	Y+8, r21	; 0x08
     cce:	e9 e0       	ldi	r30, 0x09	; 9
     cd0:	ee 2e       	mov	r14, r30
     cd2:	f1 2c       	mov	r15, r1
     cd4:	ec 0e       	add	r14, r28
     cd6:	fd 1e       	adc	r15, r29
     cd8:	ce 01       	movw	r24, r28
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	b7 01       	movw	r22, r14
     cde:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
     ce2:	8e 01       	movw	r16, r28
     ce4:	0f 5e       	subi	r16, 0xEF	; 239
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	ce 01       	movw	r24, r28
     cea:	05 96       	adiw	r24, 0x05	; 5
     cec:	b8 01       	movw	r22, r16
     cee:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
     cf2:	8a 89       	ldd	r24, Y+18	; 0x12
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	89 27       	eor	r24, r25
     cf8:	8a 8b       	std	Y+18, r24	; 0x12
     cfa:	c7 01       	movw	r24, r14
     cfc:	b8 01       	movw	r22, r16
     cfe:	ae 01       	movw	r20, r28
     d00:	47 5e       	subi	r20, 0xE7	; 231
     d02:	5f 4f       	sbci	r21, 0xFF	; 255
     d04:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_fpadd_parts>
     d08:	0e 94 95 08 	call	0x112a	; 0x112a <__pack_f>
     d0c:	a0 96       	adiw	r28, 0x20	; 32
     d0e:	e6 e0       	ldi	r30, 0x06	; 6
     d10:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__epilogue_restores__+0x18>

00000d14 <__addsf3>:
     d14:	a0 e2       	ldi	r26, 0x20	; 32
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e0 e9       	ldi	r30, 0x90	; 144
     d1a:	f6 e0       	ldi	r31, 0x06	; 6
     d1c:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__prologue_saves__+0x18>
     d20:	69 83       	std	Y+1, r22	; 0x01
     d22:	7a 83       	std	Y+2, r23	; 0x02
     d24:	8b 83       	std	Y+3, r24	; 0x03
     d26:	9c 83       	std	Y+4, r25	; 0x04
     d28:	2d 83       	std	Y+5, r18	; 0x05
     d2a:	3e 83       	std	Y+6, r19	; 0x06
     d2c:	4f 83       	std	Y+7, r20	; 0x07
     d2e:	58 87       	std	Y+8, r21	; 0x08
     d30:	f9 e0       	ldi	r31, 0x09	; 9
     d32:	ef 2e       	mov	r14, r31
     d34:	f1 2c       	mov	r15, r1
     d36:	ec 0e       	add	r14, r28
     d38:	fd 1e       	adc	r15, r29
     d3a:	ce 01       	movw	r24, r28
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	b7 01       	movw	r22, r14
     d40:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
     d44:	8e 01       	movw	r16, r28
     d46:	0f 5e       	subi	r16, 0xEF	; 239
     d48:	1f 4f       	sbci	r17, 0xFF	; 255
     d4a:	ce 01       	movw	r24, r28
     d4c:	05 96       	adiw	r24, 0x05	; 5
     d4e:	b8 01       	movw	r22, r16
     d50:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
     d54:	c7 01       	movw	r24, r14
     d56:	b8 01       	movw	r22, r16
     d58:	ae 01       	movw	r20, r28
     d5a:	47 5e       	subi	r20, 0xE7	; 231
     d5c:	5f 4f       	sbci	r21, 0xFF	; 255
     d5e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_fpadd_parts>
     d62:	0e 94 95 08 	call	0x112a	; 0x112a <__pack_f>
     d66:	a0 96       	adiw	r28, 0x20	; 32
     d68:	e6 e0       	ldi	r30, 0x06	; 6
     d6a:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__epilogue_restores__+0x18>

00000d6e <__mulsf3>:
     d6e:	a0 e2       	ldi	r26, 0x20	; 32
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	ed eb       	ldi	r30, 0xBD	; 189
     d74:	f6 e0       	ldi	r31, 0x06	; 6
     d76:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__prologue_saves__>
     d7a:	69 83       	std	Y+1, r22	; 0x01
     d7c:	7a 83       	std	Y+2, r23	; 0x02
     d7e:	8b 83       	std	Y+3, r24	; 0x03
     d80:	9c 83       	std	Y+4, r25	; 0x04
     d82:	2d 83       	std	Y+5, r18	; 0x05
     d84:	3e 83       	std	Y+6, r19	; 0x06
     d86:	4f 83       	std	Y+7, r20	; 0x07
     d88:	58 87       	std	Y+8, r21	; 0x08
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	be 01       	movw	r22, r28
     d90:	67 5f       	subi	r22, 0xF7	; 247
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
     d98:	ce 01       	movw	r24, r28
     d9a:	05 96       	adiw	r24, 0x05	; 5
     d9c:	be 01       	movw	r22, r28
     d9e:	6f 5e       	subi	r22, 0xEF	; 239
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
     da6:	99 85       	ldd	r25, Y+9	; 0x09
     da8:	92 30       	cpi	r25, 0x02	; 2
     daa:	88 f0       	brcs	.+34     	; 0xdce <__mulsf3+0x60>
     dac:	89 89       	ldd	r24, Y+17	; 0x11
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	c8 f0       	brcs	.+50     	; 0xde4 <__mulsf3+0x76>
     db2:	94 30       	cpi	r25, 0x04	; 4
     db4:	19 f4       	brne	.+6      	; 0xdbc <__mulsf3+0x4e>
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	51 f4       	brne	.+20     	; 0xdce <__mulsf3+0x60>
     dba:	04 c0       	rjmp	.+8      	; 0xdc4 <__mulsf3+0x56>
     dbc:	84 30       	cpi	r24, 0x04	; 4
     dbe:	29 f4       	brne	.+10     	; 0xdca <__mulsf3+0x5c>
     dc0:	92 30       	cpi	r25, 0x02	; 2
     dc2:	81 f4       	brne	.+32     	; 0xde4 <__mulsf3+0x76>
     dc4:	87 e0       	ldi	r24, 0x07	; 7
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	c6 c0       	rjmp	.+396    	; 0xf56 <__mulsf3+0x1e8>
     dca:	92 30       	cpi	r25, 0x02	; 2
     dcc:	49 f4       	brne	.+18     	; 0xde0 <__mulsf3+0x72>
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd2:	8a 89       	ldd	r24, Y+18	; 0x12
     dd4:	98 13       	cpse	r25, r24
     dd6:	21 e0       	ldi	r18, 0x01	; 1
     dd8:	2a 87       	std	Y+10, r18	; 0x0a
     dda:	ce 01       	movw	r24, r28
     ddc:	09 96       	adiw	r24, 0x09	; 9
     dde:	bb c0       	rjmp	.+374    	; 0xf56 <__mulsf3+0x1e8>
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	49 f4       	brne	.+18     	; 0xdf6 <__mulsf3+0x88>
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	9a 85       	ldd	r25, Y+10	; 0x0a
     de8:	8a 89       	ldd	r24, Y+18	; 0x12
     dea:	98 13       	cpse	r25, r24
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	2a 8b       	std	Y+18, r18	; 0x12
     df0:	ce 01       	movw	r24, r28
     df2:	41 96       	adiw	r24, 0x11	; 17
     df4:	b0 c0       	rjmp	.+352    	; 0xf56 <__mulsf3+0x1e8>
     df6:	2d 84       	ldd	r2, Y+13	; 0x0d
     df8:	3e 84       	ldd	r3, Y+14	; 0x0e
     dfa:	4f 84       	ldd	r4, Y+15	; 0x0f
     dfc:	58 88       	ldd	r5, Y+16	; 0x10
     dfe:	6d 88       	ldd	r6, Y+21	; 0x15
     e00:	7e 88       	ldd	r7, Y+22	; 0x16
     e02:	8f 88       	ldd	r8, Y+23	; 0x17
     e04:	98 8c       	ldd	r9, Y+24	; 0x18
     e06:	ee 24       	eor	r14, r14
     e08:	ff 24       	eor	r15, r15
     e0a:	87 01       	movw	r16, r14
     e0c:	aa 24       	eor	r10, r10
     e0e:	bb 24       	eor	r11, r11
     e10:	65 01       	movw	r12, r10
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	e0 e0       	ldi	r30, 0x00	; 0
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	c1 01       	movw	r24, r2
     e20:	81 70       	andi	r24, 0x01	; 1
     e22:	90 70       	andi	r25, 0x00	; 0
     e24:	89 2b       	or	r24, r25
     e26:	e9 f0       	breq	.+58     	; 0xe62 <__mulsf3+0xf4>
     e28:	e6 0c       	add	r14, r6
     e2a:	f7 1c       	adc	r15, r7
     e2c:	08 1d       	adc	r16, r8
     e2e:	19 1d       	adc	r17, r9
     e30:	9a 01       	movw	r18, r20
     e32:	ab 01       	movw	r20, r22
     e34:	2a 0d       	add	r18, r10
     e36:	3b 1d       	adc	r19, r11
     e38:	4c 1d       	adc	r20, r12
     e3a:	5d 1d       	adc	r21, r13
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a0 e0       	ldi	r26, 0x00	; 0
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e6 14       	cp	r14, r6
     e46:	f7 04       	cpc	r15, r7
     e48:	08 05       	cpc	r16, r8
     e4a:	19 05       	cpc	r17, r9
     e4c:	20 f4       	brcc	.+8      	; 0xe56 <__mulsf3+0xe8>
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a0 e0       	ldi	r26, 0x00	; 0
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ba 01       	movw	r22, r20
     e58:	a9 01       	movw	r20, r18
     e5a:	48 0f       	add	r20, r24
     e5c:	59 1f       	adc	r21, r25
     e5e:	6a 1f       	adc	r22, r26
     e60:	7b 1f       	adc	r23, r27
     e62:	aa 0c       	add	r10, r10
     e64:	bb 1c       	adc	r11, r11
     e66:	cc 1c       	adc	r12, r12
     e68:	dd 1c       	adc	r13, r13
     e6a:	97 fe       	sbrs	r9, 7
     e6c:	08 c0       	rjmp	.+16     	; 0xe7e <__mulsf3+0x110>
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	a0 e0       	ldi	r26, 0x00	; 0
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	a8 2a       	or	r10, r24
     e78:	b9 2a       	or	r11, r25
     e7a:	ca 2a       	or	r12, r26
     e7c:	db 2a       	or	r13, r27
     e7e:	31 96       	adiw	r30, 0x01	; 1
     e80:	e0 32       	cpi	r30, 0x20	; 32
     e82:	f1 05       	cpc	r31, r1
     e84:	49 f0       	breq	.+18     	; 0xe98 <__mulsf3+0x12a>
     e86:	66 0c       	add	r6, r6
     e88:	77 1c       	adc	r7, r7
     e8a:	88 1c       	adc	r8, r8
     e8c:	99 1c       	adc	r9, r9
     e8e:	56 94       	lsr	r5
     e90:	47 94       	ror	r4
     e92:	37 94       	ror	r3
     e94:	27 94       	ror	r2
     e96:	c3 cf       	rjmp	.-122    	; 0xe1e <__mulsf3+0xb0>
     e98:	fa 85       	ldd	r31, Y+10	; 0x0a
     e9a:	ea 89       	ldd	r30, Y+18	; 0x12
     e9c:	2b 89       	ldd	r18, Y+19	; 0x13
     e9e:	3c 89       	ldd	r19, Y+20	; 0x14
     ea0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ea2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ea4:	28 0f       	add	r18, r24
     ea6:	39 1f       	adc	r19, r25
     ea8:	2e 5f       	subi	r18, 0xFE	; 254
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	17 c0       	rjmp	.+46     	; 0xedc <__mulsf3+0x16e>
     eae:	ca 01       	movw	r24, r20
     eb0:	81 70       	andi	r24, 0x01	; 1
     eb2:	90 70       	andi	r25, 0x00	; 0
     eb4:	89 2b       	or	r24, r25
     eb6:	61 f0       	breq	.+24     	; 0xed0 <__mulsf3+0x162>
     eb8:	16 95       	lsr	r17
     eba:	07 95       	ror	r16
     ebc:	f7 94       	ror	r15
     ebe:	e7 94       	ror	r14
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	a0 e0       	ldi	r26, 0x00	; 0
     ec6:	b0 e8       	ldi	r27, 0x80	; 128
     ec8:	e8 2a       	or	r14, r24
     eca:	f9 2a       	or	r15, r25
     ecc:	0a 2b       	or	r16, r26
     ece:	1b 2b       	or	r17, r27
     ed0:	76 95       	lsr	r23
     ed2:	67 95       	ror	r22
     ed4:	57 95       	ror	r21
     ed6:	47 95       	ror	r20
     ed8:	2f 5f       	subi	r18, 0xFF	; 255
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	77 fd       	sbrc	r23, 7
     ede:	e7 cf       	rjmp	.-50     	; 0xeae <__mulsf3+0x140>
     ee0:	0c c0       	rjmp	.+24     	; 0xefa <__mulsf3+0x18c>
     ee2:	44 0f       	add	r20, r20
     ee4:	55 1f       	adc	r21, r21
     ee6:	66 1f       	adc	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	17 fd       	sbrc	r17, 7
     eec:	41 60       	ori	r20, 0x01	; 1
     eee:	ee 0c       	add	r14, r14
     ef0:	ff 1c       	adc	r15, r15
     ef2:	00 1f       	adc	r16, r16
     ef4:	11 1f       	adc	r17, r17
     ef6:	21 50       	subi	r18, 0x01	; 1
     ef8:	30 40       	sbci	r19, 0x00	; 0
     efa:	40 30       	cpi	r20, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	59 07       	cpc	r21, r25
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	69 07       	cpc	r22, r25
     f04:	90 e4       	ldi	r25, 0x40	; 64
     f06:	79 07       	cpc	r23, r25
     f08:	60 f3       	brcs	.-40     	; 0xee2 <__mulsf3+0x174>
     f0a:	2b 8f       	std	Y+27, r18	; 0x1b
     f0c:	3c 8f       	std	Y+28, r19	; 0x1c
     f0e:	db 01       	movw	r26, r22
     f10:	ca 01       	movw	r24, r20
     f12:	8f 77       	andi	r24, 0x7F	; 127
     f14:	90 70       	andi	r25, 0x00	; 0
     f16:	a0 70       	andi	r26, 0x00	; 0
     f18:	b0 70       	andi	r27, 0x00	; 0
     f1a:	80 34       	cpi	r24, 0x40	; 64
     f1c:	91 05       	cpc	r25, r1
     f1e:	a1 05       	cpc	r26, r1
     f20:	b1 05       	cpc	r27, r1
     f22:	61 f4       	brne	.+24     	; 0xf3c <__mulsf3+0x1ce>
     f24:	47 fd       	sbrc	r20, 7
     f26:	0a c0       	rjmp	.+20     	; 0xf3c <__mulsf3+0x1ce>
     f28:	e1 14       	cp	r14, r1
     f2a:	f1 04       	cpc	r15, r1
     f2c:	01 05       	cpc	r16, r1
     f2e:	11 05       	cpc	r17, r1
     f30:	29 f0       	breq	.+10     	; 0xf3c <__mulsf3+0x1ce>
     f32:	40 5c       	subi	r20, 0xC0	; 192
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	6f 4f       	sbci	r22, 0xFF	; 255
     f38:	7f 4f       	sbci	r23, 0xFF	; 255
     f3a:	40 78       	andi	r20, 0x80	; 128
     f3c:	1a 8e       	std	Y+26, r1	; 0x1a
     f3e:	fe 17       	cp	r31, r30
     f40:	11 f0       	breq	.+4      	; 0xf46 <__mulsf3+0x1d8>
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	8a 8f       	std	Y+26, r24	; 0x1a
     f46:	4d 8f       	std	Y+29, r20	; 0x1d
     f48:	5e 8f       	std	Y+30, r21	; 0x1e
     f4a:	6f 8f       	std	Y+31, r22	; 0x1f
     f4c:	78 a3       	std	Y+32, r23	; 0x20
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	89 8f       	std	Y+25, r24	; 0x19
     f52:	ce 01       	movw	r24, r28
     f54:	49 96       	adiw	r24, 0x19	; 25
     f56:	0e 94 95 08 	call	0x112a	; 0x112a <__pack_f>
     f5a:	a0 96       	adiw	r28, 0x20	; 32
     f5c:	e2 e1       	ldi	r30, 0x12	; 18
     f5e:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__epilogue_restores__>

00000f62 <__gtsf2>:
     f62:	a8 e1       	ldi	r26, 0x18	; 24
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e7 eb       	ldi	r30, 0xB7	; 183
     f68:	f7 e0       	ldi	r31, 0x07	; 7
     f6a:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__prologue_saves__+0x18>
     f6e:	69 83       	std	Y+1, r22	; 0x01
     f70:	7a 83       	std	Y+2, r23	; 0x02
     f72:	8b 83       	std	Y+3, r24	; 0x03
     f74:	9c 83       	std	Y+4, r25	; 0x04
     f76:	2d 83       	std	Y+5, r18	; 0x05
     f78:	3e 83       	std	Y+6, r19	; 0x06
     f7a:	4f 83       	std	Y+7, r20	; 0x07
     f7c:	58 87       	std	Y+8, r21	; 0x08
     f7e:	89 e0       	ldi	r24, 0x09	; 9
     f80:	e8 2e       	mov	r14, r24
     f82:	f1 2c       	mov	r15, r1
     f84:	ec 0e       	add	r14, r28
     f86:	fd 1e       	adc	r15, r29
     f88:	ce 01       	movw	r24, r28
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	b7 01       	movw	r22, r14
     f8e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
     f92:	8e 01       	movw	r16, r28
     f94:	0f 5e       	subi	r16, 0xEF	; 239
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	ce 01       	movw	r24, r28
     f9a:	05 96       	adiw	r24, 0x05	; 5
     f9c:	b8 01       	movw	r22, r16
     f9e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
     fa2:	89 85       	ldd	r24, Y+9	; 0x09
     fa4:	82 30       	cpi	r24, 0x02	; 2
     fa6:	40 f0       	brcs	.+16     	; 0xfb8 <__gtsf2+0x56>
     fa8:	89 89       	ldd	r24, Y+17	; 0x11
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	28 f0       	brcs	.+10     	; 0xfb8 <__gtsf2+0x56>
     fae:	c7 01       	movw	r24, r14
     fb0:	b8 01       	movw	r22, r16
     fb2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fpcmp_parts_f>
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <__gtsf2+0x58>
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
     fba:	68 96       	adiw	r28, 0x18	; 24
     fbc:	e6 e0       	ldi	r30, 0x06	; 6
     fbe:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__epilogue_restores__+0x18>

00000fc2 <__gesf2>:
     fc2:	a8 e1       	ldi	r26, 0x18	; 24
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e7 ee       	ldi	r30, 0xE7	; 231
     fc8:	f7 e0       	ldi	r31, 0x07	; 7
     fca:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__prologue_saves__+0x18>
     fce:	69 83       	std	Y+1, r22	; 0x01
     fd0:	7a 83       	std	Y+2, r23	; 0x02
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	9c 83       	std	Y+4, r25	; 0x04
     fd6:	2d 83       	std	Y+5, r18	; 0x05
     fd8:	3e 83       	std	Y+6, r19	; 0x06
     fda:	4f 83       	std	Y+7, r20	; 0x07
     fdc:	58 87       	std	Y+8, r21	; 0x08
     fde:	89 e0       	ldi	r24, 0x09	; 9
     fe0:	e8 2e       	mov	r14, r24
     fe2:	f1 2c       	mov	r15, r1
     fe4:	ec 0e       	add	r14, r28
     fe6:	fd 1e       	adc	r15, r29
     fe8:	ce 01       	movw	r24, r28
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	b7 01       	movw	r22, r14
     fee:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
     ff2:	8e 01       	movw	r16, r28
     ff4:	0f 5e       	subi	r16, 0xEF	; 239
     ff6:	1f 4f       	sbci	r17, 0xFF	; 255
     ff8:	ce 01       	movw	r24, r28
     ffa:	05 96       	adiw	r24, 0x05	; 5
     ffc:	b8 01       	movw	r22, r16
     ffe:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	40 f0       	brcs	.+16     	; 0x1018 <__gesf2+0x56>
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	28 f0       	brcs	.+10     	; 0x1018 <__gesf2+0x56>
    100e:	c7 01       	movw	r24, r14
    1010:	b8 01       	movw	r22, r16
    1012:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fpcmp_parts_f>
    1016:	01 c0       	rjmp	.+2      	; 0x101a <__gesf2+0x58>
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	68 96       	adiw	r28, 0x18	; 24
    101c:	e6 e0       	ldi	r30, 0x06	; 6
    101e:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__epilogue_restores__+0x18>

00001022 <__ltsf2>:
    1022:	a8 e1       	ldi	r26, 0x18	; 24
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e7 e1       	ldi	r30, 0x17	; 23
    1028:	f8 e0       	ldi	r31, 0x08	; 8
    102a:	0c 94 47 0a 	jmp	0x148e	; 0x148e <__prologue_saves__+0x18>
    102e:	69 83       	std	Y+1, r22	; 0x01
    1030:	7a 83       	std	Y+2, r23	; 0x02
    1032:	8b 83       	std	Y+3, r24	; 0x03
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	2d 83       	std	Y+5, r18	; 0x05
    1038:	3e 83       	std	Y+6, r19	; 0x06
    103a:	4f 83       	std	Y+7, r20	; 0x07
    103c:	58 87       	std	Y+8, r21	; 0x08
    103e:	89 e0       	ldi	r24, 0x09	; 9
    1040:	e8 2e       	mov	r14, r24
    1042:	f1 2c       	mov	r15, r1
    1044:	ec 0e       	add	r14, r28
    1046:	fd 1e       	adc	r15, r29
    1048:	ce 01       	movw	r24, r28
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	b7 01       	movw	r22, r14
    104e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
    1052:	8e 01       	movw	r16, r28
    1054:	0f 5e       	subi	r16, 0xEF	; 239
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
    1058:	ce 01       	movw	r24, r28
    105a:	05 96       	adiw	r24, 0x05	; 5
    105c:	b8 01       	movw	r22, r16
    105e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
    1062:	89 85       	ldd	r24, Y+9	; 0x09
    1064:	82 30       	cpi	r24, 0x02	; 2
    1066:	40 f0       	brcs	.+16     	; 0x1078 <__ltsf2+0x56>
    1068:	89 89       	ldd	r24, Y+17	; 0x11
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	28 f0       	brcs	.+10     	; 0x1078 <__ltsf2+0x56>
    106e:	c7 01       	movw	r24, r14
    1070:	b8 01       	movw	r22, r16
    1072:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__fpcmp_parts_f>
    1076:	01 c0       	rjmp	.+2      	; 0x107a <__ltsf2+0x58>
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	68 96       	adiw	r28, 0x18	; 24
    107c:	e6 e0       	ldi	r30, 0x06	; 6
    107e:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__epilogue_restores__+0x18>

00001082 <__fixsfsi>:
    1082:	ac e0       	ldi	r26, 0x0C	; 12
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e7 e4       	ldi	r30, 0x47	; 71
    1088:	f8 e0       	ldi	r31, 0x08	; 8
    108a:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__prologue_saves__+0x20>
    108e:	69 83       	std	Y+1, r22	; 0x01
    1090:	7a 83       	std	Y+2, r23	; 0x02
    1092:	8b 83       	std	Y+3, r24	; 0x03
    1094:	9c 83       	std	Y+4, r25	; 0x04
    1096:	ce 01       	movw	r24, r28
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	be 01       	movw	r22, r28
    109c:	6b 5f       	subi	r22, 0xFB	; 251
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__unpack_f>
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	61 f1       	breq	.+88     	; 0x1102 <__fixsfsi+0x80>
    10aa:	82 30       	cpi	r24, 0x02	; 2
    10ac:	50 f1       	brcs	.+84     	; 0x1102 <__fixsfsi+0x80>
    10ae:	84 30       	cpi	r24, 0x04	; 4
    10b0:	21 f4       	brne	.+8      	; 0x10ba <__fixsfsi+0x38>
    10b2:	8e 81       	ldd	r24, Y+6	; 0x06
    10b4:	88 23       	and	r24, r24
    10b6:	51 f1       	breq	.+84     	; 0x110c <__fixsfsi+0x8a>
    10b8:	2e c0       	rjmp	.+92     	; 0x1116 <__fixsfsi+0x94>
    10ba:	2f 81       	ldd	r18, Y+7	; 0x07
    10bc:	38 85       	ldd	r19, Y+8	; 0x08
    10be:	37 fd       	sbrc	r19, 7
    10c0:	20 c0       	rjmp	.+64     	; 0x1102 <__fixsfsi+0x80>
    10c2:	6e 81       	ldd	r22, Y+6	; 0x06
    10c4:	2f 31       	cpi	r18, 0x1F	; 31
    10c6:	31 05       	cpc	r19, r1
    10c8:	1c f0       	brlt	.+6      	; 0x10d0 <__fixsfsi+0x4e>
    10ca:	66 23       	and	r22, r22
    10cc:	f9 f0       	breq	.+62     	; 0x110c <__fixsfsi+0x8a>
    10ce:	23 c0       	rjmp	.+70     	; 0x1116 <__fixsfsi+0x94>
    10d0:	8e e1       	ldi	r24, 0x1E	; 30
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	82 1b       	sub	r24, r18
    10d6:	93 0b       	sbc	r25, r19
    10d8:	29 85       	ldd	r18, Y+9	; 0x09
    10da:	3a 85       	ldd	r19, Y+10	; 0x0a
    10dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    10de:	5c 85       	ldd	r21, Y+12	; 0x0c
    10e0:	04 c0       	rjmp	.+8      	; 0x10ea <__fixsfsi+0x68>
    10e2:	56 95       	lsr	r21
    10e4:	47 95       	ror	r20
    10e6:	37 95       	ror	r19
    10e8:	27 95       	ror	r18
    10ea:	8a 95       	dec	r24
    10ec:	d2 f7       	brpl	.-12     	; 0x10e2 <__fixsfsi+0x60>
    10ee:	66 23       	and	r22, r22
    10f0:	b1 f0       	breq	.+44     	; 0x111e <__fixsfsi+0x9c>
    10f2:	50 95       	com	r21
    10f4:	40 95       	com	r20
    10f6:	30 95       	com	r19
    10f8:	21 95       	neg	r18
    10fa:	3f 4f       	sbci	r19, 0xFF	; 255
    10fc:	4f 4f       	sbci	r20, 0xFF	; 255
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	0e c0       	rjmp	.+28     	; 0x111e <__fixsfsi+0x9c>
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	09 c0       	rjmp	.+18     	; 0x111e <__fixsfsi+0x9c>
    110c:	2f ef       	ldi	r18, 0xFF	; 255
    110e:	3f ef       	ldi	r19, 0xFF	; 255
    1110:	4f ef       	ldi	r20, 0xFF	; 255
    1112:	5f e7       	ldi	r21, 0x7F	; 127
    1114:	04 c0       	rjmp	.+8      	; 0x111e <__fixsfsi+0x9c>
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	50 e8       	ldi	r21, 0x80	; 128
    111e:	b9 01       	movw	r22, r18
    1120:	ca 01       	movw	r24, r20
    1122:	2c 96       	adiw	r28, 0x0c	; 12
    1124:	e2 e0       	ldi	r30, 0x02	; 2
    1126:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__epilogue_restores__+0x20>

0000112a <__pack_f>:
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	fc 01       	movw	r30, r24
    1136:	e4 80       	ldd	r14, Z+4	; 0x04
    1138:	f5 80       	ldd	r15, Z+5	; 0x05
    113a:	06 81       	ldd	r16, Z+6	; 0x06
    113c:	17 81       	ldd	r17, Z+7	; 0x07
    113e:	d1 80       	ldd	r13, Z+1	; 0x01
    1140:	80 81       	ld	r24, Z
    1142:	82 30       	cpi	r24, 0x02	; 2
    1144:	48 f4       	brcc	.+18     	; 0x1158 <__pack_f+0x2e>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a0 e1       	ldi	r26, 0x10	; 16
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e8 2a       	or	r14, r24
    1150:	f9 2a       	or	r15, r25
    1152:	0a 2b       	or	r16, r26
    1154:	1b 2b       	or	r17, r27
    1156:	a5 c0       	rjmp	.+330    	; 0x12a2 <__pack_f+0x178>
    1158:	84 30       	cpi	r24, 0x04	; 4
    115a:	09 f4       	brne	.+2      	; 0x115e <__pack_f+0x34>
    115c:	9f c0       	rjmp	.+318    	; 0x129c <__pack_f+0x172>
    115e:	82 30       	cpi	r24, 0x02	; 2
    1160:	21 f4       	brne	.+8      	; 0x116a <__pack_f+0x40>
    1162:	ee 24       	eor	r14, r14
    1164:	ff 24       	eor	r15, r15
    1166:	87 01       	movw	r16, r14
    1168:	05 c0       	rjmp	.+10     	; 0x1174 <__pack_f+0x4a>
    116a:	e1 14       	cp	r14, r1
    116c:	f1 04       	cpc	r15, r1
    116e:	01 05       	cpc	r16, r1
    1170:	11 05       	cpc	r17, r1
    1172:	19 f4       	brne	.+6      	; 0x117a <__pack_f+0x50>
    1174:	e0 e0       	ldi	r30, 0x00	; 0
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	96 c0       	rjmp	.+300    	; 0x12a6 <__pack_f+0x17c>
    117a:	62 81       	ldd	r22, Z+2	; 0x02
    117c:	73 81       	ldd	r23, Z+3	; 0x03
    117e:	9f ef       	ldi	r25, 0xFF	; 255
    1180:	62 38       	cpi	r22, 0x82	; 130
    1182:	79 07       	cpc	r23, r25
    1184:	0c f0       	brlt	.+2      	; 0x1188 <__pack_f+0x5e>
    1186:	5b c0       	rjmp	.+182    	; 0x123e <__pack_f+0x114>
    1188:	22 e8       	ldi	r18, 0x82	; 130
    118a:	3f ef       	ldi	r19, 0xFF	; 255
    118c:	26 1b       	sub	r18, r22
    118e:	37 0b       	sbc	r19, r23
    1190:	2a 31       	cpi	r18, 0x1A	; 26
    1192:	31 05       	cpc	r19, r1
    1194:	2c f0       	brlt	.+10     	; 0x11a0 <__pack_f+0x76>
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	2a c0       	rjmp	.+84     	; 0x11f4 <__pack_f+0xca>
    11a0:	b8 01       	movw	r22, r16
    11a2:	a7 01       	movw	r20, r14
    11a4:	02 2e       	mov	r0, r18
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <__pack_f+0x86>
    11a8:	76 95       	lsr	r23
    11aa:	67 95       	ror	r22
    11ac:	57 95       	ror	r21
    11ae:	47 95       	ror	r20
    11b0:	0a 94       	dec	r0
    11b2:	d2 f7       	brpl	.-12     	; 0x11a8 <__pack_f+0x7e>
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a0 e0       	ldi	r26, 0x00	; 0
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <__pack_f+0x9c>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	aa 1f       	adc	r26, r26
    11c4:	bb 1f       	adc	r27, r27
    11c6:	2a 95       	dec	r18
    11c8:	d2 f7       	brpl	.-12     	; 0x11be <__pack_f+0x94>
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	a1 09       	sbc	r26, r1
    11ce:	b1 09       	sbc	r27, r1
    11d0:	8e 21       	and	r24, r14
    11d2:	9f 21       	and	r25, r15
    11d4:	a0 23       	and	r26, r16
    11d6:	b1 23       	and	r27, r17
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	a1 05       	cpc	r26, r1
    11dc:	b1 05       	cpc	r27, r1
    11de:	21 f0       	breq	.+8      	; 0x11e8 <__pack_f+0xbe>
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	a0 e0       	ldi	r26, 0x00	; 0
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	9a 01       	movw	r18, r20
    11ea:	ab 01       	movw	r20, r22
    11ec:	28 2b       	or	r18, r24
    11ee:	39 2b       	or	r19, r25
    11f0:	4a 2b       	or	r20, r26
    11f2:	5b 2b       	or	r21, r27
    11f4:	da 01       	movw	r26, r20
    11f6:	c9 01       	movw	r24, r18
    11f8:	8f 77       	andi	r24, 0x7F	; 127
    11fa:	90 70       	andi	r25, 0x00	; 0
    11fc:	a0 70       	andi	r26, 0x00	; 0
    11fe:	b0 70       	andi	r27, 0x00	; 0
    1200:	80 34       	cpi	r24, 0x40	; 64
    1202:	91 05       	cpc	r25, r1
    1204:	a1 05       	cpc	r26, r1
    1206:	b1 05       	cpc	r27, r1
    1208:	39 f4       	brne	.+14     	; 0x1218 <__pack_f+0xee>
    120a:	27 ff       	sbrs	r18, 7
    120c:	09 c0       	rjmp	.+18     	; 0x1220 <__pack_f+0xf6>
    120e:	20 5c       	subi	r18, 0xC0	; 192
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
    1212:	4f 4f       	sbci	r20, 0xFF	; 255
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__pack_f+0xf6>
    1218:	21 5c       	subi	r18, 0xC1	; 193
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    121c:	4f 4f       	sbci	r20, 0xFF	; 255
    121e:	5f 4f       	sbci	r21, 0xFF	; 255
    1220:	e0 e0       	ldi	r30, 0x00	; 0
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	20 30       	cpi	r18, 0x00	; 0
    1226:	a0 e0       	ldi	r26, 0x00	; 0
    1228:	3a 07       	cpc	r19, r26
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	4a 07       	cpc	r20, r26
    122e:	a0 e4       	ldi	r26, 0x40	; 64
    1230:	5a 07       	cpc	r21, r26
    1232:	10 f0       	brcs	.+4      	; 0x1238 <__pack_f+0x10e>
    1234:	e1 e0       	ldi	r30, 0x01	; 1
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	79 01       	movw	r14, r18
    123a:	8a 01       	movw	r16, r20
    123c:	27 c0       	rjmp	.+78     	; 0x128c <__pack_f+0x162>
    123e:	60 38       	cpi	r22, 0x80	; 128
    1240:	71 05       	cpc	r23, r1
    1242:	64 f5       	brge	.+88     	; 0x129c <__pack_f+0x172>
    1244:	fb 01       	movw	r30, r22
    1246:	e1 58       	subi	r30, 0x81	; 129
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	d8 01       	movw	r26, r16
    124c:	c7 01       	movw	r24, r14
    124e:	8f 77       	andi	r24, 0x7F	; 127
    1250:	90 70       	andi	r25, 0x00	; 0
    1252:	a0 70       	andi	r26, 0x00	; 0
    1254:	b0 70       	andi	r27, 0x00	; 0
    1256:	80 34       	cpi	r24, 0x40	; 64
    1258:	91 05       	cpc	r25, r1
    125a:	a1 05       	cpc	r26, r1
    125c:	b1 05       	cpc	r27, r1
    125e:	39 f4       	brne	.+14     	; 0x126e <__pack_f+0x144>
    1260:	e7 fe       	sbrs	r14, 7
    1262:	0d c0       	rjmp	.+26     	; 0x127e <__pack_f+0x154>
    1264:	80 e4       	ldi	r24, 0x40	; 64
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <__pack_f+0x14c>
    126e:	8f e3       	ldi	r24, 0x3F	; 63
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	a0 e0       	ldi	r26, 0x00	; 0
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e8 0e       	add	r14, r24
    1278:	f9 1e       	adc	r15, r25
    127a:	0a 1f       	adc	r16, r26
    127c:	1b 1f       	adc	r17, r27
    127e:	17 ff       	sbrs	r17, 7
    1280:	05 c0       	rjmp	.+10     	; 0x128c <__pack_f+0x162>
    1282:	16 95       	lsr	r17
    1284:	07 95       	ror	r16
    1286:	f7 94       	ror	r15
    1288:	e7 94       	ror	r14
    128a:	31 96       	adiw	r30, 0x01	; 1
    128c:	87 e0       	ldi	r24, 0x07	; 7
    128e:	16 95       	lsr	r17
    1290:	07 95       	ror	r16
    1292:	f7 94       	ror	r15
    1294:	e7 94       	ror	r14
    1296:	8a 95       	dec	r24
    1298:	d1 f7       	brne	.-12     	; 0x128e <__pack_f+0x164>
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <__pack_f+0x17c>
    129c:	ee 24       	eor	r14, r14
    129e:	ff 24       	eor	r15, r15
    12a0:	87 01       	movw	r16, r14
    12a2:	ef ef       	ldi	r30, 0xFF	; 255
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	6e 2f       	mov	r22, r30
    12a8:	67 95       	ror	r22
    12aa:	66 27       	eor	r22, r22
    12ac:	67 95       	ror	r22
    12ae:	90 2f       	mov	r25, r16
    12b0:	9f 77       	andi	r25, 0x7F	; 127
    12b2:	d7 94       	ror	r13
    12b4:	dd 24       	eor	r13, r13
    12b6:	d7 94       	ror	r13
    12b8:	8e 2f       	mov	r24, r30
    12ba:	86 95       	lsr	r24
    12bc:	49 2f       	mov	r20, r25
    12be:	46 2b       	or	r20, r22
    12c0:	58 2f       	mov	r21, r24
    12c2:	5d 29       	or	r21, r13
    12c4:	b7 01       	movw	r22, r14
    12c6:	ca 01       	movw	r24, r20
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	df 90       	pop	r13
    12d2:	08 95       	ret

000012d4 <__unpack_f>:
    12d4:	fc 01       	movw	r30, r24
    12d6:	db 01       	movw	r26, r22
    12d8:	40 81       	ld	r20, Z
    12da:	51 81       	ldd	r21, Z+1	; 0x01
    12dc:	22 81       	ldd	r18, Z+2	; 0x02
    12de:	62 2f       	mov	r22, r18
    12e0:	6f 77       	andi	r22, 0x7F	; 127
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	22 1f       	adc	r18, r18
    12e6:	22 27       	eor	r18, r18
    12e8:	22 1f       	adc	r18, r18
    12ea:	93 81       	ldd	r25, Z+3	; 0x03
    12ec:	89 2f       	mov	r24, r25
    12ee:	88 0f       	add	r24, r24
    12f0:	82 2b       	or	r24, r18
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	99 1f       	adc	r25, r25
    12f8:	99 27       	eor	r25, r25
    12fa:	99 1f       	adc	r25, r25
    12fc:	11 96       	adiw	r26, 0x01	; 1
    12fe:	9c 93       	st	X, r25
    1300:	11 97       	sbiw	r26, 0x01	; 1
    1302:	21 15       	cp	r18, r1
    1304:	31 05       	cpc	r19, r1
    1306:	a9 f5       	brne	.+106    	; 0x1372 <__unpack_f+0x9e>
    1308:	41 15       	cp	r20, r1
    130a:	51 05       	cpc	r21, r1
    130c:	61 05       	cpc	r22, r1
    130e:	71 05       	cpc	r23, r1
    1310:	11 f4       	brne	.+4      	; 0x1316 <__unpack_f+0x42>
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	37 c0       	rjmp	.+110    	; 0x1384 <__unpack_f+0xb0>
    1316:	82 e8       	ldi	r24, 0x82	; 130
    1318:	9f ef       	ldi	r25, 0xFF	; 255
    131a:	13 96       	adiw	r26, 0x03	; 3
    131c:	9c 93       	st	X, r25
    131e:	8e 93       	st	-X, r24
    1320:	12 97       	sbiw	r26, 0x02	; 2
    1322:	9a 01       	movw	r18, r20
    1324:	ab 01       	movw	r20, r22
    1326:	67 e0       	ldi	r22, 0x07	; 7
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	44 1f       	adc	r20, r20
    132e:	55 1f       	adc	r21, r21
    1330:	6a 95       	dec	r22
    1332:	d1 f7       	brne	.-12     	; 0x1328 <__unpack_f+0x54>
    1334:	83 e0       	ldi	r24, 0x03	; 3
    1336:	8c 93       	st	X, r24
    1338:	0d c0       	rjmp	.+26     	; 0x1354 <__unpack_f+0x80>
    133a:	22 0f       	add	r18, r18
    133c:	33 1f       	adc	r19, r19
    133e:	44 1f       	adc	r20, r20
    1340:	55 1f       	adc	r21, r21
    1342:	12 96       	adiw	r26, 0x02	; 2
    1344:	8d 91       	ld	r24, X+
    1346:	9c 91       	ld	r25, X
    1348:	13 97       	sbiw	r26, 0x03	; 3
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	13 96       	adiw	r26, 0x03	; 3
    134e:	9c 93       	st	X, r25
    1350:	8e 93       	st	-X, r24
    1352:	12 97       	sbiw	r26, 0x02	; 2
    1354:	20 30       	cpi	r18, 0x00	; 0
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	38 07       	cpc	r19, r24
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	48 07       	cpc	r20, r24
    135e:	80 e4       	ldi	r24, 0x40	; 64
    1360:	58 07       	cpc	r21, r24
    1362:	58 f3       	brcs	.-42     	; 0x133a <__unpack_f+0x66>
    1364:	14 96       	adiw	r26, 0x04	; 4
    1366:	2d 93       	st	X+, r18
    1368:	3d 93       	st	X+, r19
    136a:	4d 93       	st	X+, r20
    136c:	5c 93       	st	X, r21
    136e:	17 97       	sbiw	r26, 0x07	; 7
    1370:	08 95       	ret
    1372:	2f 3f       	cpi	r18, 0xFF	; 255
    1374:	31 05       	cpc	r19, r1
    1376:	79 f4       	brne	.+30     	; 0x1396 <__unpack_f+0xc2>
    1378:	41 15       	cp	r20, r1
    137a:	51 05       	cpc	r21, r1
    137c:	61 05       	cpc	r22, r1
    137e:	71 05       	cpc	r23, r1
    1380:	19 f4       	brne	.+6      	; 0x1388 <__unpack_f+0xb4>
    1382:	84 e0       	ldi	r24, 0x04	; 4
    1384:	8c 93       	st	X, r24
    1386:	08 95       	ret
    1388:	64 ff       	sbrs	r22, 4
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <__unpack_f+0xbe>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	8c 93       	st	X, r24
    1390:	12 c0       	rjmp	.+36     	; 0x13b6 <__unpack_f+0xe2>
    1392:	1c 92       	st	X, r1
    1394:	10 c0       	rjmp	.+32     	; 0x13b6 <__unpack_f+0xe2>
    1396:	2f 57       	subi	r18, 0x7F	; 127
    1398:	30 40       	sbci	r19, 0x00	; 0
    139a:	13 96       	adiw	r26, 0x03	; 3
    139c:	3c 93       	st	X, r19
    139e:	2e 93       	st	-X, r18
    13a0:	12 97       	sbiw	r26, 0x02	; 2
    13a2:	83 e0       	ldi	r24, 0x03	; 3
    13a4:	8c 93       	st	X, r24
    13a6:	87 e0       	ldi	r24, 0x07	; 7
    13a8:	44 0f       	add	r20, r20
    13aa:	55 1f       	adc	r21, r21
    13ac:	66 1f       	adc	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	8a 95       	dec	r24
    13b2:	d1 f7       	brne	.-12     	; 0x13a8 <__unpack_f+0xd4>
    13b4:	70 64       	ori	r23, 0x40	; 64
    13b6:	14 96       	adiw	r26, 0x04	; 4
    13b8:	4d 93       	st	X+, r20
    13ba:	5d 93       	st	X+, r21
    13bc:	6d 93       	st	X+, r22
    13be:	7c 93       	st	X, r23
    13c0:	17 97       	sbiw	r26, 0x07	; 7
    13c2:	08 95       	ret

000013c4 <__fpcmp_parts_f>:
    13c4:	1f 93       	push	r17
    13c6:	dc 01       	movw	r26, r24
    13c8:	fb 01       	movw	r30, r22
    13ca:	9c 91       	ld	r25, X
    13cc:	92 30       	cpi	r25, 0x02	; 2
    13ce:	08 f4       	brcc	.+2      	; 0x13d2 <__fpcmp_parts_f+0xe>
    13d0:	47 c0       	rjmp	.+142    	; 0x1460 <__fpcmp_parts_f+0x9c>
    13d2:	80 81       	ld	r24, Z
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	08 f4       	brcc	.+2      	; 0x13da <__fpcmp_parts_f+0x16>
    13d8:	43 c0       	rjmp	.+134    	; 0x1460 <__fpcmp_parts_f+0x9c>
    13da:	94 30       	cpi	r25, 0x04	; 4
    13dc:	51 f4       	brne	.+20     	; 0x13f2 <__fpcmp_parts_f+0x2e>
    13de:	11 96       	adiw	r26, 0x01	; 1
    13e0:	1c 91       	ld	r17, X
    13e2:	84 30       	cpi	r24, 0x04	; 4
    13e4:	99 f5       	brne	.+102    	; 0x144c <__fpcmp_parts_f+0x88>
    13e6:	81 81       	ldd	r24, Z+1	; 0x01
    13e8:	68 2f       	mov	r22, r24
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	61 1b       	sub	r22, r17
    13ee:	71 09       	sbc	r23, r1
    13f0:	3f c0       	rjmp	.+126    	; 0x1470 <__fpcmp_parts_f+0xac>
    13f2:	84 30       	cpi	r24, 0x04	; 4
    13f4:	21 f0       	breq	.+8      	; 0x13fe <__fpcmp_parts_f+0x3a>
    13f6:	92 30       	cpi	r25, 0x02	; 2
    13f8:	31 f4       	brne	.+12     	; 0x1406 <__fpcmp_parts_f+0x42>
    13fa:	82 30       	cpi	r24, 0x02	; 2
    13fc:	b9 f1       	breq	.+110    	; 0x146c <__fpcmp_parts_f+0xa8>
    13fe:	81 81       	ldd	r24, Z+1	; 0x01
    1400:	88 23       	and	r24, r24
    1402:	89 f1       	breq	.+98     	; 0x1466 <__fpcmp_parts_f+0xa2>
    1404:	2d c0       	rjmp	.+90     	; 0x1460 <__fpcmp_parts_f+0x9c>
    1406:	11 96       	adiw	r26, 0x01	; 1
    1408:	1c 91       	ld	r17, X
    140a:	11 97       	sbiw	r26, 0x01	; 1
    140c:	82 30       	cpi	r24, 0x02	; 2
    140e:	f1 f0       	breq	.+60     	; 0x144c <__fpcmp_parts_f+0x88>
    1410:	81 81       	ldd	r24, Z+1	; 0x01
    1412:	18 17       	cp	r17, r24
    1414:	d9 f4       	brne	.+54     	; 0x144c <__fpcmp_parts_f+0x88>
    1416:	12 96       	adiw	r26, 0x02	; 2
    1418:	2d 91       	ld	r18, X+
    141a:	3c 91       	ld	r19, X
    141c:	13 97       	sbiw	r26, 0x03	; 3
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	93 81       	ldd	r25, Z+3	; 0x03
    1422:	82 17       	cp	r24, r18
    1424:	93 07       	cpc	r25, r19
    1426:	94 f0       	brlt	.+36     	; 0x144c <__fpcmp_parts_f+0x88>
    1428:	28 17       	cp	r18, r24
    142a:	39 07       	cpc	r19, r25
    142c:	bc f0       	brlt	.+46     	; 0x145c <__fpcmp_parts_f+0x98>
    142e:	14 96       	adiw	r26, 0x04	; 4
    1430:	8d 91       	ld	r24, X+
    1432:	9d 91       	ld	r25, X+
    1434:	0d 90       	ld	r0, X+
    1436:	bc 91       	ld	r27, X
    1438:	a0 2d       	mov	r26, r0
    143a:	24 81       	ldd	r18, Z+4	; 0x04
    143c:	35 81       	ldd	r19, Z+5	; 0x05
    143e:	46 81       	ldd	r20, Z+6	; 0x06
    1440:	57 81       	ldd	r21, Z+7	; 0x07
    1442:	28 17       	cp	r18, r24
    1444:	39 07       	cpc	r19, r25
    1446:	4a 07       	cpc	r20, r26
    1448:	5b 07       	cpc	r21, r27
    144a:	18 f4       	brcc	.+6      	; 0x1452 <__fpcmp_parts_f+0x8e>
    144c:	11 23       	and	r17, r17
    144e:	41 f0       	breq	.+16     	; 0x1460 <__fpcmp_parts_f+0x9c>
    1450:	0a c0       	rjmp	.+20     	; 0x1466 <__fpcmp_parts_f+0xa2>
    1452:	82 17       	cp	r24, r18
    1454:	93 07       	cpc	r25, r19
    1456:	a4 07       	cpc	r26, r20
    1458:	b5 07       	cpc	r27, r21
    145a:	40 f4       	brcc	.+16     	; 0x146c <__fpcmp_parts_f+0xa8>
    145c:	11 23       	and	r17, r17
    145e:	19 f0       	breq	.+6      	; 0x1466 <__fpcmp_parts_f+0xa2>
    1460:	61 e0       	ldi	r22, 0x01	; 1
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	05 c0       	rjmp	.+10     	; 0x1470 <__fpcmp_parts_f+0xac>
    1466:	6f ef       	ldi	r22, 0xFF	; 255
    1468:	7f ef       	ldi	r23, 0xFF	; 255
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <__fpcmp_parts_f+0xac>
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	cb 01       	movw	r24, r22
    1472:	1f 91       	pop	r17
    1474:	08 95       	ret

00001476 <__prologue_saves__>:
    1476:	2f 92       	push	r2
    1478:	3f 92       	push	r3
    147a:	4f 92       	push	r4
    147c:	5f 92       	push	r5
    147e:	6f 92       	push	r6
    1480:	7f 92       	push	r7
    1482:	8f 92       	push	r8
    1484:	9f 92       	push	r9
    1486:	af 92       	push	r10
    1488:	bf 92       	push	r11
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	ca 1b       	sub	r28, r26
    14a0:	db 0b       	sbc	r29, r27
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	09 94       	ijmp

000014ae <__epilogue_restores__>:
    14ae:	2a 88       	ldd	r2, Y+18	; 0x12
    14b0:	39 88       	ldd	r3, Y+17	; 0x11
    14b2:	48 88       	ldd	r4, Y+16	; 0x10
    14b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    14b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    14b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    14ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    14bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    14be:	aa 84       	ldd	r10, Y+10	; 0x0a
    14c0:	b9 84       	ldd	r11, Y+9	; 0x09
    14c2:	c8 84       	ldd	r12, Y+8	; 0x08
    14c4:	df 80       	ldd	r13, Y+7	; 0x07
    14c6:	ee 80       	ldd	r14, Y+6	; 0x06
    14c8:	fd 80       	ldd	r15, Y+5	; 0x05
    14ca:	0c 81       	ldd	r16, Y+4	; 0x04
    14cc:	1b 81       	ldd	r17, Y+3	; 0x03
    14ce:	aa 81       	ldd	r26, Y+2	; 0x02
    14d0:	b9 81       	ldd	r27, Y+1	; 0x01
    14d2:	ce 0f       	add	r28, r30
    14d4:	d1 1d       	adc	r29, r1
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	ed 01       	movw	r28, r26
    14e2:	08 95       	ret

000014e4 <_exit>:
    14e4:	f8 94       	cli

000014e6 <__stop_program>:
    14e6:	ff cf       	rjmp	.-2      	; 0x14e6 <__stop_program>
