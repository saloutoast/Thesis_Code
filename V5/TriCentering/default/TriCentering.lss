
TriCentering.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000013e2  00001476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800110  00800110  00001486  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00001486  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001d3  00000000  00000000  000015e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000224a  00000000  00000000  000017b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000106c  00000000  00000000  00003a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001534  00000000  00000000  00004a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00005fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000468  00000000  00000000  00006174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000099a  00000000  00000000  000065dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00006f76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_23>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ee       	ldi	r30, 0xE2	; 226
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 32       	cpi	r26, 0x28	; 40
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 06 02 	call	0x40c	; 0x40c <main>
      9e:	0c 94 ef 09 	jmp	0x13de	; 0x13de <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_23>:

	}

}

ISR(ANALOG_COMP_vect) { // essentially the receive_msg() routine
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	8f 93       	push	r24
      b6:	9f 93       	push	r25

	if (rcving==0) {
      b8:	80 91 16 01 	lds	r24, 0x0116
      bc:	88 23       	and	r24, r24
      be:	89 f4       	brne	.+34     	; 0xe2 <__vector_23+0x3c>

		TCNT2=0;
      c0:	10 92 b2 00 	sts	0x00B2, r1
		rcving=1;
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	80 93 16 01 	sts	0x0116, r24
		rcvd=0x80;
      ca:	80 e8       	ldi	r24, 0x80	; 128
      cc:	80 93 17 01 	sts	0x0117, r24
		ACSR &= ~(1<<ACIS0); // change to falling edge
      d0:	80 b7       	in	r24, 0x30	; 48
      d2:	8e 7f       	andi	r24, 0xFE	; 254
      d4:	80 bf       	out	0x30, r24	; 48
		rcv_sx = 0; // reset success flag
      d6:	10 92 19 01 	sts	0x0119, r1
      da:	10 92 18 01 	sts	0x0118, r1

		//PORTB |= (1<<PORTB0); // clear success LEDs from previous message
		PORTB &= ~(1<<PORTB1);
      de:	29 98       	cbi	0x05, 1	; 5
      e0:	9c c0       	rjmp	.+312    	; 0x21a <__vector_23+0x174>
		//PORTB &= ~(1<<PORTB2);

	} else { // first rising edge has been detected (rcving=1)

		if (!(ACSR&(1<<ACIS0))) { // check for first falling edge
      e2:	00 b6       	in	r0, 0x30	; 48
      e4:	00 fc       	sbrc	r0, 0
      e6:	0d c0       	rjmp	.+26     	; 0x102 <__vector_23+0x5c>

			distance = 0;
      e8:	10 92 1a 01 	sts	0x011A, r1
			distance |= TCNT2; // use timer value for distance
      ec:	80 91 1a 01 	lds	r24, 0x011A
      f0:	90 91 b2 00 	lds	r25, 0x00B2
      f4:	98 2b       	or	r25, r24
      f6:	90 93 1a 01 	sts	0x011A, r25
			ACSR |= (1<<ACIS0); // switch back to rising edge
      fa:	80 b7       	in	r24, 0x30	; 48
      fc:	81 60       	ori	r24, 0x01	; 1
      fe:	80 bf       	out	0x30, r24	; 48
     100:	8c c0       	rjmp	.+280    	; 0x21a <__vector_23+0x174>
		} else { // on subsequent rising edges
			// TODO: add LED debugging for each bit
			//PORTB |= (1<<PORTB0);

			// match rising edges to closest expected time in rcvd
			bit_time = 0;
     102:	10 92 1b 01 	sts	0x011B, r1
			bit_time |= TCNT2; // time that rising edge was detected
     106:	80 91 1b 01 	lds	r24, 0x011B
     10a:	90 91 b2 00 	lds	r25, 0x00B2
     10e:	98 2b       	or	r25, r24
     110:	90 93 1b 01 	sts	0x011B, r25
			
			if ((bit_time>=10)&(bit_time<=17)) { rcvd |= 0x40; }
     114:	80 91 1b 01 	lds	r24, 0x011B
     118:	90 91 1b 01 	lds	r25, 0x011B
     11c:	8a 30       	cpi	r24, 0x0A	; 10
     11e:	30 f0       	brcs	.+12     	; 0x12c <__vector_23+0x86>
     120:	92 31       	cpi	r25, 0x12	; 18
     122:	20 f4       	brcc	.+8      	; 0x12c <__vector_23+0x86>
     124:	80 91 17 01 	lds	r24, 0x0117
     128:	80 64       	ori	r24, 0x40	; 64
     12a:	3b c0       	rjmp	.+118    	; 0x1a2 <__vector_23+0xfc>
			else if ((bit_time>=22)&(bit_time<=29)) { rcvd |= 0x20; }
     12c:	80 91 1b 01 	lds	r24, 0x011B
     130:	90 91 1b 01 	lds	r25, 0x011B
     134:	86 31       	cpi	r24, 0x16	; 22
     136:	30 f0       	brcs	.+12     	; 0x144 <__vector_23+0x9e>
     138:	9e 31       	cpi	r25, 0x1E	; 30
     13a:	20 f4       	brcc	.+8      	; 0x144 <__vector_23+0x9e>
     13c:	80 91 17 01 	lds	r24, 0x0117
     140:	80 62       	ori	r24, 0x20	; 32
     142:	2f c0       	rjmp	.+94     	; 0x1a2 <__vector_23+0xfc>
			else if ((bit_time>=35)&(bit_time<=42)) { rcvd |= 0x10; }
     144:	80 91 1b 01 	lds	r24, 0x011B
     148:	90 91 1b 01 	lds	r25, 0x011B
     14c:	83 32       	cpi	r24, 0x23	; 35
     14e:	30 f0       	brcs	.+12     	; 0x15c <__vector_23+0xb6>
     150:	9b 32       	cpi	r25, 0x2B	; 43
     152:	20 f4       	brcc	.+8      	; 0x15c <__vector_23+0xb6>
     154:	80 91 17 01 	lds	r24, 0x0117
     158:	80 61       	ori	r24, 0x10	; 16
     15a:	23 c0       	rjmp	.+70     	; 0x1a2 <__vector_23+0xfc>
			else if ((bit_time>=47)&(bit_time<=54)) { rcvd |= 0x08; }
     15c:	80 91 1b 01 	lds	r24, 0x011B
     160:	90 91 1b 01 	lds	r25, 0x011B
     164:	8f 32       	cpi	r24, 0x2F	; 47
     166:	30 f0       	brcs	.+12     	; 0x174 <__vector_23+0xce>
     168:	97 33       	cpi	r25, 0x37	; 55
     16a:	20 f4       	brcc	.+8      	; 0x174 <__vector_23+0xce>
     16c:	80 91 17 01 	lds	r24, 0x0117
     170:	88 60       	ori	r24, 0x08	; 8
     172:	17 c0       	rjmp	.+46     	; 0x1a2 <__vector_23+0xfc>
			else if ((bit_time>=60)&(bit_time<=67)) { rcvd |= 0x04; }
     174:	80 91 1b 01 	lds	r24, 0x011B
     178:	90 91 1b 01 	lds	r25, 0x011B
     17c:	8c 33       	cpi	r24, 0x3C	; 60
     17e:	30 f0       	brcs	.+12     	; 0x18c <__vector_23+0xe6>
     180:	94 34       	cpi	r25, 0x44	; 68
     182:	20 f4       	brcc	.+8      	; 0x18c <__vector_23+0xe6>
     184:	80 91 17 01 	lds	r24, 0x0117
     188:	84 60       	ori	r24, 0x04	; 4
     18a:	0b c0       	rjmp	.+22     	; 0x1a2 <__vector_23+0xfc>
			else if ((bit_time>=72)&(bit_time<=79)) { rcvd |= 0x02; }
     18c:	80 91 1b 01 	lds	r24, 0x011B
     190:	90 91 1b 01 	lds	r25, 0x011B
     194:	88 34       	cpi	r24, 0x48	; 72
     196:	40 f0       	brcs	.+16     	; 0x1a8 <__vector_23+0x102>
     198:	90 35       	cpi	r25, 0x50	; 80
     19a:	30 f4       	brcc	.+12     	; 0x1a8 <__vector_23+0x102>
     19c:	80 91 17 01 	lds	r24, 0x0117
     1a0:	82 60       	ori	r24, 0x02	; 2
     1a2:	80 93 17 01 	sts	0x0117, r24
     1a6:	39 c0       	rjmp	.+114    	; 0x21a <__vector_23+0x174>
			else if ((bit_time>=85)&(bit_time<=92)) { // eighth bit has been received
     1a8:	80 91 1b 01 	lds	r24, 0x011B
     1ac:	90 91 1b 01 	lds	r25, 0x011B
     1b0:	85 35       	cpi	r24, 0x55	; 85
     1b2:	68 f1       	brcs	.+90     	; 0x20e <__vector_23+0x168>
     1b4:	9d 35       	cpi	r25, 0x5D	; 93
     1b6:	58 f5       	brcc	.+86     	; 0x20e <__vector_23+0x168>
				rcvd |= 0x01; 
     1b8:	80 91 17 01 	lds	r24, 0x0117
     1bc:	81 60       	ori	r24, 0x01	; 1
     1be:	80 93 17 01 	sts	0x0117, r24
				rcv_sx = 1;
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	90 93 19 01 	sts	0x0119, r25
     1ca:	80 93 18 01 	sts	0x0118, r24
				lastRcv = 0;
     1ce:	10 92 1c 01 	sts	0x011C, r1
				lastRcv |= rcvd; // store message
     1d2:	90 91 1c 01 	lds	r25, 0x011C
     1d6:	80 91 17 01 	lds	r24, 0x0117
     1da:	89 2b       	or	r24, r25
     1dc:	80 93 1c 01 	sts	0x011C, r24

				// turn on LEDs for success
				PORTB |= (1<<PORTB1);
     1e0:	29 9a       	sbi	0x05, 1	; 5
				//PORTB &= ~(1<<PORTB0);
				//if (lastRcv==toRcv1) { PORTB |= (1<<PORTB2); }
				//if (lastRcv==toRcv2) { PORTB |= (1<<PORTB0); }

				rcv_time = 0;
     1e2:	10 92 1e 01 	sts	0x011E, r1
     1e6:	10 92 1d 01 	sts	0x011D, r1
				rcv_time |= TCNT1;
     1ea:	80 91 1d 01 	lds	r24, 0x011D
     1ee:	90 91 1e 01 	lds	r25, 0x011E
     1f2:	20 91 84 00 	lds	r18, 0x0084
     1f6:	30 91 85 00 	lds	r19, 0x0085
     1fa:	82 2b       	or	r24, r18
     1fc:	93 2b       	or	r25, r19
     1fe:	90 93 1e 01 	sts	0x011E, r25
     202:	80 93 1d 01 	sts	0x011D, r24
				TCNT1 = 0; // reset timer1 on received messages
     206:	10 92 85 00 	sts	0x0085, r1
     20a:	10 92 84 00 	sts	0x0084, r1
				rcving = 0; // reset receiving variables
				TCNT2 = 0;
				rcvd = 0;

			}  else { // bad rising edge means message is bad, discard and reset
				rcving = 0; // reset receiving variables
     20e:	10 92 16 01 	sts	0x0116, r1
				TCNT2 = 0;
     212:	10 92 b2 00 	sts	0x00B2, r1
				rcvd = 0;
     216:	10 92 17 01 	sts	0x0117, r1
	/* while(ACSR & (1<<ACO)) {
		PORTB |= (1<<PORTB0);
	}
	PORTB &= ~(1<<PORTB0); */

} 
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	3f 91       	pop	r19
     220:	2f 91       	pop	r18
     222:	0f 90       	pop	r0
     224:	0f be       	out	0x3f, r0	; 63
     226:	0f 90       	pop	r0
     228:	1f 90       	pop	r1
     22a:	18 95       	reti

0000022c <__vector_7>:

// reset routine for message reception
ISR(TIMER2_COMPA_vect) { // timer2 interrupt routine
     22c:	1f 92       	push	r1
     22e:	0f 92       	push	r0
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	0f 92       	push	r0
     234:	11 24       	eor	r1, r1

	rcving = 0;
     236:	10 92 16 01 	sts	0x0116, r1
	rcvd = 0;
     23a:	10 92 17 01 	sts	0x0117, r1
	//PORTB &= ~(1<<PORTB0);
	PORTB &= ~(1<<PORTB1);
     23e:	29 98       	cbi	0x05, 1	; 5

}
     240:	0f 90       	pop	r0
     242:	0f be       	out	0x3f, r0	; 63
     244:	0f 90       	pop	r0
     246:	1f 90       	pop	r1
     248:	18 95       	reti

0000024a <__vector_14>:

// routine for timer0 to send messages, pause for a longer time between messages
ISR(TIMER0_COMPA_vect) { // timer0 interrupt routine
     24a:	1f 92       	push	r1
     24c:	0f 92       	push	r0
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	0f 92       	push	r0
     252:	11 24       	eor	r1, r1
     254:	2f 93       	push	r18
     256:	3f 93       	push	r19
     258:	4f 93       	push	r20
     25a:	5f 93       	push	r21
     25c:	6f 93       	push	r22
     25e:	7f 93       	push	r23
     260:	8f 93       	push	r24
     262:	9f 93       	push	r25
     264:	ef 93       	push	r30
     266:	ff 93       	push	r31

	if (bits_sent<8) { // if the whole message has not been sent
     268:	80 91 10 01 	lds	r24, 0x0110
     26c:	90 91 11 01 	lds	r25, 0x0111
     270:	08 97       	sbiw	r24, 0x08	; 8
     272:	0c f0       	brlt	.+2      	; 0x276 <__vector_14+0x2c>
     274:	40 c0       	rjmp	.+128    	; 0x2f6 <__vector_14+0xac>
		if (pause==0) { // 0,1 half of bit to be sent
     276:	80 91 12 01 	lds	r24, 0x0112
     27a:	90 91 13 01 	lds	r25, 0x0113
     27e:	89 2b       	or	r24, r25
     280:	a1 f5       	brne	.+104    	; 0x2ea <__vector_14+0xa0>
			new_bit = (toSend & (1<<(7-bits_sent))) >> (7-bits_sent);
     282:	40 91 00 01 	lds	r20, 0x0100
     286:	80 91 10 01 	lds	r24, 0x0110
     28a:	90 91 11 01 	lds	r25, 0x0111
     28e:	e0 91 10 01 	lds	r30, 0x0110
     292:	f0 91 11 01 	lds	r31, 0x0111
     296:	27 e0       	ldi	r18, 0x07	; 7
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	b9 01       	movw	r22, r18
     29c:	68 1b       	sub	r22, r24
     29e:	79 0b       	sbc	r23, r25
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__vector_14+0x60>
     2a6:	88 0f       	add	r24, r24
     2a8:	99 1f       	adc	r25, r25
     2aa:	6a 95       	dec	r22
     2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <__vector_14+0x5c>
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	84 23       	and	r24, r20
     2b2:	95 23       	and	r25, r21
     2b4:	2e 1b       	sub	r18, r30
     2b6:	3f 0b       	sbc	r19, r31
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <__vector_14+0x74>
     2ba:	95 95       	asr	r25
     2bc:	87 95       	ror	r24
     2be:	2a 95       	dec	r18
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <__vector_14+0x70>
     2c2:	90 93 15 01 	sts	0x0115, r25
     2c6:	80 93 14 01 	sts	0x0114, r24
			if(new_bit==1) { // turn on LEDs
     2ca:	80 91 14 01 	lds	r24, 0x0114
     2ce:	90 91 15 01 	lds	r25, 0x0115
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	11 f4       	brne	.+4      	; 0x2da <__vector_14+0x90>
				PORTC |= (1<<PORTC3);
     2d6:	43 9a       	sbi	0x08, 3	; 8
     2d8:	01 c0       	rjmp	.+2      	; 0x2dc <__vector_14+0x92>
				//PORTB |= (1<<PORTB2);
			} else { // turn off LEDs
				PORTC &= ~(1<<PORTC3);
     2da:	43 98       	cbi	0x08, 3	; 8
				//PORTB &= ~(1<<PORTB2);
			}
			pause = 1; // pause after sending a bit
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	90 93 13 01 	sts	0x0113, r25
     2e4:	80 93 12 01 	sts	0x0112, r24
     2e8:	1a c0       	rjmp	.+52     	; 0x31e <__vector_14+0xd4>
		} else { // pausing between bits
			pause = 0; // send new bit on next interrupt
     2ea:	10 92 13 01 	sts	0x0113, r1
     2ee:	10 92 12 01 	sts	0x0112, r1
			PORTC &= ~(1<<PORTC3); // ensure LEDs are low for pause
     2f2:	43 98       	cbi	0x08, 3	; 8
     2f4:	0b c0       	rjmp	.+22     	; 0x30c <__vector_14+0xc2>
			//PORTB &= ~(1<<PORTB2);
			bits_sent += 1; // increment bits_sent after each pause
		}
	} else { // if bits_sent >= 8, reset variables and pause for a bit
		if (bits_sent>=40) { // wait for 2 messages, send again
     2f6:	80 91 10 01 	lds	r24, 0x0110
     2fa:	90 91 11 01 	lds	r25, 0x0111
     2fe:	88 97       	sbiw	r24, 0x28	; 40
     300:	2c f0       	brlt	.+10     	; 0x30c <__vector_14+0xc2>
			bits_sent = 0; 
     302:	10 92 11 01 	sts	0x0111, r1
     306:	10 92 10 01 	sts	0x0110, r1
     30a:	09 c0       	rjmp	.+18     	; 0x31e <__vector_14+0xd4>
		} else {
			bits_sent+=1; // increment bits_sent for timing between messages
     30c:	80 91 10 01 	lds	r24, 0x0110
     310:	90 91 11 01 	lds	r25, 0x0111
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	90 93 11 01 	sts	0x0111, r25
     31a:	80 93 10 01 	sts	0x0110, r24
		}
		
		// TODO: could disable ISR here, for send_msg function?
	}

}
     31e:	ff 91       	pop	r31
     320:	ef 91       	pop	r30
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	7f 91       	pop	r23
     328:	6f 91       	pop	r22
     32a:	5f 91       	pop	r21
     32c:	4f 91       	pop	r20
     32e:	3f 91       	pop	r19
     330:	2f 91       	pop	r18
     332:	0f 90       	pop	r0
     334:	0f be       	out	0x3f, r0	; 63
     336:	0f 90       	pop	r0
     338:	1f 90       	pop	r1
     33a:	18 95       	reti

0000033c <detach>:

// "move" by detaching magnet for a specified time in ms
void detach(double time) {
     33c:	af 92       	push	r10
     33e:	bf 92       	push	r11
     340:	cf 92       	push	r12
     342:	df 92       	push	r13
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	5b 01       	movw	r10, r22
     34e:	6c 01       	movw	r12, r24

	//switch E.P.M. direction 1 (detach)
	PORTB |= (1<<PORTB0); // set inner LED, indicating direction 1
     350:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<6);//activate E.P.M direction 1
     352:	2e 9a       	sbi	0x05, 6	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     354:	80 ef       	ldi	r24, 0xF0	; 240
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <detach+0x1c>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     35c:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     35e:	2f 98       	cbi	0x05, 7	; 5
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     360:	c6 01       	movw	r24, r12
     362:	b5 01       	movw	r22, r10
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	4a ef       	ldi	r20, 0xFA	; 250
     36a:	54 e4       	ldi	r21, 0x44	; 68
     36c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__mulsf3>
     370:	7b 01       	movw	r14, r22
     372:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e8       	ldi	r20, 0x80	; 128
     37a:	5f e3       	ldi	r21, 0x3F	; 63
     37c:	0e 94 67 07 	call	0xece	; 0xece <__ltsf2>
     380:	88 23       	and	r24, r24
     382:	1c f4       	brge	.+6      	; 0x38a <detach+0x4e>
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	24 c0       	rjmp	.+72     	; 0x3d2 <detach+0x96>
		__ticks = 1;
	else if (__tmp > 65535)
     38a:	c8 01       	movw	r24, r16
     38c:	b7 01       	movw	r22, r14
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	3f ef       	ldi	r19, 0xFF	; 255
     392:	4f e7       	ldi	r20, 0x7F	; 127
     394:	57 e4       	ldi	r21, 0x47	; 71
     396:	0e 94 07 07 	call	0xe0e	; 0xe0e <__gtsf2>
     39a:	18 16       	cp	r1, r24
     39c:	b4 f4       	brge	.+44     	; 0x3ca <detach+0x8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     39e:	c6 01       	movw	r24, r12
     3a0:	b5 01       	movw	r22, r10
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	40 e2       	ldi	r20, 0x20	; 32
     3a8:	51 e4       	ldi	r21, 0x41	; 65
     3aa:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__mulsf3>
     3ae:	0e 94 37 04 	call	0x86e	; 0x86e <__fixunssfsi>
     3b2:	88 ec       	ldi	r24, 0xC8	; 200
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <detach+0x86>
     3b8:	fc 01       	movw	r30, r24
     3ba:	31 97       	sbiw	r30, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <detach+0x7e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3be:	61 50       	subi	r22, 0x01	; 1
     3c0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3c2:	61 15       	cp	r22, r1
     3c4:	71 05       	cpc	r23, r1
     3c6:	c1 f7       	brne	.-16     	; 0x3b8 <detach+0x7c>
     3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <detach+0x9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ca:	c8 01       	movw	r24, r16
     3cc:	b7 01       	movw	r22, r14
     3ce:	0e 94 37 04 	call	0x86e	; 0x86e <__fixunssfsi>
     3d2:	cb 01       	movw	r24, r22
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <detach+0x98>

	_delay_ms(time); // stay detached for desired time

	//switch E.P.M. direction 2 (re-attach)
	PORTB &= ~(1<<PORTB0); // clear inner LED, indicating direction 2
     3d8:	28 98       	cbi	0x05, 0	; 5
	PORTB |= (1<<7);//activate E.P.M direction 2
     3da:	2f 9a       	sbi	0x05, 7	; 5
     3dc:	80 ef       	ldi	r24, 0xF0	; 240
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <detach+0xa4>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     3e4:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     3e6:	2f 98       	cbi	0x05, 7	; 5

	return;
}
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	df 90       	pop	r13
     3f2:	cf 90       	pop	r12
     3f4:	bf 90       	pop	r11
     3f6:	af 90       	pop	r10
     3f8:	08 95       	ret

000003fa <reset_EPM>:

// reset EPM in case of robot/code malfunction
void reset_EPM(void) {

	//switch E.P.M. direction 2 (re-attach)
	PORTB &= ~(1<<PORTB0); // clear inner LED, indicating direction 2
     3fa:	28 98       	cbi	0x05, 0	; 5
	PORTB |= (1<<7);//activate E.P.M direction 2
     3fc:	2f 9a       	sbi	0x05, 7	; 5
     3fe:	80 ef       	ldi	r24, 0xF0	; 240
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <reset_EPM+0x8>
	_delay_us(120);//leave on for 120us
	PORTB &=~(1<<6);//deactivate E.P.M
     406:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);//deactivate E.P.M
     408:	2f 98       	cbi	0x05, 7	; 5

	return;

}
     40a:	08 95       	ret

0000040c <main>:
static volatile int beaconID3_time = 0;
static volatile char beacons_rcvd = 0;
static volatile char desired_beacon = 0;
static volatile int center_threshold = 50;

int main(void) {
     40c:	af 92       	push	r10
     40e:	bf 92       	push	r11
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29

	DDRB=0;
     420:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
     422:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
     424:	87 e0       	ldi	r24, 0x07	; 7
     426:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7); // enable EPM pins
     428:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
     42a:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
     42c:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
     42e:	2f 98       	cbi	0x05, 7	; 5

	DDRC=0; // enable IR LED
     430:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
     432:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
     434:	88 e0       	ldi	r24, 0x08	; 8
     436:	87 b9       	out	0x07, r24	; 7

	cli(); // disable interrupts
     438:	f8 94       	cli

	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
     43a:	83 e0       	ldi	r24, 0x03	; 3
     43c:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
     440:	8b e0       	ldi	r24, 0x0B	; 11
     442:	80 bf       	out	0x30, r24	; 48

	// Initialize timer0 for timing sending of messages (1/8 prescaler, 8-bit timer rolls over at ~3.9 kHz Hz)
	TCCR0A |= (1<<WGM01); // // do not change any output pin, clear at compare match with OCR0A
     444:	84 b5       	in	r24, 0x24	; 36
     446:	82 60       	ori	r24, 0x02	; 2
     448:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (0<<CS02)|(1<<CS01)|(0<<CS00); // prescaler of 1/8
     44a:	85 b5       	in	r24, 0x25	; 37
     44c:	82 60       	ori	r24, 0x02	; 2
     44e:	85 bd       	out	0x25, r24	; 37
	OCR0A = 100; // interrupt every 100 counts, for sending a new bit every 2 cycles
     450:	84 e6       	ldi	r24, 0x64	; 100
     452:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
     454:	80 91 6e 00 	lds	r24, 0x006E
     458:	82 60       	ori	r24, 0x02	; 2
     45a:	80 93 6e 00 	sts	0x006E, r24

	// Initialize timer1 for neighbor-marking, based on times of received messages
	TCCR1B |= (1<<CS12)|(0<<CS11)|(1<<CS10); // 1/1024 prescaler, counts at ~7.8kHz (1 count is 0.128 ms), 16-bit timer
     45e:	80 91 81 00 	lds	r24, 0x0081
     462:	85 60       	ori	r24, 0x05	; 5
     464:	80 93 81 00 	sts	0x0081, r24

	// Initialize timer2 for timing receiving of messages (1/128 prescaler, 8-bit timer rolls over at ~250 Hz )
	TCCR2A |= (1<<WGM21); // do not change any output pin, clear at compare match with OCR2A
     468:	80 91 b0 00 	lds	r24, 0x00B0
     46c:	82 60       	ori	r24, 0x02	; 2
     46e:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = (1<<OCIE2A); // compare match on OCR2A
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	80 93 70 00 	sts	0x0070, r24
    OCR2A = 200; // compare every 200 counts (every 3.2ms, 2x length of message)
     478:	88 ec       	ldi	r24, 0xC8	; 200
     47a:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= (1<<CS22)|(0<<CS21)|(1<<CS20); // prescaler of 1/128: count every 16us
     47e:	80 91 b1 00 	lds	r24, 0x00B1
     482:	85 60       	ori	r24, 0x05	; 5
     484:	80 93 b1 00 	sts	0x00B1, r24

	// test power by turning on LEDs
	PORTB |= (1<<PORTB0); // green
     488:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
     48a:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
     48c:	2a 9a       	sbi	0x05, 2	; 5
	PORTC |= (1<<PORTC3);
     48e:	43 9a       	sbi	0x08, 3	; 8
     490:	80 ed       	ldi	r24, 0xD0	; 208
     492:	97 e0       	ldi	r25, 0x07	; 7
     494:	28 ec       	ldi	r18, 0xC8	; 200
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	f9 01       	movw	r30, r18
     49a:	31 97       	sbiw	r30, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <main+0x8e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     49e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a0:	d9 f7       	brne	.-10     	; 0x498 <main+0x8c>
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
     4a2:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     4a4:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
     4a6:	2a 98       	cbi	0x05, 2	; 5
	PORTC &= ~(1<<PORTC3);
     4a8:	43 98       	cbi	0x08, 3	; 8

	// make sure EPM is activated at startup
	reset_EPM();
     4aa:	0e 94 fd 01 	call	0x3fa	; 0x3fa <reset_EPM>
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	48 ec       	ldi	r20, 0xC8	; 200
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	0b c0       	rjmp	.+22     	; 0x4ce <main+0xc2>
     4b8:	fa 01       	movw	r30, r20
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <main+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4c0:	d9 f7       	brne	.-10     	; 0x4b8 <main+0xac>
	// wait here for a time (~20s) until all modules are spinning, then blink LEDs again
	int ww=0;
	while (ww<300) {

		_delay_ms(100);
		ww+=1;
     4c2:	2f 5f       	subi	r18, 0xFF	; 255
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
	// make sure EPM is activated at startup
	reset_EPM();

	// wait here for a time (~20s) until all modules are spinning, then blink LEDs again
	int ww=0;
	while (ww<300) {
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	2c 32       	cpi	r18, 0x2C	; 44
     4ca:	38 07       	cpc	r19, r24
     4cc:	19 f0       	breq	.+6      	; 0x4d4 <main+0xc8>
     4ce:	88 ee       	ldi	r24, 0xE8	; 232
     4d0:	93 e0       	ldi	r25, 0x03	; 3
     4d2:	f2 cf       	rjmp	.-28     	; 0x4b8 <main+0xac>
		_delay_ms(100);
		ww+=1;

	}

	PORTB |= (1<<PORTB0); // green
     4d4:	28 9a       	sbi	0x05, 0	; 5
	PORTB |= (1<<PORTB1); // yellow
     4d6:	29 9a       	sbi	0x05, 1	; 5
	PORTB |= (1<<PORTB2); // red
     4d8:	2a 9a       	sbi	0x05, 2	; 5
     4da:	80 ed       	ldi	r24, 0xD0	; 208
     4dc:	97 e0       	ldi	r25, 0x07	; 7
     4de:	28 ec       	ldi	r18, 0xC8	; 200
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	f9 01       	movw	r30, r18
     4e4:	31 97       	sbiw	r30, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <main+0xd8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ea:	d9 f7       	brne	.-10     	; 0x4e2 <main+0xd6>
	
	_delay_ms(200);  

	PORTB &= ~(1<<PORTB0); // turn off LEDs
     4ec:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
     4ee:	29 98       	cbi	0x05, 1	; 5
	PORTB &= ~(1<<PORTB2);
     4f0:	2a 98       	cbi	0x05, 2	; 5

	sei(); // enable interrupts
     4f2:	78 94       	sei
     4f4:	c0 e0       	ldi	r28, 0x00	; 0
     4f6:	d0 e0       	ldi	r29, 0x00	; 0
     4f8:	00 e0       	ldi	r16, 0x00	; 0
     4fa:	10 e0       	ldi	r17, 0x00	; 0
     4fc:	3c e2       	ldi	r19, 0x2C	; 44
     4fe:	e3 2e       	mov	r14, r19
     500:	31 e0       	ldi	r19, 0x01	; 1
     502:	f3 2e       	mov	r15, r19
							cli();
							PORTB |= (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2); 
						}
					}

					beacons_rcvd=4; // indicated that direction of motion has been decided
     504:	24 e0       	ldi	r18, 0x04	; 4
     506:	a2 2e       	mov	r10, r18
						}
					}
					else if (lastRcv==beaconID3) { // if other two times are not zero, store time and add to beacons rcvd; else ignore
						if ((beacons_rcvd==2) && (beaconID1_time>0) && (beaconID2_time>0)) {
							beaconID3_time |= rcv_time;
							beacons_rcvd = 3;
     508:	93 e0       	ldi	r25, 0x03	; 3
     50a:	d9 2e       	mov	r13, r25
						}
					}
					else if (lastRcv==beaconID2) { // if time3 is zero and time1 is not 0, store time and add to beacons rcvd; else ignore
						if ((beacons_rcvd==1) && (beaconID3_time==0) && (beaconID1_time>0)) {
							beaconID2_time |= rcv_time;
							beacons_rcvd = 2;
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	c8 2e       	mov	r12, r24
			if ((rcv_sx==1) && (rcv_ct==10)) { // got a new message and already calibrated
				if (beacons_rcvd < 3) { // store times from the three beacons in a row
					if (lastRcv==beaconID1) { // if other two times are 0, store time and add to beacons rcvd; else reset
						if ((beacons_rcvd==0) && (beaconID2_time==0) && (beaconID3_time==0)) {
							beaconID1_time |= rcv_time;
							beacons_rcvd = 1;
     510:	bb 24       	eor	r11, r11
     512:	b3 94       	inc	r11
	int detach_time = 0;
	int dd = 0;
	
	while(1) { // main loop

		if (toSend==mobileID) { // don't bother trying to track beacons if you are not the mobile robot
     514:	90 91 00 01 	lds	r25, 0x0100
     518:	80 91 01 01 	lds	r24, 0x0101
     51c:	98 17       	cp	r25, r24
     51e:	d1 f7       	brne	.-12     	; 0x514 <main+0x108>
		
			// take 10 messages to calculate period		
			if ((rcv_sx==1) && (rcv_ct<10)) {
     520:	80 91 18 01 	lds	r24, 0x0118
     524:	90 91 19 01 	lds	r25, 0x0119
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	89 f5       	brne	.+98     	; 0x58e <main+0x182>
     52c:	80 91 1f 01 	lds	r24, 0x011F
     530:	8a 30       	cpi	r24, 0x0A	; 10
     532:	68 f5       	brcc	.+90     	; 0x58e <main+0x182>
				if (lastRcv==beaconID1) { // only messages from beacon 1 for calculating period
     534:	90 91 1c 01 	lds	r25, 0x011C
     538:	80 91 02 01 	lds	r24, 0x0102
     53c:	98 17       	cp	r25, r24
     53e:	39 f5       	brne	.+78     	; 0x58e <main+0x182>
					PORTB |= (1<<PORTB2); // turn on LED to indicate calibration
     540:	2a 9a       	sbi	0x05, 2	; 5
					if (rcv_time>100) {
     542:	80 91 1d 01 	lds	r24, 0x011D
     546:	90 91 1e 01 	lds	r25, 0x011E
     54a:	85 36       	cpi	r24, 0x65	; 101
     54c:	91 05       	cpc	r25, r1
     54e:	dc f0       	brlt	.+54     	; 0x586 <main+0x17a>
						per = (per+rcv_time)/2;
     550:	80 91 1d 01 	lds	r24, 0x011D
     554:	90 91 1e 01 	lds	r25, 0x011E
     558:	8c 0f       	add	r24, r28
     55a:	9d 1f       	adc	r25, r29
     55c:	62 e0       	ldi	r22, 0x02	; 2
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	0e 94 91 09 	call	0x1322	; 0x1322 <__divmodhi4>
     564:	eb 01       	movw	r28, r22
						if (rcv_ct==9) {
     566:	80 91 1f 01 	lds	r24, 0x011F
     56a:	89 30       	cpi	r24, 0x09	; 9
     56c:	39 f4       	brne	.+14     	; 0x57c <main+0x170>
							detach_time = per/5; // time after receiving a message that it will detach the EPM
     56e:	cb 01       	movw	r24, r22
     570:	65 e0       	ldi	r22, 0x05	; 5
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	0e 94 91 09 	call	0x1322	; 0x1322 <__divmodhi4>
     578:	8b 01       	movw	r16, r22
							//detach_time = detach_time/8; // convert roughly to ms
							PORTB &= ~(1<<PORTB2); // clear LED to indicate end of calibration
     57a:	2a 98       	cbi	0x05, 2	; 5
						}
						rcv_ct+=1;	
     57c:	80 91 1f 01 	lds	r24, 0x011F
     580:	8f 5f       	subi	r24, 0xFF	; 255
     582:	80 93 1f 01 	sts	0x011F, r24
					}
					rcv_sx=0;
     586:	10 92 19 01 	sts	0x0119, r1
     58a:	10 92 18 01 	sts	0x0118, r1

			// calculate angles based on times between beacon messages, then pick beacon to move towards
			// rotation A: take in three messages, calculate "angles" (times between receptions)
			// rotation B: move towards selected beacon (towards beacon not asociated with the largest angle)
		
			if ((rcv_sx==1) && (rcv_ct==10)) { // got a new message and already calibrated
     58e:	80 91 18 01 	lds	r24, 0x0118
     592:	90 91 19 01 	lds	r25, 0x0119
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	09 f0       	breq	.+2      	; 0x59c <main+0x190>
     59a:	bc cf       	rjmp	.-136    	; 0x514 <main+0x108>
     59c:	80 91 1f 01 	lds	r24, 0x011F
     5a0:	8a 30       	cpi	r24, 0x0A	; 10
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <main+0x19a>
     5a4:	b7 cf       	rjmp	.-146    	; 0x514 <main+0x108>
				if (beacons_rcvd < 3) { // store times from the three beacons in a row
     5a6:	80 91 20 01 	lds	r24, 0x0120
     5aa:	83 30       	cpi	r24, 0x03	; 3
     5ac:	08 f0       	brcs	.+2      	; 0x5b0 <main+0x1a4>
     5ae:	9a c0       	rjmp	.+308    	; 0x6e4 <main+0x2d8>
					if (lastRcv==beaconID1) { // if other two times are 0, store time and add to beacons rcvd; else reset
     5b0:	90 91 1c 01 	lds	r25, 0x011C
     5b4:	80 91 02 01 	lds	r24, 0x0102
     5b8:	98 17       	cp	r25, r24
     5ba:	29 f5       	brne	.+74     	; 0x606 <main+0x1fa>
						if ((beacons_rcvd==0) && (beaconID2_time==0) && (beaconID3_time==0)) {
     5bc:	80 91 20 01 	lds	r24, 0x0120
     5c0:	88 23       	and	r24, r24
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <main+0x1ba>
     5c4:	77 c0       	rjmp	.+238    	; 0x6b4 <main+0x2a8>
     5c6:	80 91 21 01 	lds	r24, 0x0121
     5ca:	90 91 22 01 	lds	r25, 0x0122
     5ce:	89 2b       	or	r24, r25
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <main+0x1c8>
     5d2:	70 c0       	rjmp	.+224    	; 0x6b4 <main+0x2a8>
     5d4:	80 91 23 01 	lds	r24, 0x0123
     5d8:	90 91 24 01 	lds	r25, 0x0124
     5dc:	89 2b       	or	r24, r25
     5de:	09 f0       	breq	.+2      	; 0x5e2 <main+0x1d6>
     5e0:	69 c0       	rjmp	.+210    	; 0x6b4 <main+0x2a8>
							beaconID1_time |= rcv_time;
     5e2:	20 91 25 01 	lds	r18, 0x0125
     5e6:	30 91 26 01 	lds	r19, 0x0126
     5ea:	80 91 1d 01 	lds	r24, 0x011D
     5ee:	90 91 1e 01 	lds	r25, 0x011E
     5f2:	82 2b       	or	r24, r18
     5f4:	93 2b       	or	r25, r19
     5f6:	90 93 26 01 	sts	0x0126, r25
     5fa:	80 93 25 01 	sts	0x0125, r24
							beacons_rcvd = 1;
     5fe:	b0 92 20 01 	sts	0x0120, r11
							PORTB |= (1<<PORTB0);
     602:	28 9a       	sbi	0x05, 0	; 5
     604:	6f c0       	rjmp	.+222    	; 0x6e4 <main+0x2d8>
								beacons_rcvd = 0;
								PORTB &= ~( (1<<PORTB0) | (1<<PORTB2) );
							}
						}
					}
					else if (lastRcv==beaconID2) { // if time3 is zero and time1 is not 0, store time and add to beacons rcvd; else ignore
     606:	90 91 1c 01 	lds	r25, 0x011C
     60a:	80 91 03 01 	lds	r24, 0x0103
     60e:	98 17       	cp	r25, r24
     610:	31 f5       	brne	.+76     	; 0x65e <main+0x252>
						if ((beacons_rcvd==1) && (beaconID3_time==0) && (beaconID1_time>0)) {
     612:	80 91 20 01 	lds	r24, 0x0120
     616:	81 30       	cpi	r24, 0x01	; 1
     618:	09 f0       	breq	.+2      	; 0x61c <main+0x210>
     61a:	4c c0       	rjmp	.+152    	; 0x6b4 <main+0x2a8>
     61c:	80 91 23 01 	lds	r24, 0x0123
     620:	90 91 24 01 	lds	r25, 0x0124
     624:	89 2b       	or	r24, r25
     626:	09 f0       	breq	.+2      	; 0x62a <main+0x21e>
     628:	45 c0       	rjmp	.+138    	; 0x6b4 <main+0x2a8>
     62a:	80 91 25 01 	lds	r24, 0x0125
     62e:	90 91 26 01 	lds	r25, 0x0126
     632:	18 16       	cp	r1, r24
     634:	19 06       	cpc	r1, r25
     636:	f4 f5       	brge	.+124    	; 0x6b4 <main+0x2a8>
							beaconID2_time |= rcv_time;
     638:	20 91 21 01 	lds	r18, 0x0121
     63c:	30 91 22 01 	lds	r19, 0x0122
     640:	80 91 1d 01 	lds	r24, 0x011D
     644:	90 91 1e 01 	lds	r25, 0x011E
     648:	82 2b       	or	r24, r18
     64a:	93 2b       	or	r25, r19
     64c:	90 93 22 01 	sts	0x0122, r25
     650:	80 93 21 01 	sts	0x0121, r24
							beacons_rcvd = 2;
     654:	c0 92 20 01 	sts	0x0120, r12
							PORTB |= (1<<PORTB2);
     658:	2a 9a       	sbi	0x05, 2	; 5
							PORTB &= ~(1<<PORTB0);
     65a:	28 98       	cbi	0x05, 0	; 5
     65c:	43 c0       	rjmp	.+134    	; 0x6e4 <main+0x2d8>
								beacons_rcvd = 0;
								PORTB &= ~( (1<<PORTB0) | (1<<PORTB2) );
							}
						}
					}
					else if (lastRcv==beaconID3) { // if other two times are not zero, store time and add to beacons rcvd; else ignore
     65e:	90 91 1c 01 	lds	r25, 0x011C
     662:	80 91 04 01 	lds	r24, 0x0104
     666:	98 17       	cp	r25, r24
     668:	e9 f5       	brne	.+122    	; 0x6e4 <main+0x2d8>
						if ((beacons_rcvd==2) && (beaconID1_time>0) && (beaconID2_time>0)) {
     66a:	80 91 20 01 	lds	r24, 0x0120
     66e:	82 30       	cpi	r24, 0x02	; 2
     670:	09 f5       	brne	.+66     	; 0x6b4 <main+0x2a8>
     672:	80 91 25 01 	lds	r24, 0x0125
     676:	90 91 26 01 	lds	r25, 0x0126
     67a:	18 16       	cp	r1, r24
     67c:	19 06       	cpc	r1, r25
     67e:	d4 f4       	brge	.+52     	; 0x6b4 <main+0x2a8>
     680:	80 91 21 01 	lds	r24, 0x0121
     684:	90 91 22 01 	lds	r25, 0x0122
     688:	18 16       	cp	r1, r24
     68a:	19 06       	cpc	r1, r25
     68c:	9c f4       	brge	.+38     	; 0x6b4 <main+0x2a8>
							beaconID3_time |= rcv_time;
     68e:	80 91 23 01 	lds	r24, 0x0123
     692:	90 91 24 01 	lds	r25, 0x0124
     696:	20 91 1d 01 	lds	r18, 0x011D
     69a:	30 91 1e 01 	lds	r19, 0x011E
     69e:	28 2b       	or	r18, r24
     6a0:	39 2b       	or	r19, r25
     6a2:	30 93 24 01 	sts	0x0124, r19
     6a6:	20 93 23 01 	sts	0x0123, r18
							beacons_rcvd = 3;
     6aa:	d0 92 20 01 	sts	0x0120, r13
							PORTB |= (1<<PORTB2)|(1<<PORTB0);
     6ae:	85 b1       	in	r24, 0x05	; 5
     6b0:	85 60       	ori	r24, 0x05	; 5
     6b2:	17 c0       	rjmp	.+46     	; 0x6e2 <main+0x2d6>
						} else {
							if (rcv_time > 100) {
     6b4:	80 91 1d 01 	lds	r24, 0x011D
     6b8:	90 91 1e 01 	lds	r25, 0x011E
     6bc:	85 36       	cpi	r24, 0x65	; 101
     6be:	91 05       	cpc	r25, r1
     6c0:	8c f0       	brlt	.+34     	; 0x6e4 <main+0x2d8>
								beaconID1_time = 0;
     6c2:	10 92 26 01 	sts	0x0126, r1
     6c6:	10 92 25 01 	sts	0x0125, r1
								beaconID2_time = 0;
     6ca:	10 92 22 01 	sts	0x0122, r1
     6ce:	10 92 21 01 	sts	0x0121, r1
								beaconID3_time = 0;
     6d2:	10 92 24 01 	sts	0x0124, r1
     6d6:	10 92 23 01 	sts	0x0123, r1
								beacons_rcvd = 0;
     6da:	10 92 20 01 	sts	0x0120, r1
								PORTB &= ~( (1<<PORTB0) | (1<<PORTB2) );
     6de:	85 b1       	in	r24, 0x05	; 5
     6e0:	8a 7f       	andi	r24, 0xFA	; 250
     6e2:	85 b9       	out	0x05, r24	; 5
				// if 3->1 (beaconID1_time) is the longest time, move to beacon 2
				// if 1->2 (beaconID2_time) is the longest time, move to beacon 3
				// if 2->3 (beaconID3_time) is the longest time, move to beacon 1

				// calculate movement
				if (beacons_rcvd==3) {
     6e4:	80 91 20 01 	lds	r24, 0x0120
     6e8:	83 30       	cpi	r24, 0x03	; 3
     6ea:	09 f0       	breq	.+2      	; 0x6ee <main+0x2e2>
     6ec:	8b c0       	rjmp	.+278    	; 0x804 <main+0x3f8>

					//beaconID1_time = 1000; // move towards beaconID2, if this is largest
					//beaconID2_time = 1000; // move towards beaconID3, if this is largest
					//beaconID3_time = 1000; // move towards beaconID1, if this is largest
					PORTB &= ~( (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) );
     6ee:	85 b1       	in	r24, 0x05	; 5
     6f0:	88 7f       	andi	r24, 0xF8	; 248
     6f2:	85 b9       	out	0x05, r24	; 5

					if ((beaconID1_time>(beaconID2_time+center_threshold)) && (beaconID1_time>(beaconID2_time+center_threshold))) {
     6f4:	40 91 25 01 	lds	r20, 0x0125
     6f8:	50 91 26 01 	lds	r21, 0x0126
     6fc:	20 91 21 01 	lds	r18, 0x0121
     700:	30 91 22 01 	lds	r19, 0x0122
     704:	80 91 05 01 	lds	r24, 0x0105
     708:	90 91 06 01 	lds	r25, 0x0106
     70c:	82 0f       	add	r24, r18
     70e:	93 1f       	adc	r25, r19
     710:	84 17       	cp	r24, r20
     712:	95 07       	cpc	r25, r21
     714:	d4 f4       	brge	.+52     	; 0x74a <main+0x33e>
     716:	40 91 25 01 	lds	r20, 0x0125
     71a:	50 91 26 01 	lds	r21, 0x0126
     71e:	20 91 21 01 	lds	r18, 0x0121
     722:	30 91 22 01 	lds	r19, 0x0122
     726:	80 91 05 01 	lds	r24, 0x0105
     72a:	90 91 06 01 	lds	r25, 0x0106
     72e:	82 0f       	add	r24, r18
     730:	93 1f       	adc	r25, r19
     732:	84 17       	cp	r24, r20
     734:	95 07       	cpc	r25, r21
     736:	4c f4       	brge	.+18     	; 0x74a <main+0x33e>
						desired_beacon |= beaconID2;
     738:	90 91 27 01 	lds	r25, 0x0127
     73c:	80 91 03 01 	lds	r24, 0x0103
     740:	89 2b       	or	r24, r25
     742:	80 93 27 01 	sts	0x0127, r24
						PORTB |= (1<<PORTB1);
     746:	29 9a       	sbi	0x05, 1	; 5
     748:	5b c0       	rjmp	.+182    	; 0x800 <main+0x3f4>
						//while(1) { cli(); }
					} else if ((beaconID2_time>(beaconID1_time+center_threshold)) && (beaconID2_time>(beaconID3_time+center_threshold))) {
     74a:	40 91 21 01 	lds	r20, 0x0121
     74e:	50 91 22 01 	lds	r21, 0x0122
     752:	20 91 25 01 	lds	r18, 0x0125
     756:	30 91 26 01 	lds	r19, 0x0126
     75a:	80 91 05 01 	lds	r24, 0x0105
     75e:	90 91 06 01 	lds	r25, 0x0106
     762:	82 0f       	add	r24, r18
     764:	93 1f       	adc	r25, r19
     766:	84 17       	cp	r24, r20
     768:	95 07       	cpc	r25, r21
     76a:	d4 f4       	brge	.+52     	; 0x7a0 <main+0x394>
     76c:	40 91 21 01 	lds	r20, 0x0121
     770:	50 91 22 01 	lds	r21, 0x0122
     774:	20 91 23 01 	lds	r18, 0x0123
     778:	30 91 24 01 	lds	r19, 0x0124
     77c:	80 91 05 01 	lds	r24, 0x0105
     780:	90 91 06 01 	lds	r25, 0x0106
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	84 17       	cp	r24, r20
     78a:	95 07       	cpc	r25, r21
     78c:	4c f4       	brge	.+18     	; 0x7a0 <main+0x394>
						desired_beacon |= beaconID3;
     78e:	90 91 27 01 	lds	r25, 0x0127
     792:	80 91 04 01 	lds	r24, 0x0104
     796:	89 2b       	or	r24, r25
     798:	80 93 27 01 	sts	0x0127, r24
						PORTB |= (1<<PORTB2);
     79c:	2a 9a       	sbi	0x05, 2	; 5
     79e:	30 c0       	rjmp	.+96     	; 0x800 <main+0x3f4>
						//while(1) { cli(); }
					} else if ((beaconID3_time>(beaconID1_time+center_threshold)) && (beaconID3_time>(beaconID1_time+center_threshold))) {
     7a0:	40 91 23 01 	lds	r20, 0x0123
     7a4:	50 91 24 01 	lds	r21, 0x0124
     7a8:	20 91 25 01 	lds	r18, 0x0125
     7ac:	30 91 26 01 	lds	r19, 0x0126
     7b0:	80 91 05 01 	lds	r24, 0x0105
     7b4:	90 91 06 01 	lds	r25, 0x0106
     7b8:	82 0f       	add	r24, r18
     7ba:	93 1f       	adc	r25, r19
     7bc:	84 17       	cp	r24, r20
     7be:	95 07       	cpc	r25, r21
     7c0:	d4 f4       	brge	.+52     	; 0x7f6 <main+0x3ea>
     7c2:	40 91 23 01 	lds	r20, 0x0123
     7c6:	50 91 24 01 	lds	r21, 0x0124
     7ca:	20 91 25 01 	lds	r18, 0x0125
     7ce:	30 91 26 01 	lds	r19, 0x0126
     7d2:	80 91 05 01 	lds	r24, 0x0105
     7d6:	90 91 06 01 	lds	r25, 0x0106
     7da:	82 0f       	add	r24, r18
     7dc:	93 1f       	adc	r25, r19
     7de:	84 17       	cp	r24, r20
     7e0:	95 07       	cpc	r25, r21
     7e2:	4c f4       	brge	.+18     	; 0x7f6 <main+0x3ea>
						desired_beacon |= beaconID1;
     7e4:	90 91 27 01 	lds	r25, 0x0127
     7e8:	80 91 02 01 	lds	r24, 0x0102
     7ec:	89 2b       	or	r24, r25
     7ee:	80 93 27 01 	sts	0x0127, r24
						PORTB |= (1<<PORTB0);
     7f2:	28 9a       	sbi	0x05, 0	; 5
     7f4:	05 c0       	rjmp	.+10     	; 0x800 <main+0x3f4>
						//while(1) { cli(); }
					} else { // within centering threshold, end of program
						while(1) { 
							cli();
     7f6:	f8 94       	cli
							PORTB |= (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2); 
     7f8:	85 b1       	in	r24, 0x05	; 5
     7fa:	87 60       	ori	r24, 0x07	; 7
     7fc:	85 b9       	out	0x05, r24	; 5
     7fe:	fb cf       	rjmp	.-10     	; 0x7f6 <main+0x3ea>
						}
					}

					beacons_rcvd=4; // indicated that direction of motion has been decided
     800:	a0 92 20 01 	sts	0x0120, r10
					
				}
				// execute movement
				if (beacons_rcvd==4) {
     804:	80 91 20 01 	lds	r24, 0x0120
     808:	84 30       	cpi	r24, 0x04	; 4
     80a:	61 f5       	brne	.+88     	; 0x864 <main+0x458>
					if(lastRcv==desired_beacon) { // if last message is from desired beacon -> start movement sequence
     80c:	90 91 1c 01 	lds	r25, 0x011C
     810:	80 91 27 01 	lds	r24, 0x0127
     814:	98 17       	cp	r25, r24
     816:	31 f5       	brne	.+76     	; 0x864 <main+0x458>
						cli(); // disable all interrupts so that movement can be executed
     818:	f8 94       	cli
						PORTB |= (1<<PORTB2);
     81a:	2a 9a       	sbi	0x05, 2	; 5
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	04 c0       	rjmp	.+8      	; 0x82a <main+0x41e>
     822:	f7 01       	movw	r30, r14
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <main+0x418>

						// delay for detach time
						dd = 0;
						while (dd<detach_time) {
							_delay_us(150);
							dd+=1;
     828:	01 96       	adiw	r24, 0x01	; 1
						cli(); // disable all interrupts so that movement can be executed
						PORTB |= (1<<PORTB2);

						// delay for detach time
						dd = 0;
						while (dd<detach_time) {
     82a:	80 17       	cp	r24, r16
     82c:	91 07       	cpc	r25, r17
     82e:	cc f3       	brlt	.-14     	; 0x822 <main+0x416>
							_delay_us(150);
							dd+=1;
						}					
						detach(80);
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	80 ea       	ldi	r24, 0xA0	; 160
     836:	92 e4       	ldi	r25, 0x42	; 66
     838:	0e 94 9e 01 	call	0x33c	; 0x33c <detach>
						// reset movement variables
						beaconID1_time = 0;
     83c:	10 92 26 01 	sts	0x0126, r1
     840:	10 92 25 01 	sts	0x0125, r1
						beaconID2_time = 0;
     844:	10 92 22 01 	sts	0x0122, r1
     848:	10 92 21 01 	sts	0x0121, r1
						beaconID3_time = 0;
     84c:	10 92 24 01 	sts	0x0124, r1
     850:	10 92 23 01 	sts	0x0123, r1
						beacons_rcvd = 0;
     854:	10 92 20 01 	sts	0x0120, r1
						desired_beacon = 0;
     858:	10 92 27 01 	sts	0x0127, r1
						PORTB &= ~( (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0) );
     85c:	85 b1       	in	r24, 0x05	; 5
     85e:	88 7f       	andi	r24, 0xF8	; 248
     860:	85 b9       	out	0x05, r24	; 5
						sei(); // re-enable interrupts again to plan next movement
     862:	78 94       	sei
					}
				}

				rcv_sx = 0;
     864:	10 92 19 01 	sts	0x0119, r1
     868:	10 92 18 01 	sts	0x0118, r1
     86c:	53 ce       	rjmp	.-858    	; 0x514 <main+0x108>

0000086e <__fixunssfsi>:
     86e:	ef 92       	push	r14
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	7b 01       	movw	r14, r22
     878:	8c 01       	movw	r16, r24
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	5f e4       	ldi	r21, 0x4F	; 79
     882:	0e 94 37 07 	call	0xe6e	; 0xe6e <__gesf2>
     886:	88 23       	and	r24, r24
     888:	8c f0       	brlt	.+34     	; 0x8ac <__fixunssfsi+0x3e>
     88a:	c8 01       	movw	r24, r16
     88c:	b7 01       	movw	r22, r14
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	5f e4       	ldi	r21, 0x4F	; 79
     896:	0e 94 af 05 	call	0xb5e	; 0xb5e <__subsf3>
     89a:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	20 50       	subi	r18, 0x00	; 0
     8a4:	30 40       	sbci	r19, 0x00	; 0
     8a6:	40 40       	sbci	r20, 0x00	; 0
     8a8:	50 48       	sbci	r21, 0x80	; 128
     8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <__fixunssfsi+0x4a>
     8ac:	c8 01       	movw	r24, r16
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 97 07 	call	0xf2e	; 0xf2e <__fixsfsi>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	b9 01       	movw	r22, r18
     8ba:	ca 01       	movw	r24, r20
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	08 95       	ret

000008c6 <_fpadd_parts>:
     8c6:	a0 e0       	ldi	r26, 0x00	; 0
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
     8ca:	e9 e6       	ldi	r30, 0x69	; 105
     8cc:	f4 e0       	ldi	r31, 0x04	; 4
     8ce:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__prologue_saves__>
     8d2:	dc 01       	movw	r26, r24
     8d4:	2b 01       	movw	r4, r22
     8d6:	fa 01       	movw	r30, r20
     8d8:	9c 91       	ld	r25, X
     8da:	92 30       	cpi	r25, 0x02	; 2
     8dc:	08 f4       	brcc	.+2      	; 0x8e0 <_fpadd_parts+0x1a>
     8de:	39 c1       	rjmp	.+626    	; 0xb52 <__stack+0x253>
     8e0:	eb 01       	movw	r28, r22
     8e2:	88 81       	ld	r24, Y
     8e4:	82 30       	cpi	r24, 0x02	; 2
     8e6:	08 f4       	brcc	.+2      	; 0x8ea <_fpadd_parts+0x24>
     8e8:	33 c1       	rjmp	.+614    	; 0xb50 <__stack+0x251>
     8ea:	94 30       	cpi	r25, 0x04	; 4
     8ec:	69 f4       	brne	.+26     	; 0x908 <__stack+0x9>
     8ee:	84 30       	cpi	r24, 0x04	; 4
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <_fpadd_parts+0x2e>
     8f2:	2f c1       	rjmp	.+606    	; 0xb52 <__stack+0x253>
     8f4:	11 96       	adiw	r26, 0x01	; 1
     8f6:	9c 91       	ld	r25, X
     8f8:	11 97       	sbiw	r26, 0x01	; 1
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	98 17       	cp	r25, r24
     8fe:	09 f4       	brne	.+2      	; 0x902 <__stack+0x3>
     900:	28 c1       	rjmp	.+592    	; 0xb52 <__stack+0x253>
     902:	a7 e0       	ldi	r26, 0x07	; 7
     904:	b1 e0       	ldi	r27, 0x01	; 1
     906:	25 c1       	rjmp	.+586    	; 0xb52 <__stack+0x253>
     908:	84 30       	cpi	r24, 0x04	; 4
     90a:	09 f4       	brne	.+2      	; 0x90e <__stack+0xf>
     90c:	21 c1       	rjmp	.+578    	; 0xb50 <__stack+0x251>
     90e:	82 30       	cpi	r24, 0x02	; 2
     910:	a9 f4       	brne	.+42     	; 0x93c <__stack+0x3d>
     912:	92 30       	cpi	r25, 0x02	; 2
     914:	09 f0       	breq	.+2      	; 0x918 <__stack+0x19>
     916:	1d c1       	rjmp	.+570    	; 0xb52 <__stack+0x253>
     918:	9a 01       	movw	r18, r20
     91a:	ad 01       	movw	r20, r26
     91c:	88 e0       	ldi	r24, 0x08	; 8
     91e:	ea 01       	movw	r28, r20
     920:	09 90       	ld	r0, Y+
     922:	ae 01       	movw	r20, r28
     924:	e9 01       	movw	r28, r18
     926:	09 92       	st	Y+, r0
     928:	9e 01       	movw	r18, r28
     92a:	81 50       	subi	r24, 0x01	; 1
     92c:	c1 f7       	brne	.-16     	; 0x91e <__stack+0x1f>
     92e:	e2 01       	movw	r28, r4
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	11 96       	adiw	r26, 0x01	; 1
     934:	9c 91       	ld	r25, X
     936:	89 23       	and	r24, r25
     938:	81 83       	std	Z+1, r24	; 0x01
     93a:	08 c1       	rjmp	.+528    	; 0xb4c <__stack+0x24d>
     93c:	92 30       	cpi	r25, 0x02	; 2
     93e:	09 f4       	brne	.+2      	; 0x942 <__stack+0x43>
     940:	07 c1       	rjmp	.+526    	; 0xb50 <__stack+0x251>
     942:	12 96       	adiw	r26, 0x02	; 2
     944:	2d 90       	ld	r2, X+
     946:	3c 90       	ld	r3, X
     948:	13 97       	sbiw	r26, 0x03	; 3
     94a:	eb 01       	movw	r28, r22
     94c:	8a 81       	ldd	r24, Y+2	; 0x02
     94e:	9b 81       	ldd	r25, Y+3	; 0x03
     950:	14 96       	adiw	r26, 0x04	; 4
     952:	ad 90       	ld	r10, X+
     954:	bd 90       	ld	r11, X+
     956:	cd 90       	ld	r12, X+
     958:	dc 90       	ld	r13, X
     95a:	17 97       	sbiw	r26, 0x07	; 7
     95c:	ec 80       	ldd	r14, Y+4	; 0x04
     95e:	fd 80       	ldd	r15, Y+5	; 0x05
     960:	0e 81       	ldd	r16, Y+6	; 0x06
     962:	1f 81       	ldd	r17, Y+7	; 0x07
     964:	91 01       	movw	r18, r2
     966:	28 1b       	sub	r18, r24
     968:	39 0b       	sbc	r19, r25
     96a:	b9 01       	movw	r22, r18
     96c:	37 ff       	sbrs	r19, 7
     96e:	04 c0       	rjmp	.+8      	; 0x978 <__stack+0x79>
     970:	66 27       	eor	r22, r22
     972:	77 27       	eor	r23, r23
     974:	62 1b       	sub	r22, r18
     976:	73 0b       	sbc	r23, r19
     978:	60 32       	cpi	r22, 0x20	; 32
     97a:	71 05       	cpc	r23, r1
     97c:	0c f0       	brlt	.+2      	; 0x980 <__stack+0x81>
     97e:	61 c0       	rjmp	.+194    	; 0xa42 <__stack+0x143>
     980:	12 16       	cp	r1, r18
     982:	13 06       	cpc	r1, r19
     984:	6c f5       	brge	.+90     	; 0x9e0 <__stack+0xe1>
     986:	37 01       	movw	r6, r14
     988:	48 01       	movw	r8, r16
     98a:	06 2e       	mov	r0, r22
     98c:	04 c0       	rjmp	.+8      	; 0x996 <__stack+0x97>
     98e:	96 94       	lsr	r9
     990:	87 94       	ror	r8
     992:	77 94       	ror	r7
     994:	67 94       	ror	r6
     996:	0a 94       	dec	r0
     998:	d2 f7       	brpl	.-12     	; 0x98e <__stack+0x8f>
     99a:	21 e0       	ldi	r18, 0x01	; 1
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__stack+0xad>
     9a4:	22 0f       	add	r18, r18
     9a6:	33 1f       	adc	r19, r19
     9a8:	44 1f       	adc	r20, r20
     9aa:	55 1f       	adc	r21, r21
     9ac:	6a 95       	dec	r22
     9ae:	d2 f7       	brpl	.-12     	; 0x9a4 <__stack+0xa5>
     9b0:	21 50       	subi	r18, 0x01	; 1
     9b2:	30 40       	sbci	r19, 0x00	; 0
     9b4:	40 40       	sbci	r20, 0x00	; 0
     9b6:	50 40       	sbci	r21, 0x00	; 0
     9b8:	2e 21       	and	r18, r14
     9ba:	3f 21       	and	r19, r15
     9bc:	40 23       	and	r20, r16
     9be:	51 23       	and	r21, r17
     9c0:	21 15       	cp	r18, r1
     9c2:	31 05       	cpc	r19, r1
     9c4:	41 05       	cpc	r20, r1
     9c6:	51 05       	cpc	r21, r1
     9c8:	21 f0       	breq	.+8      	; 0x9d2 <__stack+0xd3>
     9ca:	21 e0       	ldi	r18, 0x01	; 1
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	79 01       	movw	r14, r18
     9d4:	8a 01       	movw	r16, r20
     9d6:	e6 28       	or	r14, r6
     9d8:	f7 28       	or	r15, r7
     9da:	08 29       	or	r16, r8
     9dc:	19 29       	or	r17, r9
     9de:	3c c0       	rjmp	.+120    	; 0xa58 <__stack+0x159>
     9e0:	23 2b       	or	r18, r19
     9e2:	d1 f1       	breq	.+116    	; 0xa58 <__stack+0x159>
     9e4:	26 0e       	add	r2, r22
     9e6:	37 1e       	adc	r3, r23
     9e8:	35 01       	movw	r6, r10
     9ea:	46 01       	movw	r8, r12
     9ec:	06 2e       	mov	r0, r22
     9ee:	04 c0       	rjmp	.+8      	; 0x9f8 <__stack+0xf9>
     9f0:	96 94       	lsr	r9
     9f2:	87 94       	ror	r8
     9f4:	77 94       	ror	r7
     9f6:	67 94       	ror	r6
     9f8:	0a 94       	dec	r0
     9fa:	d2 f7       	brpl	.-12     	; 0x9f0 <__stack+0xf1>
     9fc:	21 e0       	ldi	r18, 0x01	; 1
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__stack+0x10f>
     a06:	22 0f       	add	r18, r18
     a08:	33 1f       	adc	r19, r19
     a0a:	44 1f       	adc	r20, r20
     a0c:	55 1f       	adc	r21, r21
     a0e:	6a 95       	dec	r22
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__stack+0x107>
     a12:	21 50       	subi	r18, 0x01	; 1
     a14:	30 40       	sbci	r19, 0x00	; 0
     a16:	40 40       	sbci	r20, 0x00	; 0
     a18:	50 40       	sbci	r21, 0x00	; 0
     a1a:	2a 21       	and	r18, r10
     a1c:	3b 21       	and	r19, r11
     a1e:	4c 21       	and	r20, r12
     a20:	5d 21       	and	r21, r13
     a22:	21 15       	cp	r18, r1
     a24:	31 05       	cpc	r19, r1
     a26:	41 05       	cpc	r20, r1
     a28:	51 05       	cpc	r21, r1
     a2a:	21 f0       	breq	.+8      	; 0xa34 <__stack+0x135>
     a2c:	21 e0       	ldi	r18, 0x01	; 1
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	59 01       	movw	r10, r18
     a36:	6a 01       	movw	r12, r20
     a38:	a6 28       	or	r10, r6
     a3a:	b7 28       	or	r11, r7
     a3c:	c8 28       	or	r12, r8
     a3e:	d9 28       	or	r13, r9
     a40:	0b c0       	rjmp	.+22     	; 0xa58 <__stack+0x159>
     a42:	82 15       	cp	r24, r2
     a44:	93 05       	cpc	r25, r3
     a46:	2c f0       	brlt	.+10     	; 0xa52 <__stack+0x153>
     a48:	1c 01       	movw	r2, r24
     a4a:	aa 24       	eor	r10, r10
     a4c:	bb 24       	eor	r11, r11
     a4e:	65 01       	movw	r12, r10
     a50:	03 c0       	rjmp	.+6      	; 0xa58 <__stack+0x159>
     a52:	ee 24       	eor	r14, r14
     a54:	ff 24       	eor	r15, r15
     a56:	87 01       	movw	r16, r14
     a58:	11 96       	adiw	r26, 0x01	; 1
     a5a:	9c 91       	ld	r25, X
     a5c:	d2 01       	movw	r26, r4
     a5e:	11 96       	adiw	r26, 0x01	; 1
     a60:	8c 91       	ld	r24, X
     a62:	98 17       	cp	r25, r24
     a64:	09 f4       	brne	.+2      	; 0xa68 <__stack+0x169>
     a66:	45 c0       	rjmp	.+138    	; 0xaf2 <__stack+0x1f3>
     a68:	99 23       	and	r25, r25
     a6a:	39 f0       	breq	.+14     	; 0xa7a <__stack+0x17b>
     a6c:	a8 01       	movw	r20, r16
     a6e:	97 01       	movw	r18, r14
     a70:	2a 19       	sub	r18, r10
     a72:	3b 09       	sbc	r19, r11
     a74:	4c 09       	sbc	r20, r12
     a76:	5d 09       	sbc	r21, r13
     a78:	06 c0       	rjmp	.+12     	; 0xa86 <__stack+0x187>
     a7a:	a6 01       	movw	r20, r12
     a7c:	95 01       	movw	r18, r10
     a7e:	2e 19       	sub	r18, r14
     a80:	3f 09       	sbc	r19, r15
     a82:	40 0b       	sbc	r20, r16
     a84:	51 0b       	sbc	r21, r17
     a86:	57 fd       	sbrc	r21, 7
     a88:	08 c0       	rjmp	.+16     	; 0xa9a <__stack+0x19b>
     a8a:	11 82       	std	Z+1, r1	; 0x01
     a8c:	33 82       	std	Z+3, r3	; 0x03
     a8e:	22 82       	std	Z+2, r2	; 0x02
     a90:	24 83       	std	Z+4, r18	; 0x04
     a92:	35 83       	std	Z+5, r19	; 0x05
     a94:	46 83       	std	Z+6, r20	; 0x06
     a96:	57 83       	std	Z+7, r21	; 0x07
     a98:	1d c0       	rjmp	.+58     	; 0xad4 <__stack+0x1d5>
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	81 83       	std	Z+1, r24	; 0x01
     a9e:	33 82       	std	Z+3, r3	; 0x03
     aa0:	22 82       	std	Z+2, r2	; 0x02
     aa2:	88 27       	eor	r24, r24
     aa4:	99 27       	eor	r25, r25
     aa6:	dc 01       	movw	r26, r24
     aa8:	82 1b       	sub	r24, r18
     aaa:	93 0b       	sbc	r25, r19
     aac:	a4 0b       	sbc	r26, r20
     aae:	b5 0b       	sbc	r27, r21
     ab0:	84 83       	std	Z+4, r24	; 0x04
     ab2:	95 83       	std	Z+5, r25	; 0x05
     ab4:	a6 83       	std	Z+6, r26	; 0x06
     ab6:	b7 83       	std	Z+7, r27	; 0x07
     ab8:	0d c0       	rjmp	.+26     	; 0xad4 <__stack+0x1d5>
     aba:	22 0f       	add	r18, r18
     abc:	33 1f       	adc	r19, r19
     abe:	44 1f       	adc	r20, r20
     ac0:	55 1f       	adc	r21, r21
     ac2:	24 83       	std	Z+4, r18	; 0x04
     ac4:	35 83       	std	Z+5, r19	; 0x05
     ac6:	46 83       	std	Z+6, r20	; 0x06
     ac8:	57 83       	std	Z+7, r21	; 0x07
     aca:	82 81       	ldd	r24, Z+2	; 0x02
     acc:	93 81       	ldd	r25, Z+3	; 0x03
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	93 83       	std	Z+3, r25	; 0x03
     ad2:	82 83       	std	Z+2, r24	; 0x02
     ad4:	24 81       	ldd	r18, Z+4	; 0x04
     ad6:	35 81       	ldd	r19, Z+5	; 0x05
     ad8:	46 81       	ldd	r20, Z+6	; 0x06
     ada:	57 81       	ldd	r21, Z+7	; 0x07
     adc:	da 01       	movw	r26, r20
     ade:	c9 01       	movw	r24, r18
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	a1 09       	sbc	r26, r1
     ae4:	b1 09       	sbc	r27, r1
     ae6:	8f 5f       	subi	r24, 0xFF	; 255
     ae8:	9f 4f       	sbci	r25, 0xFF	; 255
     aea:	af 4f       	sbci	r26, 0xFF	; 255
     aec:	bf 43       	sbci	r27, 0x3F	; 63
     aee:	28 f3       	brcs	.-54     	; 0xaba <__stack+0x1bb>
     af0:	0b c0       	rjmp	.+22     	; 0xb08 <__stack+0x209>
     af2:	91 83       	std	Z+1, r25	; 0x01
     af4:	33 82       	std	Z+3, r3	; 0x03
     af6:	22 82       	std	Z+2, r2	; 0x02
     af8:	ea 0c       	add	r14, r10
     afa:	fb 1c       	adc	r15, r11
     afc:	0c 1d       	adc	r16, r12
     afe:	1d 1d       	adc	r17, r13
     b00:	e4 82       	std	Z+4, r14	; 0x04
     b02:	f5 82       	std	Z+5, r15	; 0x05
     b04:	06 83       	std	Z+6, r16	; 0x06
     b06:	17 83       	std	Z+7, r17	; 0x07
     b08:	83 e0       	ldi	r24, 0x03	; 3
     b0a:	80 83       	st	Z, r24
     b0c:	24 81       	ldd	r18, Z+4	; 0x04
     b0e:	35 81       	ldd	r19, Z+5	; 0x05
     b10:	46 81       	ldd	r20, Z+6	; 0x06
     b12:	57 81       	ldd	r21, Z+7	; 0x07
     b14:	57 ff       	sbrs	r21, 7
     b16:	1a c0       	rjmp	.+52     	; 0xb4c <__stack+0x24d>
     b18:	c9 01       	movw	r24, r18
     b1a:	aa 27       	eor	r26, r26
     b1c:	97 fd       	sbrc	r25, 7
     b1e:	a0 95       	com	r26
     b20:	ba 2f       	mov	r27, r26
     b22:	81 70       	andi	r24, 0x01	; 1
     b24:	90 70       	andi	r25, 0x00	; 0
     b26:	a0 70       	andi	r26, 0x00	; 0
     b28:	b0 70       	andi	r27, 0x00	; 0
     b2a:	56 95       	lsr	r21
     b2c:	47 95       	ror	r20
     b2e:	37 95       	ror	r19
     b30:	27 95       	ror	r18
     b32:	82 2b       	or	r24, r18
     b34:	93 2b       	or	r25, r19
     b36:	a4 2b       	or	r26, r20
     b38:	b5 2b       	or	r27, r21
     b3a:	84 83       	std	Z+4, r24	; 0x04
     b3c:	95 83       	std	Z+5, r25	; 0x05
     b3e:	a6 83       	std	Z+6, r26	; 0x06
     b40:	b7 83       	std	Z+7, r27	; 0x07
     b42:	82 81       	ldd	r24, Z+2	; 0x02
     b44:	93 81       	ldd	r25, Z+3	; 0x03
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	93 83       	std	Z+3, r25	; 0x03
     b4a:	82 83       	std	Z+2, r24	; 0x02
     b4c:	df 01       	movw	r26, r30
     b4e:	01 c0       	rjmp	.+2      	; 0xb52 <__stack+0x253>
     b50:	d2 01       	movw	r26, r4
     b52:	cd 01       	movw	r24, r26
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	e2 e1       	ldi	r30, 0x12	; 18
     b5a:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__epilogue_restores__>

00000b5e <__subsf3>:
     b5e:	a0 e2       	ldi	r26, 0x20	; 32
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e5 eb       	ldi	r30, 0xB5	; 181
     b64:	f5 e0       	ldi	r31, 0x05	; 5
     b66:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__prologue_saves__+0x18>
     b6a:	69 83       	std	Y+1, r22	; 0x01
     b6c:	7a 83       	std	Y+2, r23	; 0x02
     b6e:	8b 83       	std	Y+3, r24	; 0x03
     b70:	9c 83       	std	Y+4, r25	; 0x04
     b72:	2d 83       	std	Y+5, r18	; 0x05
     b74:	3e 83       	std	Y+6, r19	; 0x06
     b76:	4f 83       	std	Y+7, r20	; 0x07
     b78:	58 87       	std	Y+8, r21	; 0x08
     b7a:	e9 e0       	ldi	r30, 0x09	; 9
     b7c:	ee 2e       	mov	r14, r30
     b7e:	f1 2c       	mov	r15, r1
     b80:	ec 0e       	add	r14, r28
     b82:	fd 1e       	adc	r15, r29
     b84:	ce 01       	movw	r24, r28
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	b7 01       	movw	r22, r14
     b8a:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     b8e:	8e 01       	movw	r16, r28
     b90:	0f 5e       	subi	r16, 0xEF	; 239
     b92:	1f 4f       	sbci	r17, 0xFF	; 255
     b94:	ce 01       	movw	r24, r28
     b96:	05 96       	adiw	r24, 0x05	; 5
     b98:	b8 01       	movw	r22, r16
     b9a:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     b9e:	8a 89       	ldd	r24, Y+18	; 0x12
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	89 27       	eor	r24, r25
     ba4:	8a 8b       	std	Y+18, r24	; 0x12
     ba6:	c7 01       	movw	r24, r14
     ba8:	b8 01       	movw	r22, r16
     baa:	ae 01       	movw	r20, r28
     bac:	47 5e       	subi	r20, 0xE7	; 231
     bae:	5f 4f       	sbci	r21, 0xFF	; 255
     bb0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_fpadd_parts>
     bb4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__pack_f>
     bb8:	a0 96       	adiw	r28, 0x20	; 32
     bba:	e6 e0       	ldi	r30, 0x06	; 6
     bbc:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__epilogue_restores__+0x18>

00000bc0 <__addsf3>:
     bc0:	a0 e2       	ldi	r26, 0x20	; 32
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e6 ee       	ldi	r30, 0xE6	; 230
     bc6:	f5 e0       	ldi	r31, 0x05	; 5
     bc8:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__prologue_saves__+0x18>
     bcc:	69 83       	std	Y+1, r22	; 0x01
     bce:	7a 83       	std	Y+2, r23	; 0x02
     bd0:	8b 83       	std	Y+3, r24	; 0x03
     bd2:	9c 83       	std	Y+4, r25	; 0x04
     bd4:	2d 83       	std	Y+5, r18	; 0x05
     bd6:	3e 83       	std	Y+6, r19	; 0x06
     bd8:	4f 83       	std	Y+7, r20	; 0x07
     bda:	58 87       	std	Y+8, r21	; 0x08
     bdc:	f9 e0       	ldi	r31, 0x09	; 9
     bde:	ef 2e       	mov	r14, r31
     be0:	f1 2c       	mov	r15, r1
     be2:	ec 0e       	add	r14, r28
     be4:	fd 1e       	adc	r15, r29
     be6:	ce 01       	movw	r24, r28
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	b7 01       	movw	r22, r14
     bec:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     bf0:	8e 01       	movw	r16, r28
     bf2:	0f 5e       	subi	r16, 0xEF	; 239
     bf4:	1f 4f       	sbci	r17, 0xFF	; 255
     bf6:	ce 01       	movw	r24, r28
     bf8:	05 96       	adiw	r24, 0x05	; 5
     bfa:	b8 01       	movw	r22, r16
     bfc:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     c00:	c7 01       	movw	r24, r14
     c02:	b8 01       	movw	r22, r16
     c04:	ae 01       	movw	r20, r28
     c06:	47 5e       	subi	r20, 0xE7	; 231
     c08:	5f 4f       	sbci	r21, 0xFF	; 255
     c0a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_fpadd_parts>
     c0e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__pack_f>
     c12:	a0 96       	adiw	r28, 0x20	; 32
     c14:	e6 e0       	ldi	r30, 0x06	; 6
     c16:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__epilogue_restores__+0x18>

00000c1a <__mulsf3>:
     c1a:	a0 e2       	ldi	r26, 0x20	; 32
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e3 e1       	ldi	r30, 0x13	; 19
     c20:	f6 e0       	ldi	r31, 0x06	; 6
     c22:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__prologue_saves__>
     c26:	69 83       	std	Y+1, r22	; 0x01
     c28:	7a 83       	std	Y+2, r23	; 0x02
     c2a:	8b 83       	std	Y+3, r24	; 0x03
     c2c:	9c 83       	std	Y+4, r25	; 0x04
     c2e:	2d 83       	std	Y+5, r18	; 0x05
     c30:	3e 83       	std	Y+6, r19	; 0x06
     c32:	4f 83       	std	Y+7, r20	; 0x07
     c34:	58 87       	std	Y+8, r21	; 0x08
     c36:	ce 01       	movw	r24, r28
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	be 01       	movw	r22, r28
     c3c:	67 5f       	subi	r22, 0xF7	; 247
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     c44:	ce 01       	movw	r24, r28
     c46:	05 96       	adiw	r24, 0x05	; 5
     c48:	be 01       	movw	r22, r28
     c4a:	6f 5e       	subi	r22, 0xEF	; 239
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     c52:	99 85       	ldd	r25, Y+9	; 0x09
     c54:	92 30       	cpi	r25, 0x02	; 2
     c56:	88 f0       	brcs	.+34     	; 0xc7a <__mulsf3+0x60>
     c58:	89 89       	ldd	r24, Y+17	; 0x11
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	c8 f0       	brcs	.+50     	; 0xc90 <__mulsf3+0x76>
     c5e:	94 30       	cpi	r25, 0x04	; 4
     c60:	19 f4       	brne	.+6      	; 0xc68 <__mulsf3+0x4e>
     c62:	82 30       	cpi	r24, 0x02	; 2
     c64:	51 f4       	brne	.+20     	; 0xc7a <__mulsf3+0x60>
     c66:	04 c0       	rjmp	.+8      	; 0xc70 <__mulsf3+0x56>
     c68:	84 30       	cpi	r24, 0x04	; 4
     c6a:	29 f4       	brne	.+10     	; 0xc76 <__mulsf3+0x5c>
     c6c:	92 30       	cpi	r25, 0x02	; 2
     c6e:	81 f4       	brne	.+32     	; 0xc90 <__mulsf3+0x76>
     c70:	87 e0       	ldi	r24, 0x07	; 7
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	c6 c0       	rjmp	.+396    	; 0xe02 <__mulsf3+0x1e8>
     c76:	92 30       	cpi	r25, 0x02	; 2
     c78:	49 f4       	brne	.+18     	; 0xc8c <__mulsf3+0x72>
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7e:	8a 89       	ldd	r24, Y+18	; 0x12
     c80:	98 13       	cpse	r25, r24
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	2a 87       	std	Y+10, r18	; 0x0a
     c86:	ce 01       	movw	r24, r28
     c88:	09 96       	adiw	r24, 0x09	; 9
     c8a:	bb c0       	rjmp	.+374    	; 0xe02 <__mulsf3+0x1e8>
     c8c:	82 30       	cpi	r24, 0x02	; 2
     c8e:	49 f4       	brne	.+18     	; 0xca2 <__mulsf3+0x88>
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	9a 85       	ldd	r25, Y+10	; 0x0a
     c94:	8a 89       	ldd	r24, Y+18	; 0x12
     c96:	98 13       	cpse	r25, r24
     c98:	21 e0       	ldi	r18, 0x01	; 1
     c9a:	2a 8b       	std	Y+18, r18	; 0x12
     c9c:	ce 01       	movw	r24, r28
     c9e:	41 96       	adiw	r24, 0x11	; 17
     ca0:	b0 c0       	rjmp	.+352    	; 0xe02 <__mulsf3+0x1e8>
     ca2:	2d 84       	ldd	r2, Y+13	; 0x0d
     ca4:	3e 84       	ldd	r3, Y+14	; 0x0e
     ca6:	4f 84       	ldd	r4, Y+15	; 0x0f
     ca8:	58 88       	ldd	r5, Y+16	; 0x10
     caa:	6d 88       	ldd	r6, Y+21	; 0x15
     cac:	7e 88       	ldd	r7, Y+22	; 0x16
     cae:	8f 88       	ldd	r8, Y+23	; 0x17
     cb0:	98 8c       	ldd	r9, Y+24	; 0x18
     cb2:	ee 24       	eor	r14, r14
     cb4:	ff 24       	eor	r15, r15
     cb6:	87 01       	movw	r16, r14
     cb8:	aa 24       	eor	r10, r10
     cba:	bb 24       	eor	r11, r11
     cbc:	65 01       	movw	r12, r10
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	e0 e0       	ldi	r30, 0x00	; 0
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	c1 01       	movw	r24, r2
     ccc:	81 70       	andi	r24, 0x01	; 1
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	89 2b       	or	r24, r25
     cd2:	e9 f0       	breq	.+58     	; 0xd0e <__mulsf3+0xf4>
     cd4:	e6 0c       	add	r14, r6
     cd6:	f7 1c       	adc	r15, r7
     cd8:	08 1d       	adc	r16, r8
     cda:	19 1d       	adc	r17, r9
     cdc:	9a 01       	movw	r18, r20
     cde:	ab 01       	movw	r20, r22
     ce0:	2a 0d       	add	r18, r10
     ce2:	3b 1d       	adc	r19, r11
     ce4:	4c 1d       	adc	r20, r12
     ce6:	5d 1d       	adc	r21, r13
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	a0 e0       	ldi	r26, 0x00	; 0
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 14       	cp	r14, r6
     cf2:	f7 04       	cpc	r15, r7
     cf4:	08 05       	cpc	r16, r8
     cf6:	19 05       	cpc	r17, r9
     cf8:	20 f4       	brcc	.+8      	; 0xd02 <__mulsf3+0xe8>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ba 01       	movw	r22, r20
     d04:	a9 01       	movw	r20, r18
     d06:	48 0f       	add	r20, r24
     d08:	59 1f       	adc	r21, r25
     d0a:	6a 1f       	adc	r22, r26
     d0c:	7b 1f       	adc	r23, r27
     d0e:	aa 0c       	add	r10, r10
     d10:	bb 1c       	adc	r11, r11
     d12:	cc 1c       	adc	r12, r12
     d14:	dd 1c       	adc	r13, r13
     d16:	97 fe       	sbrs	r9, 7
     d18:	08 c0       	rjmp	.+16     	; 0xd2a <__mulsf3+0x110>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	a0 e0       	ldi	r26, 0x00	; 0
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	a8 2a       	or	r10, r24
     d24:	b9 2a       	or	r11, r25
     d26:	ca 2a       	or	r12, r26
     d28:	db 2a       	or	r13, r27
     d2a:	31 96       	adiw	r30, 0x01	; 1
     d2c:	e0 32       	cpi	r30, 0x20	; 32
     d2e:	f1 05       	cpc	r31, r1
     d30:	49 f0       	breq	.+18     	; 0xd44 <__mulsf3+0x12a>
     d32:	66 0c       	add	r6, r6
     d34:	77 1c       	adc	r7, r7
     d36:	88 1c       	adc	r8, r8
     d38:	99 1c       	adc	r9, r9
     d3a:	56 94       	lsr	r5
     d3c:	47 94       	ror	r4
     d3e:	37 94       	ror	r3
     d40:	27 94       	ror	r2
     d42:	c3 cf       	rjmp	.-122    	; 0xcca <__mulsf3+0xb0>
     d44:	fa 85       	ldd	r31, Y+10	; 0x0a
     d46:	ea 89       	ldd	r30, Y+18	; 0x12
     d48:	2b 89       	ldd	r18, Y+19	; 0x13
     d4a:	3c 89       	ldd	r19, Y+20	; 0x14
     d4c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d4e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d50:	28 0f       	add	r18, r24
     d52:	39 1f       	adc	r19, r25
     d54:	2e 5f       	subi	r18, 0xFE	; 254
     d56:	3f 4f       	sbci	r19, 0xFF	; 255
     d58:	17 c0       	rjmp	.+46     	; 0xd88 <__mulsf3+0x16e>
     d5a:	ca 01       	movw	r24, r20
     d5c:	81 70       	andi	r24, 0x01	; 1
     d5e:	90 70       	andi	r25, 0x00	; 0
     d60:	89 2b       	or	r24, r25
     d62:	61 f0       	breq	.+24     	; 0xd7c <__mulsf3+0x162>
     d64:	16 95       	lsr	r17
     d66:	07 95       	ror	r16
     d68:	f7 94       	ror	r15
     d6a:	e7 94       	ror	r14
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	a0 e0       	ldi	r26, 0x00	; 0
     d72:	b0 e8       	ldi	r27, 0x80	; 128
     d74:	e8 2a       	or	r14, r24
     d76:	f9 2a       	or	r15, r25
     d78:	0a 2b       	or	r16, r26
     d7a:	1b 2b       	or	r17, r27
     d7c:	76 95       	lsr	r23
     d7e:	67 95       	ror	r22
     d80:	57 95       	ror	r21
     d82:	47 95       	ror	r20
     d84:	2f 5f       	subi	r18, 0xFF	; 255
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	77 fd       	sbrc	r23, 7
     d8a:	e7 cf       	rjmp	.-50     	; 0xd5a <__mulsf3+0x140>
     d8c:	0c c0       	rjmp	.+24     	; 0xda6 <__mulsf3+0x18c>
     d8e:	44 0f       	add	r20, r20
     d90:	55 1f       	adc	r21, r21
     d92:	66 1f       	adc	r22, r22
     d94:	77 1f       	adc	r23, r23
     d96:	17 fd       	sbrc	r17, 7
     d98:	41 60       	ori	r20, 0x01	; 1
     d9a:	ee 0c       	add	r14, r14
     d9c:	ff 1c       	adc	r15, r15
     d9e:	00 1f       	adc	r16, r16
     da0:	11 1f       	adc	r17, r17
     da2:	21 50       	subi	r18, 0x01	; 1
     da4:	30 40       	sbci	r19, 0x00	; 0
     da6:	40 30       	cpi	r20, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	59 07       	cpc	r21, r25
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	69 07       	cpc	r22, r25
     db0:	90 e4       	ldi	r25, 0x40	; 64
     db2:	79 07       	cpc	r23, r25
     db4:	60 f3       	brcs	.-40     	; 0xd8e <__mulsf3+0x174>
     db6:	2b 8f       	std	Y+27, r18	; 0x1b
     db8:	3c 8f       	std	Y+28, r19	; 0x1c
     dba:	db 01       	movw	r26, r22
     dbc:	ca 01       	movw	r24, r20
     dbe:	8f 77       	andi	r24, 0x7F	; 127
     dc0:	90 70       	andi	r25, 0x00	; 0
     dc2:	a0 70       	andi	r26, 0x00	; 0
     dc4:	b0 70       	andi	r27, 0x00	; 0
     dc6:	80 34       	cpi	r24, 0x40	; 64
     dc8:	91 05       	cpc	r25, r1
     dca:	a1 05       	cpc	r26, r1
     dcc:	b1 05       	cpc	r27, r1
     dce:	61 f4       	brne	.+24     	; 0xde8 <__mulsf3+0x1ce>
     dd0:	47 fd       	sbrc	r20, 7
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__mulsf3+0x1ce>
     dd4:	e1 14       	cp	r14, r1
     dd6:	f1 04       	cpc	r15, r1
     dd8:	01 05       	cpc	r16, r1
     dda:	11 05       	cpc	r17, r1
     ddc:	29 f0       	breq	.+10     	; 0xde8 <__mulsf3+0x1ce>
     dde:	40 5c       	subi	r20, 0xC0	; 192
     de0:	5f 4f       	sbci	r21, 0xFF	; 255
     de2:	6f 4f       	sbci	r22, 0xFF	; 255
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	40 78       	andi	r20, 0x80	; 128
     de8:	1a 8e       	std	Y+26, r1	; 0x1a
     dea:	fe 17       	cp	r31, r30
     dec:	11 f0       	breq	.+4      	; 0xdf2 <__mulsf3+0x1d8>
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	8a 8f       	std	Y+26, r24	; 0x1a
     df2:	4d 8f       	std	Y+29, r20	; 0x1d
     df4:	5e 8f       	std	Y+30, r21	; 0x1e
     df6:	6f 8f       	std	Y+31, r22	; 0x1f
     df8:	78 a3       	std	Y+32, r23	; 0x20
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	89 8f       	std	Y+25, r24	; 0x19
     dfe:	ce 01       	movw	r24, r28
     e00:	49 96       	adiw	r24, 0x19	; 25
     e02:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__pack_f>
     e06:	a0 96       	adiw	r28, 0x20	; 32
     e08:	e2 e1       	ldi	r30, 0x12	; 18
     e0a:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__epilogue_restores__>

00000e0e <__gtsf2>:
     e0e:	a8 e1       	ldi	r26, 0x18	; 24
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ed e0       	ldi	r30, 0x0D	; 13
     e14:	f7 e0       	ldi	r31, 0x07	; 7
     e16:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__prologue_saves__+0x18>
     e1a:	69 83       	std	Y+1, r22	; 0x01
     e1c:	7a 83       	std	Y+2, r23	; 0x02
     e1e:	8b 83       	std	Y+3, r24	; 0x03
     e20:	9c 83       	std	Y+4, r25	; 0x04
     e22:	2d 83       	std	Y+5, r18	; 0x05
     e24:	3e 83       	std	Y+6, r19	; 0x06
     e26:	4f 83       	std	Y+7, r20	; 0x07
     e28:	58 87       	std	Y+8, r21	; 0x08
     e2a:	89 e0       	ldi	r24, 0x09	; 9
     e2c:	e8 2e       	mov	r14, r24
     e2e:	f1 2c       	mov	r15, r1
     e30:	ec 0e       	add	r14, r28
     e32:	fd 1e       	adc	r15, r29
     e34:	ce 01       	movw	r24, r28
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	b7 01       	movw	r22, r14
     e3a:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     e3e:	8e 01       	movw	r16, r28
     e40:	0f 5e       	subi	r16, 0xEF	; 239
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
     e44:	ce 01       	movw	r24, r28
     e46:	05 96       	adiw	r24, 0x05	; 5
     e48:	b8 01       	movw	r22, r16
     e4a:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     e4e:	89 85       	ldd	r24, Y+9	; 0x09
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	40 f0       	brcs	.+16     	; 0xe64 <__gtsf2+0x56>
     e54:	89 89       	ldd	r24, Y+17	; 0x11
     e56:	82 30       	cpi	r24, 0x02	; 2
     e58:	28 f0       	brcs	.+10     	; 0xe64 <__gtsf2+0x56>
     e5a:	c7 01       	movw	r24, r14
     e5c:	b8 01       	movw	r22, r16
     e5e:	0e 94 38 09 	call	0x1270	; 0x1270 <__fpcmp_parts_f>
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <__gtsf2+0x58>
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	68 96       	adiw	r28, 0x18	; 24
     e68:	e6 e0       	ldi	r30, 0x06	; 6
     e6a:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__epilogue_restores__+0x18>

00000e6e <__gesf2>:
     e6e:	a8 e1       	ldi	r26, 0x18	; 24
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	ed e3       	ldi	r30, 0x3D	; 61
     e74:	f7 e0       	ldi	r31, 0x07	; 7
     e76:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__prologue_saves__+0x18>
     e7a:	69 83       	std	Y+1, r22	; 0x01
     e7c:	7a 83       	std	Y+2, r23	; 0x02
     e7e:	8b 83       	std	Y+3, r24	; 0x03
     e80:	9c 83       	std	Y+4, r25	; 0x04
     e82:	2d 83       	std	Y+5, r18	; 0x05
     e84:	3e 83       	std	Y+6, r19	; 0x06
     e86:	4f 83       	std	Y+7, r20	; 0x07
     e88:	58 87       	std	Y+8, r21	; 0x08
     e8a:	89 e0       	ldi	r24, 0x09	; 9
     e8c:	e8 2e       	mov	r14, r24
     e8e:	f1 2c       	mov	r15, r1
     e90:	ec 0e       	add	r14, r28
     e92:	fd 1e       	adc	r15, r29
     e94:	ce 01       	movw	r24, r28
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	b7 01       	movw	r22, r14
     e9a:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     e9e:	8e 01       	movw	r16, r28
     ea0:	0f 5e       	subi	r16, 0xEF	; 239
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
     ea4:	ce 01       	movw	r24, r28
     ea6:	05 96       	adiw	r24, 0x05	; 5
     ea8:	b8 01       	movw	r22, r16
     eaa:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     eae:	89 85       	ldd	r24, Y+9	; 0x09
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	40 f0       	brcs	.+16     	; 0xec4 <__gesf2+0x56>
     eb4:	89 89       	ldd	r24, Y+17	; 0x11
     eb6:	82 30       	cpi	r24, 0x02	; 2
     eb8:	28 f0       	brcs	.+10     	; 0xec4 <__gesf2+0x56>
     eba:	c7 01       	movw	r24, r14
     ebc:	b8 01       	movw	r22, r16
     ebe:	0e 94 38 09 	call	0x1270	; 0x1270 <__fpcmp_parts_f>
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <__gesf2+0x58>
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	68 96       	adiw	r28, 0x18	; 24
     ec8:	e6 e0       	ldi	r30, 0x06	; 6
     eca:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__epilogue_restores__+0x18>

00000ece <__ltsf2>:
     ece:	a8 e1       	ldi	r26, 0x18	; 24
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ed e6       	ldi	r30, 0x6D	; 109
     ed4:	f7 e0       	ldi	r31, 0x07	; 7
     ed6:	0c 94 c4 09 	jmp	0x1388	; 0x1388 <__prologue_saves__+0x18>
     eda:	69 83       	std	Y+1, r22	; 0x01
     edc:	7a 83       	std	Y+2, r23	; 0x02
     ede:	8b 83       	std	Y+3, r24	; 0x03
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	2d 83       	std	Y+5, r18	; 0x05
     ee4:	3e 83       	std	Y+6, r19	; 0x06
     ee6:	4f 83       	std	Y+7, r20	; 0x07
     ee8:	58 87       	std	Y+8, r21	; 0x08
     eea:	89 e0       	ldi	r24, 0x09	; 9
     eec:	e8 2e       	mov	r14, r24
     eee:	f1 2c       	mov	r15, r1
     ef0:	ec 0e       	add	r14, r28
     ef2:	fd 1e       	adc	r15, r29
     ef4:	ce 01       	movw	r24, r28
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	b7 01       	movw	r22, r14
     efa:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     efe:	8e 01       	movw	r16, r28
     f00:	0f 5e       	subi	r16, 0xEF	; 239
     f02:	1f 4f       	sbci	r17, 0xFF	; 255
     f04:	ce 01       	movw	r24, r28
     f06:	05 96       	adiw	r24, 0x05	; 5
     f08:	b8 01       	movw	r22, r16
     f0a:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     f0e:	89 85       	ldd	r24, Y+9	; 0x09
     f10:	82 30       	cpi	r24, 0x02	; 2
     f12:	40 f0       	brcs	.+16     	; 0xf24 <__ltsf2+0x56>
     f14:	89 89       	ldd	r24, Y+17	; 0x11
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	28 f0       	brcs	.+10     	; 0xf24 <__ltsf2+0x56>
     f1a:	c7 01       	movw	r24, r14
     f1c:	b8 01       	movw	r22, r16
     f1e:	0e 94 38 09 	call	0x1270	; 0x1270 <__fpcmp_parts_f>
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <__ltsf2+0x58>
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	68 96       	adiw	r28, 0x18	; 24
     f28:	e6 e0       	ldi	r30, 0x06	; 6
     f2a:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__epilogue_restores__+0x18>

00000f2e <__fixsfsi>:
     f2e:	ac e0       	ldi	r26, 0x0C	; 12
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ed e9       	ldi	r30, 0x9D	; 157
     f34:	f7 e0       	ldi	r31, 0x07	; 7
     f36:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__prologue_saves__+0x20>
     f3a:	69 83       	std	Y+1, r22	; 0x01
     f3c:	7a 83       	std	Y+2, r23	; 0x02
     f3e:	8b 83       	std	Y+3, r24	; 0x03
     f40:	9c 83       	std	Y+4, r25	; 0x04
     f42:	ce 01       	movw	r24, r28
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	be 01       	movw	r22, r28
     f48:	6b 5f       	subi	r22, 0xFB	; 251
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	0e 94 c0 08 	call	0x1180	; 0x1180 <__unpack_f>
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	82 30       	cpi	r24, 0x02	; 2
     f54:	61 f1       	breq	.+88     	; 0xfae <__fixsfsi+0x80>
     f56:	82 30       	cpi	r24, 0x02	; 2
     f58:	50 f1       	brcs	.+84     	; 0xfae <__fixsfsi+0x80>
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	21 f4       	brne	.+8      	; 0xf66 <__fixsfsi+0x38>
     f5e:	8e 81       	ldd	r24, Y+6	; 0x06
     f60:	88 23       	and	r24, r24
     f62:	51 f1       	breq	.+84     	; 0xfb8 <__fixsfsi+0x8a>
     f64:	2e c0       	rjmp	.+92     	; 0xfc2 <__fixsfsi+0x94>
     f66:	2f 81       	ldd	r18, Y+7	; 0x07
     f68:	38 85       	ldd	r19, Y+8	; 0x08
     f6a:	37 fd       	sbrc	r19, 7
     f6c:	20 c0       	rjmp	.+64     	; 0xfae <__fixsfsi+0x80>
     f6e:	6e 81       	ldd	r22, Y+6	; 0x06
     f70:	2f 31       	cpi	r18, 0x1F	; 31
     f72:	31 05       	cpc	r19, r1
     f74:	1c f0       	brlt	.+6      	; 0xf7c <__fixsfsi+0x4e>
     f76:	66 23       	and	r22, r22
     f78:	f9 f0       	breq	.+62     	; 0xfb8 <__fixsfsi+0x8a>
     f7a:	23 c0       	rjmp	.+70     	; 0xfc2 <__fixsfsi+0x94>
     f7c:	8e e1       	ldi	r24, 0x1E	; 30
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	82 1b       	sub	r24, r18
     f82:	93 0b       	sbc	r25, r19
     f84:	29 85       	ldd	r18, Y+9	; 0x09
     f86:	3a 85       	ldd	r19, Y+10	; 0x0a
     f88:	4b 85       	ldd	r20, Y+11	; 0x0b
     f8a:	5c 85       	ldd	r21, Y+12	; 0x0c
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <__fixsfsi+0x68>
     f8e:	56 95       	lsr	r21
     f90:	47 95       	ror	r20
     f92:	37 95       	ror	r19
     f94:	27 95       	ror	r18
     f96:	8a 95       	dec	r24
     f98:	d2 f7       	brpl	.-12     	; 0xf8e <__fixsfsi+0x60>
     f9a:	66 23       	and	r22, r22
     f9c:	b1 f0       	breq	.+44     	; 0xfca <__fixsfsi+0x9c>
     f9e:	50 95       	com	r21
     fa0:	40 95       	com	r20
     fa2:	30 95       	com	r19
     fa4:	21 95       	neg	r18
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	4f 4f       	sbci	r20, 0xFF	; 255
     faa:	5f 4f       	sbci	r21, 0xFF	; 255
     fac:	0e c0       	rjmp	.+28     	; 0xfca <__fixsfsi+0x9c>
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__fixsfsi+0x9c>
     fb8:	2f ef       	ldi	r18, 0xFF	; 255
     fba:	3f ef       	ldi	r19, 0xFF	; 255
     fbc:	4f ef       	ldi	r20, 0xFF	; 255
     fbe:	5f e7       	ldi	r21, 0x7F	; 127
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__fixsfsi+0x9c>
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	50 e8       	ldi	r21, 0x80	; 128
     fca:	b9 01       	movw	r22, r18
     fcc:	ca 01       	movw	r24, r20
     fce:	2c 96       	adiw	r28, 0x0c	; 12
     fd0:	e2 e0       	ldi	r30, 0x02	; 2
     fd2:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__epilogue_restores__+0x20>

00000fd6 <__pack_f>:
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	fc 01       	movw	r30, r24
     fe2:	e4 80       	ldd	r14, Z+4	; 0x04
     fe4:	f5 80       	ldd	r15, Z+5	; 0x05
     fe6:	06 81       	ldd	r16, Z+6	; 0x06
     fe8:	17 81       	ldd	r17, Z+7	; 0x07
     fea:	d1 80       	ldd	r13, Z+1	; 0x01
     fec:	80 81       	ld	r24, Z
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	48 f4       	brcc	.+18     	; 0x1004 <__pack_f+0x2e>
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a0 e1       	ldi	r26, 0x10	; 16
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e8 2a       	or	r14, r24
     ffc:	f9 2a       	or	r15, r25
     ffe:	0a 2b       	or	r16, r26
    1000:	1b 2b       	or	r17, r27
    1002:	a5 c0       	rjmp	.+330    	; 0x114e <__pack_f+0x178>
    1004:	84 30       	cpi	r24, 0x04	; 4
    1006:	09 f4       	brne	.+2      	; 0x100a <__pack_f+0x34>
    1008:	9f c0       	rjmp	.+318    	; 0x1148 <__pack_f+0x172>
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	21 f4       	brne	.+8      	; 0x1016 <__pack_f+0x40>
    100e:	ee 24       	eor	r14, r14
    1010:	ff 24       	eor	r15, r15
    1012:	87 01       	movw	r16, r14
    1014:	05 c0       	rjmp	.+10     	; 0x1020 <__pack_f+0x4a>
    1016:	e1 14       	cp	r14, r1
    1018:	f1 04       	cpc	r15, r1
    101a:	01 05       	cpc	r16, r1
    101c:	11 05       	cpc	r17, r1
    101e:	19 f4       	brne	.+6      	; 0x1026 <__pack_f+0x50>
    1020:	e0 e0       	ldi	r30, 0x00	; 0
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	96 c0       	rjmp	.+300    	; 0x1152 <__pack_f+0x17c>
    1026:	62 81       	ldd	r22, Z+2	; 0x02
    1028:	73 81       	ldd	r23, Z+3	; 0x03
    102a:	9f ef       	ldi	r25, 0xFF	; 255
    102c:	62 38       	cpi	r22, 0x82	; 130
    102e:	79 07       	cpc	r23, r25
    1030:	0c f0       	brlt	.+2      	; 0x1034 <__pack_f+0x5e>
    1032:	5b c0       	rjmp	.+182    	; 0x10ea <__pack_f+0x114>
    1034:	22 e8       	ldi	r18, 0x82	; 130
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	26 1b       	sub	r18, r22
    103a:	37 0b       	sbc	r19, r23
    103c:	2a 31       	cpi	r18, 0x1A	; 26
    103e:	31 05       	cpc	r19, r1
    1040:	2c f0       	brlt	.+10     	; 0x104c <__pack_f+0x76>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	50 e0       	ldi	r21, 0x00	; 0
    104a:	2a c0       	rjmp	.+84     	; 0x10a0 <__pack_f+0xca>
    104c:	b8 01       	movw	r22, r16
    104e:	a7 01       	movw	r20, r14
    1050:	02 2e       	mov	r0, r18
    1052:	04 c0       	rjmp	.+8      	; 0x105c <__pack_f+0x86>
    1054:	76 95       	lsr	r23
    1056:	67 95       	ror	r22
    1058:	57 95       	ror	r21
    105a:	47 95       	ror	r20
    105c:	0a 94       	dec	r0
    105e:	d2 f7       	brpl	.-12     	; 0x1054 <__pack_f+0x7e>
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a0 e0       	ldi	r26, 0x00	; 0
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <__pack_f+0x9c>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	aa 1f       	adc	r26, r26
    1070:	bb 1f       	adc	r27, r27
    1072:	2a 95       	dec	r18
    1074:	d2 f7       	brpl	.-12     	; 0x106a <__pack_f+0x94>
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	a1 09       	sbc	r26, r1
    107a:	b1 09       	sbc	r27, r1
    107c:	8e 21       	and	r24, r14
    107e:	9f 21       	and	r25, r15
    1080:	a0 23       	and	r26, r16
    1082:	b1 23       	and	r27, r17
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	a1 05       	cpc	r26, r1
    1088:	b1 05       	cpc	r27, r1
    108a:	21 f0       	breq	.+8      	; 0x1094 <__pack_f+0xbe>
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	9a 01       	movw	r18, r20
    1096:	ab 01       	movw	r20, r22
    1098:	28 2b       	or	r18, r24
    109a:	39 2b       	or	r19, r25
    109c:	4a 2b       	or	r20, r26
    109e:	5b 2b       	or	r21, r27
    10a0:	da 01       	movw	r26, r20
    10a2:	c9 01       	movw	r24, r18
    10a4:	8f 77       	andi	r24, 0x7F	; 127
    10a6:	90 70       	andi	r25, 0x00	; 0
    10a8:	a0 70       	andi	r26, 0x00	; 0
    10aa:	b0 70       	andi	r27, 0x00	; 0
    10ac:	80 34       	cpi	r24, 0x40	; 64
    10ae:	91 05       	cpc	r25, r1
    10b0:	a1 05       	cpc	r26, r1
    10b2:	b1 05       	cpc	r27, r1
    10b4:	39 f4       	brne	.+14     	; 0x10c4 <__pack_f+0xee>
    10b6:	27 ff       	sbrs	r18, 7
    10b8:	09 c0       	rjmp	.+18     	; 0x10cc <__pack_f+0xf6>
    10ba:	20 5c       	subi	r18, 0xC0	; 192
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	4f 4f       	sbci	r20, 0xFF	; 255
    10c0:	5f 4f       	sbci	r21, 0xFF	; 255
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <__pack_f+0xf6>
    10c4:	21 5c       	subi	r18, 0xC1	; 193
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	4f 4f       	sbci	r20, 0xFF	; 255
    10ca:	5f 4f       	sbci	r21, 0xFF	; 255
    10cc:	e0 e0       	ldi	r30, 0x00	; 0
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	20 30       	cpi	r18, 0x00	; 0
    10d2:	a0 e0       	ldi	r26, 0x00	; 0
    10d4:	3a 07       	cpc	r19, r26
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	4a 07       	cpc	r20, r26
    10da:	a0 e4       	ldi	r26, 0x40	; 64
    10dc:	5a 07       	cpc	r21, r26
    10de:	10 f0       	brcs	.+4      	; 0x10e4 <__pack_f+0x10e>
    10e0:	e1 e0       	ldi	r30, 0x01	; 1
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	79 01       	movw	r14, r18
    10e6:	8a 01       	movw	r16, r20
    10e8:	27 c0       	rjmp	.+78     	; 0x1138 <__pack_f+0x162>
    10ea:	60 38       	cpi	r22, 0x80	; 128
    10ec:	71 05       	cpc	r23, r1
    10ee:	64 f5       	brge	.+88     	; 0x1148 <__pack_f+0x172>
    10f0:	fb 01       	movw	r30, r22
    10f2:	e1 58       	subi	r30, 0x81	; 129
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	d8 01       	movw	r26, r16
    10f8:	c7 01       	movw	r24, r14
    10fa:	8f 77       	andi	r24, 0x7F	; 127
    10fc:	90 70       	andi	r25, 0x00	; 0
    10fe:	a0 70       	andi	r26, 0x00	; 0
    1100:	b0 70       	andi	r27, 0x00	; 0
    1102:	80 34       	cpi	r24, 0x40	; 64
    1104:	91 05       	cpc	r25, r1
    1106:	a1 05       	cpc	r26, r1
    1108:	b1 05       	cpc	r27, r1
    110a:	39 f4       	brne	.+14     	; 0x111a <__pack_f+0x144>
    110c:	e7 fe       	sbrs	r14, 7
    110e:	0d c0       	rjmp	.+26     	; 0x112a <__pack_f+0x154>
    1110:	80 e4       	ldi	r24, 0x40	; 64
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a0 e0       	ldi	r26, 0x00	; 0
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <__pack_f+0x14c>
    111a:	8f e3       	ldi	r24, 0x3F	; 63
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e8 0e       	add	r14, r24
    1124:	f9 1e       	adc	r15, r25
    1126:	0a 1f       	adc	r16, r26
    1128:	1b 1f       	adc	r17, r27
    112a:	17 ff       	sbrs	r17, 7
    112c:	05 c0       	rjmp	.+10     	; 0x1138 <__pack_f+0x162>
    112e:	16 95       	lsr	r17
    1130:	07 95       	ror	r16
    1132:	f7 94       	ror	r15
    1134:	e7 94       	ror	r14
    1136:	31 96       	adiw	r30, 0x01	; 1
    1138:	87 e0       	ldi	r24, 0x07	; 7
    113a:	16 95       	lsr	r17
    113c:	07 95       	ror	r16
    113e:	f7 94       	ror	r15
    1140:	e7 94       	ror	r14
    1142:	8a 95       	dec	r24
    1144:	d1 f7       	brne	.-12     	; 0x113a <__pack_f+0x164>
    1146:	05 c0       	rjmp	.+10     	; 0x1152 <__pack_f+0x17c>
    1148:	ee 24       	eor	r14, r14
    114a:	ff 24       	eor	r15, r15
    114c:	87 01       	movw	r16, r14
    114e:	ef ef       	ldi	r30, 0xFF	; 255
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	6e 2f       	mov	r22, r30
    1154:	67 95       	ror	r22
    1156:	66 27       	eor	r22, r22
    1158:	67 95       	ror	r22
    115a:	90 2f       	mov	r25, r16
    115c:	9f 77       	andi	r25, 0x7F	; 127
    115e:	d7 94       	ror	r13
    1160:	dd 24       	eor	r13, r13
    1162:	d7 94       	ror	r13
    1164:	8e 2f       	mov	r24, r30
    1166:	86 95       	lsr	r24
    1168:	49 2f       	mov	r20, r25
    116a:	46 2b       	or	r20, r22
    116c:	58 2f       	mov	r21, r24
    116e:	5d 29       	or	r21, r13
    1170:	b7 01       	movw	r22, r14
    1172:	ca 01       	movw	r24, r20
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	df 90       	pop	r13
    117e:	08 95       	ret

00001180 <__unpack_f>:
    1180:	fc 01       	movw	r30, r24
    1182:	db 01       	movw	r26, r22
    1184:	40 81       	ld	r20, Z
    1186:	51 81       	ldd	r21, Z+1	; 0x01
    1188:	22 81       	ldd	r18, Z+2	; 0x02
    118a:	62 2f       	mov	r22, r18
    118c:	6f 77       	andi	r22, 0x7F	; 127
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	22 1f       	adc	r18, r18
    1192:	22 27       	eor	r18, r18
    1194:	22 1f       	adc	r18, r18
    1196:	93 81       	ldd	r25, Z+3	; 0x03
    1198:	89 2f       	mov	r24, r25
    119a:	88 0f       	add	r24, r24
    119c:	82 2b       	or	r24, r18
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	99 1f       	adc	r25, r25
    11a4:	99 27       	eor	r25, r25
    11a6:	99 1f       	adc	r25, r25
    11a8:	11 96       	adiw	r26, 0x01	; 1
    11aa:	9c 93       	st	X, r25
    11ac:	11 97       	sbiw	r26, 0x01	; 1
    11ae:	21 15       	cp	r18, r1
    11b0:	31 05       	cpc	r19, r1
    11b2:	a9 f5       	brne	.+106    	; 0x121e <__unpack_f+0x9e>
    11b4:	41 15       	cp	r20, r1
    11b6:	51 05       	cpc	r21, r1
    11b8:	61 05       	cpc	r22, r1
    11ba:	71 05       	cpc	r23, r1
    11bc:	11 f4       	brne	.+4      	; 0x11c2 <__unpack_f+0x42>
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	37 c0       	rjmp	.+110    	; 0x1230 <__unpack_f+0xb0>
    11c2:	82 e8       	ldi	r24, 0x82	; 130
    11c4:	9f ef       	ldi	r25, 0xFF	; 255
    11c6:	13 96       	adiw	r26, 0x03	; 3
    11c8:	9c 93       	st	X, r25
    11ca:	8e 93       	st	-X, r24
    11cc:	12 97       	sbiw	r26, 0x02	; 2
    11ce:	9a 01       	movw	r18, r20
    11d0:	ab 01       	movw	r20, r22
    11d2:	67 e0       	ldi	r22, 0x07	; 7
    11d4:	22 0f       	add	r18, r18
    11d6:	33 1f       	adc	r19, r19
    11d8:	44 1f       	adc	r20, r20
    11da:	55 1f       	adc	r21, r21
    11dc:	6a 95       	dec	r22
    11de:	d1 f7       	brne	.-12     	; 0x11d4 <__unpack_f+0x54>
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	8c 93       	st	X, r24
    11e4:	0d c0       	rjmp	.+26     	; 0x1200 <__unpack_f+0x80>
    11e6:	22 0f       	add	r18, r18
    11e8:	33 1f       	adc	r19, r19
    11ea:	44 1f       	adc	r20, r20
    11ec:	55 1f       	adc	r21, r21
    11ee:	12 96       	adiw	r26, 0x02	; 2
    11f0:	8d 91       	ld	r24, X+
    11f2:	9c 91       	ld	r25, X
    11f4:	13 97       	sbiw	r26, 0x03	; 3
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	13 96       	adiw	r26, 0x03	; 3
    11fa:	9c 93       	st	X, r25
    11fc:	8e 93       	st	-X, r24
    11fe:	12 97       	sbiw	r26, 0x02	; 2
    1200:	20 30       	cpi	r18, 0x00	; 0
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	38 07       	cpc	r19, r24
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	48 07       	cpc	r20, r24
    120a:	80 e4       	ldi	r24, 0x40	; 64
    120c:	58 07       	cpc	r21, r24
    120e:	58 f3       	brcs	.-42     	; 0x11e6 <__unpack_f+0x66>
    1210:	14 96       	adiw	r26, 0x04	; 4
    1212:	2d 93       	st	X+, r18
    1214:	3d 93       	st	X+, r19
    1216:	4d 93       	st	X+, r20
    1218:	5c 93       	st	X, r21
    121a:	17 97       	sbiw	r26, 0x07	; 7
    121c:	08 95       	ret
    121e:	2f 3f       	cpi	r18, 0xFF	; 255
    1220:	31 05       	cpc	r19, r1
    1222:	79 f4       	brne	.+30     	; 0x1242 <__unpack_f+0xc2>
    1224:	41 15       	cp	r20, r1
    1226:	51 05       	cpc	r21, r1
    1228:	61 05       	cpc	r22, r1
    122a:	71 05       	cpc	r23, r1
    122c:	19 f4       	brne	.+6      	; 0x1234 <__unpack_f+0xb4>
    122e:	84 e0       	ldi	r24, 0x04	; 4
    1230:	8c 93       	st	X, r24
    1232:	08 95       	ret
    1234:	64 ff       	sbrs	r22, 4
    1236:	03 c0       	rjmp	.+6      	; 0x123e <__unpack_f+0xbe>
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	8c 93       	st	X, r24
    123c:	12 c0       	rjmp	.+36     	; 0x1262 <__unpack_f+0xe2>
    123e:	1c 92       	st	X, r1
    1240:	10 c0       	rjmp	.+32     	; 0x1262 <__unpack_f+0xe2>
    1242:	2f 57       	subi	r18, 0x7F	; 127
    1244:	30 40       	sbci	r19, 0x00	; 0
    1246:	13 96       	adiw	r26, 0x03	; 3
    1248:	3c 93       	st	X, r19
    124a:	2e 93       	st	-X, r18
    124c:	12 97       	sbiw	r26, 0x02	; 2
    124e:	83 e0       	ldi	r24, 0x03	; 3
    1250:	8c 93       	st	X, r24
    1252:	87 e0       	ldi	r24, 0x07	; 7
    1254:	44 0f       	add	r20, r20
    1256:	55 1f       	adc	r21, r21
    1258:	66 1f       	adc	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	8a 95       	dec	r24
    125e:	d1 f7       	brne	.-12     	; 0x1254 <__unpack_f+0xd4>
    1260:	70 64       	ori	r23, 0x40	; 64
    1262:	14 96       	adiw	r26, 0x04	; 4
    1264:	4d 93       	st	X+, r20
    1266:	5d 93       	st	X+, r21
    1268:	6d 93       	st	X+, r22
    126a:	7c 93       	st	X, r23
    126c:	17 97       	sbiw	r26, 0x07	; 7
    126e:	08 95       	ret

00001270 <__fpcmp_parts_f>:
    1270:	1f 93       	push	r17
    1272:	dc 01       	movw	r26, r24
    1274:	fb 01       	movw	r30, r22
    1276:	9c 91       	ld	r25, X
    1278:	92 30       	cpi	r25, 0x02	; 2
    127a:	08 f4       	brcc	.+2      	; 0x127e <__fpcmp_parts_f+0xe>
    127c:	47 c0       	rjmp	.+142    	; 0x130c <__fpcmp_parts_f+0x9c>
    127e:	80 81       	ld	r24, Z
    1280:	82 30       	cpi	r24, 0x02	; 2
    1282:	08 f4       	brcc	.+2      	; 0x1286 <__fpcmp_parts_f+0x16>
    1284:	43 c0       	rjmp	.+134    	; 0x130c <__fpcmp_parts_f+0x9c>
    1286:	94 30       	cpi	r25, 0x04	; 4
    1288:	51 f4       	brne	.+20     	; 0x129e <__fpcmp_parts_f+0x2e>
    128a:	11 96       	adiw	r26, 0x01	; 1
    128c:	1c 91       	ld	r17, X
    128e:	84 30       	cpi	r24, 0x04	; 4
    1290:	99 f5       	brne	.+102    	; 0x12f8 <__fpcmp_parts_f+0x88>
    1292:	81 81       	ldd	r24, Z+1	; 0x01
    1294:	68 2f       	mov	r22, r24
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	61 1b       	sub	r22, r17
    129a:	71 09       	sbc	r23, r1
    129c:	3f c0       	rjmp	.+126    	; 0x131c <__fpcmp_parts_f+0xac>
    129e:	84 30       	cpi	r24, 0x04	; 4
    12a0:	21 f0       	breq	.+8      	; 0x12aa <__fpcmp_parts_f+0x3a>
    12a2:	92 30       	cpi	r25, 0x02	; 2
    12a4:	31 f4       	brne	.+12     	; 0x12b2 <__fpcmp_parts_f+0x42>
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	b9 f1       	breq	.+110    	; 0x1318 <__fpcmp_parts_f+0xa8>
    12aa:	81 81       	ldd	r24, Z+1	; 0x01
    12ac:	88 23       	and	r24, r24
    12ae:	89 f1       	breq	.+98     	; 0x1312 <__fpcmp_parts_f+0xa2>
    12b0:	2d c0       	rjmp	.+90     	; 0x130c <__fpcmp_parts_f+0x9c>
    12b2:	11 96       	adiw	r26, 0x01	; 1
    12b4:	1c 91       	ld	r17, X
    12b6:	11 97       	sbiw	r26, 0x01	; 1
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	f1 f0       	breq	.+60     	; 0x12f8 <__fpcmp_parts_f+0x88>
    12bc:	81 81       	ldd	r24, Z+1	; 0x01
    12be:	18 17       	cp	r17, r24
    12c0:	d9 f4       	brne	.+54     	; 0x12f8 <__fpcmp_parts_f+0x88>
    12c2:	12 96       	adiw	r26, 0x02	; 2
    12c4:	2d 91       	ld	r18, X+
    12c6:	3c 91       	ld	r19, X
    12c8:	13 97       	sbiw	r26, 0x03	; 3
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	82 17       	cp	r24, r18
    12d0:	93 07       	cpc	r25, r19
    12d2:	94 f0       	brlt	.+36     	; 0x12f8 <__fpcmp_parts_f+0x88>
    12d4:	28 17       	cp	r18, r24
    12d6:	39 07       	cpc	r19, r25
    12d8:	bc f0       	brlt	.+46     	; 0x1308 <__fpcmp_parts_f+0x98>
    12da:	14 96       	adiw	r26, 0x04	; 4
    12dc:	8d 91       	ld	r24, X+
    12de:	9d 91       	ld	r25, X+
    12e0:	0d 90       	ld	r0, X+
    12e2:	bc 91       	ld	r27, X
    12e4:	a0 2d       	mov	r26, r0
    12e6:	24 81       	ldd	r18, Z+4	; 0x04
    12e8:	35 81       	ldd	r19, Z+5	; 0x05
    12ea:	46 81       	ldd	r20, Z+6	; 0x06
    12ec:	57 81       	ldd	r21, Z+7	; 0x07
    12ee:	28 17       	cp	r18, r24
    12f0:	39 07       	cpc	r19, r25
    12f2:	4a 07       	cpc	r20, r26
    12f4:	5b 07       	cpc	r21, r27
    12f6:	18 f4       	brcc	.+6      	; 0x12fe <__fpcmp_parts_f+0x8e>
    12f8:	11 23       	and	r17, r17
    12fa:	41 f0       	breq	.+16     	; 0x130c <__fpcmp_parts_f+0x9c>
    12fc:	0a c0       	rjmp	.+20     	; 0x1312 <__fpcmp_parts_f+0xa2>
    12fe:	82 17       	cp	r24, r18
    1300:	93 07       	cpc	r25, r19
    1302:	a4 07       	cpc	r26, r20
    1304:	b5 07       	cpc	r27, r21
    1306:	40 f4       	brcc	.+16     	; 0x1318 <__fpcmp_parts_f+0xa8>
    1308:	11 23       	and	r17, r17
    130a:	19 f0       	breq	.+6      	; 0x1312 <__fpcmp_parts_f+0xa2>
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	05 c0       	rjmp	.+10     	; 0x131c <__fpcmp_parts_f+0xac>
    1312:	6f ef       	ldi	r22, 0xFF	; 255
    1314:	7f ef       	ldi	r23, 0xFF	; 255
    1316:	02 c0       	rjmp	.+4      	; 0x131c <__fpcmp_parts_f+0xac>
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	cb 01       	movw	r24, r22
    131e:	1f 91       	pop	r17
    1320:	08 95       	ret

00001322 <__divmodhi4>:
    1322:	97 fb       	bst	r25, 7
    1324:	09 2e       	mov	r0, r25
    1326:	07 26       	eor	r0, r23
    1328:	0a d0       	rcall	.+20     	; 0x133e <__divmodhi4_neg1>
    132a:	77 fd       	sbrc	r23, 7
    132c:	04 d0       	rcall	.+8      	; 0x1336 <__divmodhi4_neg2>
    132e:	0c d0       	rcall	.+24     	; 0x1348 <__udivmodhi4>
    1330:	06 d0       	rcall	.+12     	; 0x133e <__divmodhi4_neg1>
    1332:	00 20       	and	r0, r0
    1334:	1a f4       	brpl	.+6      	; 0x133c <__divmodhi4_exit>

00001336 <__divmodhi4_neg2>:
    1336:	70 95       	com	r23
    1338:	61 95       	neg	r22
    133a:	7f 4f       	sbci	r23, 0xFF	; 255

0000133c <__divmodhi4_exit>:
    133c:	08 95       	ret

0000133e <__divmodhi4_neg1>:
    133e:	f6 f7       	brtc	.-4      	; 0x133c <__divmodhi4_exit>
    1340:	90 95       	com	r25
    1342:	81 95       	neg	r24
    1344:	9f 4f       	sbci	r25, 0xFF	; 255
    1346:	08 95       	ret

00001348 <__udivmodhi4>:
    1348:	aa 1b       	sub	r26, r26
    134a:	bb 1b       	sub	r27, r27
    134c:	51 e1       	ldi	r21, 0x11	; 17
    134e:	07 c0       	rjmp	.+14     	; 0x135e <__udivmodhi4_ep>

00001350 <__udivmodhi4_loop>:
    1350:	aa 1f       	adc	r26, r26
    1352:	bb 1f       	adc	r27, r27
    1354:	a6 17       	cp	r26, r22
    1356:	b7 07       	cpc	r27, r23
    1358:	10 f0       	brcs	.+4      	; 0x135e <__udivmodhi4_ep>
    135a:	a6 1b       	sub	r26, r22
    135c:	b7 0b       	sbc	r27, r23

0000135e <__udivmodhi4_ep>:
    135e:	88 1f       	adc	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	5a 95       	dec	r21
    1364:	a9 f7       	brne	.-22     	; 0x1350 <__udivmodhi4_loop>
    1366:	80 95       	com	r24
    1368:	90 95       	com	r25
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	08 95       	ret

00001370 <__prologue_saves__>:
    1370:	2f 92       	push	r2
    1372:	3f 92       	push	r3
    1374:	4f 92       	push	r4
    1376:	5f 92       	push	r5
    1378:	6f 92       	push	r6
    137a:	7f 92       	push	r7
    137c:	8f 92       	push	r8
    137e:	9f 92       	push	r9
    1380:	af 92       	push	r10
    1382:	bf 92       	push	r11
    1384:	cf 92       	push	r12
    1386:	df 92       	push	r13
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	ca 1b       	sub	r28, r26
    139a:	db 0b       	sbc	r29, r27
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	09 94       	ijmp

000013a8 <__epilogue_restores__>:
    13a8:	2a 88       	ldd	r2, Y+18	; 0x12
    13aa:	39 88       	ldd	r3, Y+17	; 0x11
    13ac:	48 88       	ldd	r4, Y+16	; 0x10
    13ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    13b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    13b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    13b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    13b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    13b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    13ba:	b9 84       	ldd	r11, Y+9	; 0x09
    13bc:	c8 84       	ldd	r12, Y+8	; 0x08
    13be:	df 80       	ldd	r13, Y+7	; 0x07
    13c0:	ee 80       	ldd	r14, Y+6	; 0x06
    13c2:	fd 80       	ldd	r15, Y+5	; 0x05
    13c4:	0c 81       	ldd	r16, Y+4	; 0x04
    13c6:	1b 81       	ldd	r17, Y+3	; 0x03
    13c8:	aa 81       	ldd	r26, Y+2	; 0x02
    13ca:	b9 81       	ldd	r27, Y+1	; 0x01
    13cc:	ce 0f       	add	r28, r30
    13ce:	d1 1d       	adc	r29, r1
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	ed 01       	movw	r28, r26
    13dc:	08 95       	ret

000013de <_exit>:
    13de:	f8 94       	cli

000013e0 <__stop_program>:
    13e0:	ff cf       	rjmp	.-2      	; 0x13e0 <__stop_program>
