
EPMtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000274  00000000  00000000  0000019f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000105  00000000  00000000  00000413  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000235  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f8  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f4  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000108  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <stdlib.h>
#include <util/delay.h>

int main(void) {

	DDRB=0;
  80:	14 b8       	out	0x04, r1	; 4
	PORTB=0;
  82:	15 b8       	out	0x05, r1	; 5
	DDRB = (1<<DDB0) | (1<<DDB1) | (1<<DDB2); // enable debugging LEDs
  84:	87 e0       	ldi	r24, 0x07	; 7
  86:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<7);
  88:	27 9a       	sbi	0x04, 7	; 4
	DDRB |= (1<<6);
  8a:	26 9a       	sbi	0x04, 6	; 4
	PORTB &=~(1<<6);
  8c:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=~(1<<7);
  8e:	2f 98       	cbi	0x05, 7	; 5

	//PORTB |= (1<<PORTB0);
	//PORTB |= (1<<PORTB1); // turn on middle LED
	//PORTB |= (1<<PORTB2);

	DDRC=0;
  90:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
  92:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<DDC3);
  94:	88 e0       	ldi	r24, 0x08	; 8
  96:	87 b9       	out	0x07, r24	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  98:	a5 ed       	ldi	r26, 0xD5	; 213
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	48 ec       	ldi	r20, 0xC8	; 200
  9c:	50 e0       	ldi	r21, 0x00	; 0
	int ii=0;
	while(1) {
		// loop
		
		//switch E.P.M. direction 1 
		PORTB |= (1<<PORTB0); // set inner LED, indicating direction 1
  9e:	60 ee       	ldi	r22, 0xE0	; 224
  a0:	71 e0       	ldi	r23, 0x01	; 1
  a2:	28 9a       	sbi	0x05, 0	; 5
		PORTB |= (1<<PORTB1); // set middle LED
  a4:	29 9a       	sbi	0x05, 1	; 5
		PORTB |= (1<<6);//activate E.P.M direction 1
  a6:	2e 9a       	sbi	0x05, 6	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  a8:	8a 2f       	mov	r24, r26
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x2a>
		_delay_us(80);//leave on for 80us
		PORTB &=~(1<<6);//deactivate E.P.M
  ae:	2e 98       	cbi	0x05, 6	; 5
		PORTB &=~(1<<7);//deactivate E.P.M
  b0:	2f 98       	cbi	0x05, 7	; 5
		PORTB &= ~(1<<PORTB1); //clear middle LED
  b2:	29 98       	cbi	0x05, 1	; 5
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	0a c0       	rjmp	.+20     	; 0xce <main+0x4e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ba:	fa 01       	movw	r30, r20
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x3c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0x3a>
		ii = 0;
		while (ii<10) {
			_delay_ms(100);//delay 1s
			ii++;
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
		_delay_us(80);//leave on for 80us
		PORTB &=~(1<<6);//deactivate E.P.M
		PORTB &=~(1<<7);//deactivate E.P.M
		PORTB &= ~(1<<PORTB1); //clear middle LED
		ii = 0;
		while (ii<10) {
  c8:	2a 30       	cpi	r18, 0x0A	; 10
  ca:	31 05       	cpc	r19, r1
  cc:	19 f0       	breq	.+6      	; 0xd4 <main+0x54>
  ce:	88 ee       	ldi	r24, 0xE8	; 232
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	f3 cf       	rjmp	.-26     	; 0xba <main+0x3a>
			_delay_ms(100);//delay 1s
			ii++;
		}		
		
		//switch E.P.M. direction 2
		PORTB &= ~(1<<PORTB0); // clear inner LED, indicating direction 2
  d4:	28 98       	cbi	0x05, 0	; 5
		PORTB |= (1<<PORTB2); // set outer LED
  d6:	2a 9a       	sbi	0x05, 2	; 5
		PORTB |= (1<<7);//activate E.P.M direction 2
  d8:	2f 9a       	sbi	0x05, 7	; 5
  da:	cb 01       	movw	r24, r22
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x5c>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  e0:	8a 2f       	mov	r24, r26
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x62>
		_delay_us(240);//leave on for 80us
		_delay_us(80);
		PORTB &=~(1<<6);//deactivate E.P.M
  e6:	2e 98       	cbi	0x05, 6	; 5
		PORTB &=~(1<<7);//deactivate E.P.M
  e8:	2f 98       	cbi	0x05, 7	; 5
		PORTB &= ~(1<<PORTB2); // clear outer LED
  ea:	2a 98       	cbi	0x05, 2	; 5
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	0a c0       	rjmp	.+20     	; 0x106 <main+0x86>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f2:	fa 01       	movw	r30, r20
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fa:	d9 f7       	brne	.-10     	; 0xf2 <main+0x72>
		ii = 0;
		while (ii<10) {
			_delay_ms(100);//delay 1s
			ii++;
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
		_delay_us(80);
		PORTB &=~(1<<6);//deactivate E.P.M
		PORTB &=~(1<<7);//deactivate E.P.M
		PORTB &= ~(1<<PORTB2); // clear outer LED
		ii = 0;
		while (ii<10) {
 100:	2a 30       	cpi	r18, 0x0A	; 10
 102:	31 05       	cpc	r19, r1
 104:	71 f2       	breq	.-100    	; 0xa2 <main+0x22>
 106:	88 ee       	ldi	r24, 0xE8	; 232
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	f3 cf       	rjmp	.-26     	; 0xf2 <main+0x72>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
