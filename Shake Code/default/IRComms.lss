
IRComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000026  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000036b  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000174  00000000  00000000  000005a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000027a  00000000  00000000  00000719  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000115  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000149  00000000  00000000  00000ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000248  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  78:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setLED>:
	//end user loop
}


void setLED(unsigned char red, unsigned char green, unsigned char blue)
{
  80:	ef 92       	push	r14
  82:	ff 92       	push	r15
  84:	0f 93       	push	r16
  86:	1f 93       	push	r17
  88:	df 93       	push	r29
  8a:	cf 93       	push	r28
  8c:	00 d0       	rcall	.+0      	; 0x8e <setLED+0xe>
  8e:	00 d0       	rcall	.+0      	; 0x90 <setLED+0x10>
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
	//Bit banging 20-600kHz
	//Send LSB first
	
	unsigned char array[4] = {0x3A, red, blue,green};
  94:	9a e3       	ldi	r25, 0x3A	; 58
  96:	99 83       	std	Y+1, r25	; 0x01
  98:	8a 83       	std	Y+2, r24	; 0x02
  9a:	4b 83       	std	Y+3, r20	; 0x03
  9c:	6c 83       	std	Y+4, r22	; 0x04
  9e:	fe 01       	movw	r30, r28
  a0:	31 96       	adiw	r30, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  a2:	95 e0       	ldi	r25, 0x05	; 5
  a4:	e9 2e       	mov	r14, r25
			_delay_us(2);
			PORTC &=~(1<<5);

			_delay_us(3);

			if(array[byte] & (0x80>>bit))
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	f8 2e       	mov	r15, r24
  aa:	a0 e8       	ldi	r26, 0x80	; 128
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	0a e1       	ldi	r16, 0x1A	; 26
	//Bit banging 20-600kHz
	//Send LSB first
	
	unsigned char array[4] = {0x3A, red, blue,green};

	for(char byte = 0; byte <= 3; byte++)
  b0:	1d e0       	ldi	r17, 0x0D	; 13
  b2:	be 01       	movw	r22, r28
  b4:	6b 5f       	subi	r22, 0xFB	; 251
  b6:	7f 4f       	sbci	r23, 0xFF	; 255
  b8:	26 c0       	rjmp	.+76     	; 0x106 <setLED+0x86>
	{
		for(unsigned char bit=0; bit<=7; bit++)
		{
			//bit initiation
			PORTC |= (1<<5);
  ba:	45 9a       	sbi	0x08, 5	; 8
  bc:	8e 2d       	mov	r24, r14
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <setLED+0x3e>
			_delay_us(2);
			PORTC &=~(1<<5);
  c2:	45 98       	cbi	0x08, 5	; 8
  c4:	8f 2d       	mov	r24, r15
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <setLED+0x46>

			_delay_us(3);

			if(array[byte] & (0x80>>bit))
  ca:	cd 01       	movw	r24, r26
  cc:	02 2e       	mov	r0, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <setLED+0x54>
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <setLED+0x50>
  d8:	84 23       	and	r24, r20
  da:	95 23       	and	r25, r21
  dc:	89 2b       	or	r24, r25
  de:	11 f0       	breq	.+4      	; 0xe4 <setLED+0x64>
				PORTC |= (1<<5);
  e0:	45 9a       	sbi	0x08, 5	; 8
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <setLED+0x66>
			else
				PORTC &=~(1<<5);
  e4:	45 98       	cbi	0x08, 5	; 8
  e6:	80 2f       	mov	r24, r16
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <setLED+0x68>

			_delay_us(10); 
			PORTC &=~(1<<5);
  ec:	45 98       	cbi	0x08, 5	; 8
  ee:	81 2f       	mov	r24, r17
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <setLED+0x70>
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
	
	unsigned char array[4] = {0x3A, red, blue,green};

	for(char byte = 0; byte <= 3; byte++)
	{
		for(unsigned char bit=0; bit<=7; bit++)
  f8:	28 30       	cpi	r18, 0x08	; 8
  fa:	31 05       	cpc	r19, r1
  fc:	f1 f6       	brne	.-68     	; 0xba <setLED+0x3a>
  fe:	31 96       	adiw	r30, 0x01	; 1
	//Bit banging 20-600kHz
	//Send LSB first
	
	unsigned char array[4] = {0x3A, red, blue,green};

	for(char byte = 0; byte <= 3; byte++)
 100:	e6 17       	cp	r30, r22
 102:	f7 07       	cpc	r31, r23
 104:	31 f0       	breq	.+12     	; 0x112 <setLED+0x92>
			_delay_us(2);
			PORTC &=~(1<<5);

			_delay_us(3);

			if(array[byte] & (0x80>>bit))
 106:	80 81       	ld	r24, Z
 108:	48 2f       	mov	r20, r24
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	d4 cf       	rjmp	.-88     	; 0xba <setLED+0x3a>
 112:	85 ed       	ldi	r24, 0xD5	; 213
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <setLED+0x94>

			_delay_us(5);  //~50kHz	
		}
	}
	_delay_us(80);//End of Sequence
}
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	cf 91       	pop	r28
 122:	df 91       	pop	r29
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	ef 90       	pop	r14
 12c:	08 95       	ret

0000012e <main>:
void setLED(unsigned char red, unsigned char green, unsigned char blue);



int main(void)
{
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
	//setup code, do not change
	DDRC=0;
 138:	17 b8       	out	0x07, r1	; 7
	PORTC=0;
 13a:	18 b8       	out	0x08, r1	; 8
	DDRC |= (1<<5);
 13c:	3d 9a       	sbi	0x07, 5	; 7
	DDRD=0;
 13e:	1a b8       	out	0x0a, r1	; 10
	PORTD=0;
 140:	1b b8       	out	0x0b, r1	; 11
	DDRD |= (1<<7);
 142:	57 9a       	sbi	0x0a, 7	; 10
	DDRD |= (1<<6);
 144:	56 9a       	sbi	0x0a, 6	; 10
	PORTD &=~(1<<6);
 146:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &=~(1<<7);
 148:	5f 98       	cbi	0x0b, 7	; 11
 14a:	25 ed       	ldi	r18, 0xD5	; 213
 14c:	f2 2e       	mov	r15, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 14e:	00 e8       	ldi	r16, 0x80	; 128
 150:	12 e0       	ldi	r17, 0x02	; 2
		setLED(0,0,50);//set led to green
		_delay_ms(140);//delay 140 ms
	*/	


		setLED(0,0,50);//set led to green
 152:	c8 ec       	ldi	r28, 0xC8	; 200
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	42 e3       	ldi	r20, 0x32	; 50
 15c:	0e 94 40 00 	call	0x80	; 0x80 <setLED>
		PORTD |= (1<<7);//activate E.P.M direction 2
 160:	5f 9a       	sbi	0x0b, 7	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 162:	8f 2d       	mov	r24, r15
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x36>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 168:	c8 01       	movw	r24, r16
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0x3c>
		//while (ii<1) {
		//	_delay_us(100);
		//	ii++;
		//}
		_delay_us(320);//leave on for 80us
		PORTD &=~(1<<6);//deactivate E.P.M
 16e:	5e 98       	cbi	0x0b, 6	; 11
		PORTD &=~(1<<7);//deactivate E.P.M
 170:	5f 98       	cbi	0x0b, 7	; 11
		setLED(0,0,0);//set led red
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	0e 94 40 00 	call	0x80	; 0x80 <setLED>
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	0a c0       	rjmp	.+20     	; 0x196 <main+0x68>
 182:	fe 01       	movw	r30, r28
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x56>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 188:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18a:	d9 f7       	brne	.-10     	; 0x182 <main+0x54>
		int ii = 0;
		while (ii<5) {
			_delay_ms(100);//delay 140ms
			ii++;
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
		_delay_us(320);//leave on for 80us
		PORTD &=~(1<<6);//deactivate E.P.M
		PORTD &=~(1<<7);//deactivate E.P.M
		setLED(0,0,0);//set led red
		int ii = 0;
		while (ii<5) {
 190:	25 30       	cpi	r18, 0x05	; 5
 192:	31 05       	cpc	r19, r1
 194:	01 f3       	breq	.-64     	; 0x156 <main+0x28>
 196:	88 ee       	ldi	r24, 0xE8	; 232
 198:	93 e0       	ldi	r25, 0x03	; 3
 19a:	f3 cf       	rjmp	.-26     	; 0x182 <main+0x54>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
