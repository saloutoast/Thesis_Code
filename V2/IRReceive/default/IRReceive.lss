
IRReceive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000252  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800100  00800100  000002c6  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003a  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000104  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000006c  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000198  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d2  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_23>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
static volatile char rcvd2 = 0;

int main(void) {
	
	// enable pin C5 and pin C4 as outputs
	DDRC = (1<<DDC5) | (1<<DDC4) | (1<<DDC3); // C5: start bit, C4: communication bits, C3: message received correctly
  90:	88 e3       	ldi	r24, 0x38	; 56
  92:	87 b9       	out	0x07, r24	; 7
	
	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
  9a:	8b e0       	ldi	r24, 0x0B	; 11
  9c:	80 bf       	out	0x30, r24	; 48
    
	// Initialize timer2
	TCCR2A |= (1<<WGM21); // do not change any output pin, clear at compare match with OCR2A
  9e:	80 91 b0 00 	lds	r24, 0x00B0
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = (1<<OCIE2A); // compare match on OCR2A
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	80 93 70 00 	sts	0x0070, r24
    OCR2A = 50; // compare every 50 counts (every 50us, 1/10 frequency of communication bits)
  ae:	82 e3       	ldi	r24, 0x32	; 50
  b0:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= (0<<CS22)|(1<<CS21)|(0<<CS20); // prescaler of 1/8: count every 1us
  b4:	80 91 b1 00 	lds	r24, 0x00B1
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	80 93 b1 00 	sts	0x00B1, r24

    sei(); // Enable interrupts
  be:	78 94       	sei
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x30>

000000c2 <__vector_23>:
		// loop
	}

}

ISR(ANALOG_COMP_vect) {
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25

    // On rising edge
    if (ACSR & (1<<ACO))
  d6:	00 b6       	in	r0, 0x30	; 48
  d8:	05 fe       	sbrs	r0, 5
  da:	63 c0       	rjmp	.+198    	; 0x1a2 <__vector_23+0xe0>
    {
		// Reset edge counter
		last_edge = 0;       
  dc:	10 92 03 01 	sts	0x0103, r1
  e0:	10 92 02 01 	sts	0x0102, r1

        // Change to falling edge.
        ACSR &= ~(1<<ACIS0);
  e4:	80 b7       	in	r24, 0x30	; 48
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	80 bf       	out	0x30, r24	; 48

        // Store received "1"
        if (rcving==0) {
  ea:	80 91 00 01 	lds	r24, 0x0100
  ee:	90 91 01 01 	lds	r25, 0x0101
  f2:	89 2b       	or	r24, r25
  f4:	41 f4       	brne	.+16     	; 0x106 <__vector_23+0x44>
			//PORTC &= ~(1<<PORTC3); // new message, clear C3
			PORTC |= (1<<PORTC5); // turn on C5 output for start bit
  f6:	45 9a       	sbi	0x08, 5	; 8
            rcving = 1; // have received a start bit
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 01 01 	sts	0x0101, r25
 100:	80 93 00 01 	sts	0x0100, r24
 104:	51 c0       	rjmp	.+162    	; 0x1a8 <__vector_23+0xe6>
        } else { // if rcving=1
			PORTC |= (1<<PORTC4); // turn on C4 for comm bits
 106:	44 9a       	sbi	0x08, 4	; 8
            if (bits_rcvd<8) {
 108:	80 91 04 01 	lds	r24, 0x0104
 10c:	90 91 05 01 	lds	r25, 0x0105
 110:	08 97       	sbiw	r24, 0x08	; 8
 112:	ac f4       	brge	.+42     	; 0x13e <__vector_23+0x7c>
                rcvd1 &= (1<<(7-bits_rcvd));
 114:	40 91 06 01 	lds	r20, 0x0106
 118:	80 91 04 01 	lds	r24, 0x0104
 11c:	90 91 05 01 	lds	r25, 0x0105
 120:	27 e0       	ldi	r18, 0x07	; 7
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	28 1b       	sub	r18, r24
 126:	39 0b       	sbc	r19, r25
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <__vector_23+0x70>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	2a 95       	dec	r18
 134:	e2 f7       	brpl	.-8      	; 0x12e <__vector_23+0x6c>
 136:	48 23       	and	r20, r24
 138:	40 93 06 01 	sts	0x0106, r20
 13c:	1a c0       	rjmp	.+52     	; 0x172 <__vector_23+0xb0>
                bits_rcvd += 1;
            } 
            else if (bits_rcvd<16) {
 13e:	80 91 04 01 	lds	r24, 0x0104
 142:	90 91 05 01 	lds	r25, 0x0105
 146:	40 97       	sbiw	r24, 0x10	; 16
 148:	f4 f4       	brge	.+60     	; 0x186 <__vector_23+0xc4>
                rcvd2 &= (1<<(15-bits_rcvd));
 14a:	40 91 07 01 	lds	r20, 0x0107
 14e:	80 91 04 01 	lds	r24, 0x0104
 152:	90 91 05 01 	lds	r25, 0x0105
 156:	2f e0       	ldi	r18, 0x0F	; 15
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	28 1b       	sub	r18, r24
 15c:	39 0b       	sbc	r19, r25
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <__vector_23+0xa6>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	2a 95       	dec	r18
 16a:	e2 f7       	brpl	.-8      	; 0x164 <__vector_23+0xa2>
 16c:	48 23       	and	r20, r24
 16e:	40 93 07 01 	sts	0x0107, r20
                bits_rcvd += 1;
 172:	80 91 04 01 	lds	r24, 0x0104
 176:	90 91 05 01 	lds	r25, 0x0105
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	90 93 05 01 	sts	0x0105, r25
 180:	80 93 04 01 	sts	0x0104, r24
 184:	11 c0       	rjmp	.+34     	; 0x1a8 <__vector_23+0xe6>
            }
            else { // received all 16 bits
                bits_rcvd = 0;
 186:	10 92 05 01 	sts	0x0105, r1
 18a:	10 92 04 01 	sts	0x0104, r1
                rcving = 0; // finished receiving
 18e:	10 92 01 01 	sts	0x0101, r1
 192:	10 92 00 01 	sts	0x0100, r1
				PORTC &= ~(1<<PORTC5);
 196:	45 98       	cbi	0x08, 5	; 8
                if ((rcvd1-rcvd2)==0) { // if two messages are the same
 198:	80 91 06 01 	lds	r24, 0x0106
 19c:	80 91 07 01 	lds	r24, 0x0107
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <__vector_23+0xe6>
    {
        // Turn off C5 output
        //PORTC &= ~(1<<PORTC5);

        // Change to rising edge.
        ACSR |= (1<<ACIS0);
 1a2:	80 b7       	in	r24, 0x30	; 48
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	80 bf       	out	0x30, r24	; 48
    }
} 
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <__vector_7>:

ISR(TIMER2_COMPA_vect) {
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25

    if (rcving==1) { // only bother tracking 0 bits if a start bit has been received
 1ca:	80 91 00 01 	lds	r24, 0x0100
 1ce:	90 91 01 01 	lds	r25, 0x0101
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	a9 f5       	brne	.+106    	; 0x240 <__vector_7+0x84>
        last_edge += 1; // Increment edge counter
 1d6:	80 91 02 01 	lds	r24, 0x0102
 1da:	90 91 03 01 	lds	r25, 0x0103
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	90 93 03 01 	sts	0x0103, r25
 1e4:	80 93 02 01 	sts	0x0102, r24

        if (last_edge>12) { // Did not receive a rising edge in over 600us (received a 0 communication bit)
 1e8:	80 91 02 01 	lds	r24, 0x0102
 1ec:	90 91 03 01 	lds	r25, 0x0103
 1f0:	0d 97       	sbiw	r24, 0x0d	; 13
 1f2:	34 f1       	brlt	.+76     	; 0x240 <__vector_7+0x84>

            PORTC &= ~(1<<PORTC4); // Clear C4 output
 1f4:	44 98       	cbi	0x08, 4	; 8
            
            if (bits_rcvd<16) {
 1f6:	80 91 04 01 	lds	r24, 0x0104
 1fa:	90 91 05 01 	lds	r25, 0x0105
 1fe:	40 97       	sbiw	r24, 0x10	; 16
 200:	54 f4       	brge	.+20     	; 0x216 <__vector_7+0x5a>
                bits_rcvd += 1; // increment bit_rcvd counter if currently receiving
 202:	80 91 04 01 	lds	r24, 0x0104
 206:	90 91 05 01 	lds	r25, 0x0105
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	90 93 05 01 	sts	0x0105, r25
 210:	80 93 04 01 	sts	0x0104, r24
 214:	0f c0       	rjmp	.+30     	; 0x234 <__vector_7+0x78>
            } else { // bits_rcvd = 16, done receiving
                bits_rcvd = 0;
 216:	10 92 05 01 	sts	0x0105, r1
 21a:	10 92 04 01 	sts	0x0104, r1
                rcving = 0; // finished receiving
 21e:	10 92 01 01 	sts	0x0101, r1
 222:	10 92 00 01 	sts	0x0100, r1
                if ((rcvd1-rcvd2)==0) { // if two messages are the same
 226:	90 91 06 01 	lds	r25, 0x0106
 22a:	80 91 07 01 	lds	r24, 0x0107
 22e:	98 17       	cp	r25, r24
 230:	09 f4       	brne	.+2      	; 0x234 <__vector_7+0x78>
                    PORTC &= ~(1<<PORTC5); // turn off C5 if messages are equal
 232:	45 98       	cbi	0x08, 5	; 8
                }
            }

            last_edge = 2; // Reset edge counter
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	90 93 03 01 	sts	0x0103, r25
 23c:	80 93 02 01 	sts	0x0102, r24

        }
    }
} 
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
