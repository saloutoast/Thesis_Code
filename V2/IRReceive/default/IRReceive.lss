
IRReceive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001b6  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003a  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000b4  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000006c  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000108  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000009d  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_23>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
static volatile int last_edge = 0;

int main(void) {
	
	// enable pin C5 and pin C4 as outputs
	DDRC = (1<<DDC5) | (1<<DDC4); // C5 will mimic signal, C4 will be communication bits
  90:	80 e3       	ldi	r24, 0x30	; 48
  92:	87 b9       	out	0x07, r24	; 7
	
	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
  9a:	8b e0       	ldi	r24, 0x0B	; 11
  9c:	80 bf       	out	0x30, r24	; 48
    
	// Initialize timer2
	TCCR2A |= (1<<WGM21); // do not change any output pin, clear at compare match with OCR2A
  9e:	80 91 b0 00 	lds	r24, 0x00B0
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = (1<<OCIE2A); // compare match on OCR2A
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	80 93 70 00 	sts	0x0070, r24
    OCR2A = 50; // compare every 150 counts (every 150us, 1/10 frequency of communication bits)
  ae:	82 e3       	ldi	r24, 0x32	; 50
  b0:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= (0<<CS22)|(1<<CS21)|(0<<CS20); // prescaler of 1/8: count every 1us
  b4:	80 91 b1 00 	lds	r24, 0x00B1
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	80 93 b1 00 	sts	0x00B1, r24

    sei(); // Enable interrupts
  be:	78 94       	sei
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <main+0x30>

000000c2 <__vector_23>:
		// loop
	}

}

ISR(ANALOG_COMP_vect) {
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24

    // On rising edge
    if (ACSR & (1<<ACO))
  ce:	00 b6       	in	r0, 0x30	; 48
  d0:	05 fe       	sbrs	r0, 5
  d2:	09 c0       	rjmp	.+18     	; 0xe6 <__vector_23+0x24>
    {
        // Turn on C5 and C4 output
		PORTC = (1<<PORTC5) | (1<<PORTC4); 
  d4:	80 e3       	ldi	r24, 0x30	; 48
  d6:	88 b9       	out	0x08, r24	; 8
			
		// Reset edge counter
		last_edge = 0;       
  d8:	10 92 01 01 	sts	0x0101, r1
  dc:	10 92 00 01 	sts	0x0100, r1

        // Change to falling edge.
        ACSR &= ~(1<<ACIS0);
  e0:	80 b7       	in	r24, 0x30	; 48
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	03 c0       	rjmp	.+6      	; 0xec <__vector_23+0x2a>
    }
    else
    {
        // Turn off C5 output
		PORTC &= ~(1<<PORTC5);
  e6:	45 98       	cbi	0x08, 5	; 8

        // Change to rising edge.
        ACSR |= (1<<ACIS0);
  e8:	80 b7       	in	r24, 0x30	; 48
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 bf       	out	0x30, r24	; 48
    }
} 
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_7>:

ISR(TIMER2_COMPA_vect) {
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25

	last_edge += 1; // Increment edge counter
 108:	80 91 00 01 	lds	r24, 0x0100
 10c:	90 91 01 01 	lds	r25, 0x0101
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 01 01 	sts	0x0101, r25
 116:	80 93 00 01 	sts	0x0100, r24

	if (last_edge > 10) { // Did not receive a 1 communication bit in over 500us
 11a:	80 91 00 01 	lds	r24, 0x0100
 11e:	90 91 01 01 	lds	r25, 0x0101
 122:	0b 97       	sbiw	r24, 0x0b	; 11
 124:	2c f0       	brlt	.+10     	; 0x130 <__vector_7+0x36>

		PORTC &= ~(1<<PORTC4); // Clear C4 output
 126:	44 98       	cbi	0x08, 4	; 8
		last_edge = 0; // Reset edge counter
 128:	10 92 01 01 	sts	0x0101, r1
 12c:	10 92 00 01 	sts	0x0100, r1

	}
	
} 
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
