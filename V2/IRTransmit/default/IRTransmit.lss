
IRTransmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800100  00800100  000002b0  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000002a  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000fd  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000082  00000000  00000000  000003f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000159  00000000  00000000  00000479  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d1  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
static volatile int pausing = 0;

int main(void) {
	
	// enable pin C5 as output
	DDRC |= (1<<DDC5);
  90:	3d 9a       	sbi	0x07, 5	; 7

	// Initialize timer2
	TCCR2A |= (1<<WGM21); // do not change any output pin, clear at compare match with OCR2A
  92:	80 91 b0 00 	lds	r24, 0x00B0
  96:	82 60       	ori	r24, 0x02	; 2
  98:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = (1<<OCIE2A); // compare match on OCR2A
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	80 93 70 00 	sts	0x0070, r24
	OCR2A = 50; // compare every 50 counts (every 50us, 1/10 frequency of communication bits)
  a2:	82 e3       	ldi	r24, 0x32	; 50
  a4:	80 93 b3 00 	sts	0x00B3, r24
	TCCR2B |= (0<<CS22)|(1<<CS21)|(0<<CS20); // prescaler of 1/8: count every 1us
  a8:	80 91 b1 00 	lds	r24, 0x00B1
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 93 b1 00 	sts	0x00B1, r24

	sei(); // Enable interrupts
  b2:	78 94       	sei
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x24>

000000b6 <__vector_7>:
	while(1) {	
		// loop
	}
}

ISR(TIMER2_COMPA_vect) {
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	3f 93       	push	r19
  c4:	4f 93       	push	r20
  c6:	5f 93       	push	r21
  c8:	6f 93       	push	r22
  ca:	7f 93       	push	r23
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	
	if (pausing==0) { // if not pausing
  d0:	80 91 00 01 	lds	r24, 0x0100
  d4:	90 91 01 01 	lds	r25, 0x0101
  d8:	89 2b       	or	r24, r25
  da:	09 f0       	breq	.+2      	; 0xde <__vector_7+0x28>
  dc:	88 c0       	rjmp	.+272    	; 0x1ee <__vector_7+0x138>
		if (sending==0) { // send start bit
  de:	80 91 02 01 	lds	r24, 0x0102
  e2:	90 91 03 01 	lds	r25, 0x0103
  e6:	89 2b       	or	r24, r25
  e8:	61 f4       	brne	.+24     	; 0x102 <__vector_7+0x4c>
			PORTC |= (1<<PORTC5);
  ea:	45 9a       	sbi	0x08, 5	; 8
			cycle = 0;
  ec:	10 92 05 01 	sts	0x0105, r1
  f0:	10 92 04 01 	sts	0x0104, r1
			sending = 1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 03 01 	sts	0x0103, r25
  fc:	80 93 02 01 	sts	0x0102, r24
 100:	8e c0       	rjmp	.+284    	; 0x21e <__vector_7+0x168>
		}
		else { // sending = 1
			if (cycle==10) {
 102:	80 91 04 01 	lds	r24, 0x0104
 106:	90 91 05 01 	lds	r25, 0x0105
 10a:	0a 97       	sbiw	r24, 0x0a	; 10
 10c:	09 f0       	breq	.+2      	; 0x110 <__vector_7+0x5a>
 10e:	5e c0       	rjmp	.+188    	; 0x1cc <__vector_7+0x116>

				if (bits_sent<8) { // first message
 110:	80 91 06 01 	lds	r24, 0x0106
 114:	90 91 07 01 	lds	r25, 0x0107
 118:	08 97       	sbiw	r24, 0x08	; 8
 11a:	5c f4       	brge	.+22     	; 0x132 <__vector_7+0x7c>
					next_bit = (toSend & (1<<(7-bits_sent))) >> (7-bits_sent);
 11c:	80 91 06 01 	lds	r24, 0x0106
 120:	90 91 07 01 	lds	r25, 0x0107
 124:	60 91 06 01 	lds	r22, 0x0106
 128:	70 91 07 01 	lds	r23, 0x0107
 12c:	27 e0       	ldi	r18, 0x07	; 7
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	10 c0       	rjmp	.+32     	; 0x152 <__vector_7+0x9c>
					if (next_bit==1) { PORTC |= (1<<PORTC5); } // if bit is 1, set C5
					else { PORTC &= ~(1<<PORTC5); } // if bit is 0, clear C5

					bits_sent += 1;

				} else if (bits_sent < 16) { // second message
 132:	80 91 06 01 	lds	r24, 0x0106
 136:	90 91 07 01 	lds	r25, 0x0107
 13a:	40 97       	sbiw	r24, 0x10	; 16
 13c:	a4 f5       	brge	.+104    	; 0x1a6 <__vector_7+0xf0>
					next_bit = (toSend & (1<<(15-bits_sent))) >> (15-bits_sent);
 13e:	80 91 06 01 	lds	r24, 0x0106
 142:	90 91 07 01 	lds	r25, 0x0107
 146:	60 91 06 01 	lds	r22, 0x0106
 14a:	70 91 07 01 	lds	r23, 0x0107
 14e:	2f e0       	ldi	r18, 0x0F	; 15
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	a9 01       	movw	r20, r18
 154:	48 1b       	sub	r20, r24
 156:	59 0b       	sbc	r21, r25
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__vector_7+0xac>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	4a 95       	dec	r20
 164:	e2 f7       	brpl	.-8      	; 0x15e <__vector_7+0xa8>
 166:	89 7b       	andi	r24, 0xB9	; 185
 168:	90 70       	andi	r25, 0x00	; 0
 16a:	26 1b       	sub	r18, r22
 16c:	37 0b       	sbc	r19, r23
 16e:	02 c0       	rjmp	.+4      	; 0x174 <__vector_7+0xbe>
 170:	95 95       	asr	r25
 172:	87 95       	ror	r24
 174:	2a 95       	dec	r18
 176:	e2 f7       	brpl	.-8      	; 0x170 <__vector_7+0xba>
 178:	90 93 09 01 	sts	0x0109, r25
 17c:	80 93 08 01 	sts	0x0108, r24

					if (next_bit==1) { PORTC |= (1<<PORTC5); } // if bit is 1, set C5
 180:	80 91 08 01 	lds	r24, 0x0108
 184:	90 91 09 01 	lds	r25, 0x0109
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	11 f4       	brne	.+4      	; 0x190 <__vector_7+0xda>
 18c:	45 9a       	sbi	0x08, 5	; 8
 18e:	01 c0       	rjmp	.+2      	; 0x192 <__vector_7+0xdc>
					else { PORTC &= ~(1<<PORTC5); } // if bit is 0, clear C5
 190:	45 98       	cbi	0x08, 5	; 8

					bits_sent += 1;
 192:	80 91 06 01 	lds	r24, 0x0106
 196:	90 91 07 01 	lds	r25, 0x0107
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	90 93 07 01 	sts	0x0107, r25
 1a0:	80 93 06 01 	sts	0x0106, r24
 1a4:	0e c0       	rjmp	.+28     	; 0x1c2 <__vector_7+0x10c>

				} else { // two messages have been sent, bits_sent=16
					sending = 0;
 1a6:	10 92 03 01 	sts	0x0103, r1
 1aa:	10 92 02 01 	sts	0x0102, r1
					pausing = 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 01 01 	sts	0x0101, r25
 1b6:	80 93 00 01 	sts	0x0100, r24
					bits_sent = 0;
 1ba:	10 92 07 01 	sts	0x0107, r1
 1be:	10 92 06 01 	sts	0x0106, r1
				}
				cycle = 0;
 1c2:	10 92 05 01 	sts	0x0105, r1
 1c6:	10 92 04 01 	sts	0x0104, r1
 1ca:	29 c0       	rjmp	.+82     	; 0x21e <__vector_7+0x168>

			} else if (cycle==2) {
 1cc:	80 91 04 01 	lds	r24, 0x0104
 1d0:	90 91 05 01 	lds	r25, 0x0105
 1d4:	02 97       	sbiw	r24, 0x02	; 2
 1d6:	09 f4       	brne	.+2      	; 0x1da <__vector_7+0x124>
				PORTC &= ~(1<<PORTC5); // always clear bit after 2 cycles
 1d8:	45 98       	cbi	0x08, 5	; 8
				cycle += 1;
			} else { 
				cycle += 1; // increment cycle counter
 1da:	80 91 04 01 	lds	r24, 0x0104
 1de:	90 91 05 01 	lds	r25, 0x0105
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	90 93 05 01 	sts	0x0105, r25
 1e8:	80 93 04 01 	sts	0x0104, r24
 1ec:	18 c0       	rjmp	.+48     	; 0x21e <__vector_7+0x168>
			}
		}	
	}
	else { // if pausing
		cycle +=1; 
 1ee:	80 91 04 01 	lds	r24, 0x0104
 1f2:	90 91 05 01 	lds	r25, 0x0105
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	90 93 05 01 	sts	0x0105, r25
 1fc:	80 93 04 01 	sts	0x0104, r24
		if (cycle==200) { // pause for 10ms after sending message
 200:	80 91 04 01 	lds	r24, 0x0104
 204:	90 91 05 01 	lds	r25, 0x0105
 208:	88 3c       	cpi	r24, 0xC8	; 200
 20a:	91 05       	cpc	r25, r1
 20c:	41 f4       	brne	.+16     	; 0x21e <__vector_7+0x168>
			cycle=0;
 20e:	10 92 05 01 	sts	0x0105, r1
 212:	10 92 04 01 	sts	0x0104, r1
			pausing=0;
 216:	10 92 01 01 	sts	0x0101, r1
 21a:	10 92 00 01 	sts	0x0100, r1
		}
	}
}
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
