
IRComms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000012  00800100  00800100  00000470  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004a  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000017e  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000082  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000286  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010a  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_23>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 31       	cpi	r26, 0x12	; 18
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
static volatile int pausing = 0;

int main(void) {
	
	// enable pin C5 and pin C4 as outputs
	DDRC = (1<<DDC5) | (1<<DDC4) | (1<<DDC3); // C5: start bit, C4: communication bits, C3: IR LED
  90:	88 e3       	ldi	r24, 0x38	; 56
  92:	87 b9       	out	0x07, r24	; 7
	
	// Initialize analog compare pins
    DIDR1 = (1<<AIN1D) | (1<<AIN0D); // Disable the digital input buffers
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	80 93 7f 00 	sts	0x007F, r24
    ACSR = (1<<ACIE) | (1<<ACIS1) | (1<<ACIS0); // Setup the comparator: enable interrupt, interrupt on rising edge
  9a:	8b e0       	ldi	r24, 0x0B	; 11
  9c:	80 bf       	out	0x30, r24	; 48
    
    // Initialize timer1 for transmitting
    TCCR1B |= (1<<WGM12); // do not change any output pin, clear at compare match with OCR1A
  9e:	80 91 81 00 	lds	r24, 0x0081
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<OCIE1A); // compare match on OCR1A
  a8:	22 e0       	ldi	r18, 0x02	; 2
  aa:	20 93 6f 00 	sts	0x006F, r18
	OCR1A = 50; // compare every 50 counts (every 50us, 1/10 frequency of communication bits)
  ae:	82 e3       	ldi	r24, 0x32	; 50
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	90 93 89 00 	sts	0x0089, r25
  b6:	80 93 88 00 	sts	0x0088, r24
	TCCR1B |= (0<<CS12)|(1<<CS11)|(0<<CS10); // prescaler of 1/8: count every 1us 
  ba:	80 91 81 00 	lds	r24, 0x0081
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 93 81 00 	sts	0x0081, r24
    
    // Initialize timer2 for receiving
	TCCR2A |= (1<<WGM21); // do not change any output pin, clear at compare match with OCR2A
  c4:	80 91 b0 00 	lds	r24, 0x00B0
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 = (1<<OCIE2A); // compare match on OCR2A
  ce:	20 93 70 00 	sts	0x0070, r18
    OCR2A = 50; // compare every 50 counts (every 50us, 1/10 frequency of communication bits)
  d2:	82 e3       	ldi	r24, 0x32	; 50
  d4:	80 93 b3 00 	sts	0x00B3, r24
    TCCR2B |= (0<<CS22)|(1<<CS21)|(0<<CS20); // prescaler of 1/8: count every 1us
  d8:	80 91 b1 00 	lds	r24, 0x00B1
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	80 93 b1 00 	sts	0x00B1, r24

    sei(); // Enable interrupts
  e2:	78 94       	sei
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <main+0x54>

000000e6 <__vector_23>:
		// loop
	}

}

ISR(ANALOG_COMP_vect) {
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25

    // On rising edge
    if (ACSR & (1<<ACO))
  fa:	00 b6       	in	r0, 0x30	; 48
  fc:	05 fe       	sbrs	r0, 5
  fe:	65 c0       	rjmp	.+202    	; 0x1ca <__vector_23+0xe4>
    {
		// Reset edge counter
		last_edge = 0;       
 100:	10 92 0d 01 	sts	0x010D, r1
 104:	10 92 0c 01 	sts	0x010C, r1

        // Change to falling edge.
        ACSR &= ~(1<<ACIS0);
 108:	80 b7       	in	r24, 0x30	; 48
 10a:	8e 7f       	andi	r24, 0xFE	; 254
 10c:	80 bf       	out	0x30, r24	; 48

        // Store received "1"
        if (rcving==0) {
 10e:	80 91 0a 01 	lds	r24, 0x010A
 112:	90 91 0b 01 	lds	r25, 0x010B
 116:	89 2b       	or	r24, r25
 118:	41 f4       	brne	.+16     	; 0x12a <__vector_23+0x44>
			PORTC |= (1<<PORTC5); // turn on C5 output for start bit
 11a:	45 9a       	sbi	0x08, 5	; 8
            rcving = 1; // have received a start bit
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 0b 01 	sts	0x010B, r25
 124:	80 93 0a 01 	sts	0x010A, r24
 128:	53 c0       	rjmp	.+166    	; 0x1d0 <__vector_23+0xea>
        } else { // if rcving=1
			PORTC |= (1<<PORTC4); // turn on C4 for comm bits
 12a:	44 9a       	sbi	0x08, 4	; 8
            if (bits_rcvd<8) {
 12c:	80 91 0e 01 	lds	r24, 0x010E
 130:	90 91 0f 01 	lds	r25, 0x010F
 134:	08 97       	sbiw	r24, 0x08	; 8
 136:	ac f4       	brge	.+42     	; 0x162 <__vector_23+0x7c>
                rcvd1 &= (1<<(7-bits_rcvd));
 138:	40 91 10 01 	lds	r20, 0x0110
 13c:	80 91 0e 01 	lds	r24, 0x010E
 140:	90 91 0f 01 	lds	r25, 0x010F
 144:	27 e0       	ldi	r18, 0x07	; 7
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	28 1b       	sub	r18, r24
 14a:	39 0b       	sbc	r19, r25
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <__vector_23+0x70>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	2a 95       	dec	r18
 158:	e2 f7       	brpl	.-8      	; 0x152 <__vector_23+0x6c>
 15a:	48 23       	and	r20, r24
 15c:	40 93 10 01 	sts	0x0110, r20
 160:	1a c0       	rjmp	.+52     	; 0x196 <__vector_23+0xb0>
                bits_rcvd += 1;
            } 
            else if (bits_rcvd<16) {
 162:	80 91 0e 01 	lds	r24, 0x010E
 166:	90 91 0f 01 	lds	r25, 0x010F
 16a:	40 97       	sbiw	r24, 0x10	; 16
 16c:	f4 f4       	brge	.+60     	; 0x1aa <__vector_23+0xc4>
                rcvd2 &= (1<<(15-bits_rcvd));
 16e:	40 91 11 01 	lds	r20, 0x0111
 172:	80 91 0e 01 	lds	r24, 0x010E
 176:	90 91 0f 01 	lds	r25, 0x010F
 17a:	2f e0       	ldi	r18, 0x0F	; 15
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	28 1b       	sub	r18, r24
 180:	39 0b       	sbc	r19, r25
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <__vector_23+0xa6>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	2a 95       	dec	r18
 18e:	e2 f7       	brpl	.-8      	; 0x188 <__vector_23+0xa2>
 190:	48 23       	and	r20, r24
 192:	40 93 11 01 	sts	0x0111, r20
                bits_rcvd += 1;
 196:	80 91 0e 01 	lds	r24, 0x010E
 19a:	90 91 0f 01 	lds	r25, 0x010F
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 0f 01 	sts	0x010F, r25
 1a4:	80 93 0e 01 	sts	0x010E, r24
 1a8:	13 c0       	rjmp	.+38     	; 0x1d0 <__vector_23+0xea>
            }
            else { // received all 16 bits
                bits_rcvd = 0;
 1aa:	10 92 0f 01 	sts	0x010F, r1
 1ae:	10 92 0e 01 	sts	0x010E, r1
                rcving = 0; // finished receiving	
 1b2:	10 92 0b 01 	sts	0x010B, r1
 1b6:	10 92 0a 01 	sts	0x010A, r1
                if ((rcvd1-rcvd2)==0) { // if two messages are the same
 1ba:	90 91 10 01 	lds	r25, 0x0110
 1be:	80 91 11 01 	lds	r24, 0x0111
 1c2:	98 17       	cp	r25, r24
 1c4:	29 f4       	brne	.+10     	; 0x1d0 <__vector_23+0xea>
                    PORTC &= ~(1<<PORTC5);
 1c6:	45 98       	cbi	0x08, 5	; 8
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <__vector_23+0xea>
        }
    }
    else 
    {
        // Change to rising edge.
        ACSR |= (1<<ACIS0);
 1ca:	80 b7       	in	r24, 0x30	; 48
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	80 bf       	out	0x30, r24	; 48
    }
} 
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	4f 91       	pop	r20
 1d6:	3f 91       	pop	r19
 1d8:	2f 91       	pop	r18
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_7>:

ISR(TIMER2_COMPA_vect) { // timer2 interrupt routine
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25

    if (rcving==1) { // only bother tracking 0 bits if a start bit has been received
 1f2:	80 91 0a 01 	lds	r24, 0x010A
 1f6:	90 91 0b 01 	lds	r25, 0x010B
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	a9 f5       	brne	.+106    	; 0x268 <__vector_7+0x84>
        last_edge += 1; // Increment edge counter
 1fe:	80 91 0c 01 	lds	r24, 0x010C
 202:	90 91 0d 01 	lds	r25, 0x010D
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	90 93 0d 01 	sts	0x010D, r25
 20c:	80 93 0c 01 	sts	0x010C, r24

        if (last_edge>12) { // Did not receive a rising edge in over 600us (received a 0 communication bit)
 210:	80 91 0c 01 	lds	r24, 0x010C
 214:	90 91 0d 01 	lds	r25, 0x010D
 218:	0d 97       	sbiw	r24, 0x0d	; 13
 21a:	34 f1       	brlt	.+76     	; 0x268 <__vector_7+0x84>

            PORTC &= ~(1<<PORTC4); // Clear C4 output
 21c:	44 98       	cbi	0x08, 4	; 8
            
            if (bits_rcvd<16) {
 21e:	80 91 0e 01 	lds	r24, 0x010E
 222:	90 91 0f 01 	lds	r25, 0x010F
 226:	40 97       	sbiw	r24, 0x10	; 16
 228:	54 f4       	brge	.+20     	; 0x23e <__vector_7+0x5a>
                bits_rcvd += 1; // increment bit_rcvd counter if currently receiving
 22a:	80 91 0e 01 	lds	r24, 0x010E
 22e:	90 91 0f 01 	lds	r25, 0x010F
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 0f 01 	sts	0x010F, r25
 238:	80 93 0e 01 	sts	0x010E, r24
 23c:	0f c0       	rjmp	.+30     	; 0x25c <__vector_7+0x78>
            } else { // bits_rcvd = 16, done receiving
                bits_rcvd = 0;
 23e:	10 92 0f 01 	sts	0x010F, r1
 242:	10 92 0e 01 	sts	0x010E, r1
                rcving = 0; // finished receiving
 246:	10 92 0b 01 	sts	0x010B, r1
 24a:	10 92 0a 01 	sts	0x010A, r1
                if ((rcvd1-rcvd2)==0) { // if two messages are the same
 24e:	90 91 10 01 	lds	r25, 0x0110
 252:	80 91 11 01 	lds	r24, 0x0111
 256:	98 17       	cp	r25, r24
 258:	09 f4       	brne	.+2      	; 0x25c <__vector_7+0x78>
                    PORTC &= ~(1<<PORTC5); // turn off C5 if messages are equal
 25a:	45 98       	cbi	0x08, 5	; 8
                }
            }
            last_edge = 2; // Reset edge counter
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	90 93 0d 01 	sts	0x010D, r25
 264:	80 93 0c 01 	sts	0x010C, r24
        }
    }
} 
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <__vector_11>:

ISR(TIMER1_COMPA_vect) { // timer1 interrupt routine
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
	
	if (pausing==0) { // if not pausing
 290:	80 91 00 01 	lds	r24, 0x0100
 294:	90 91 01 01 	lds	r25, 0x0101
 298:	89 2b       	or	r24, r25
 29a:	09 f0       	breq	.+2      	; 0x29e <__vector_11+0x28>
 29c:	88 c0       	rjmp	.+272    	; 0x3ae <__vector_11+0x138>
		if (sending==0) { // send start bit on C3
 29e:	80 91 02 01 	lds	r24, 0x0102
 2a2:	90 91 03 01 	lds	r25, 0x0103
 2a6:	89 2b       	or	r24, r25
 2a8:	61 f4       	brne	.+24     	; 0x2c2 <__vector_11+0x4c>
			PORTC |= (1<<PORTC3);
 2aa:	43 9a       	sbi	0x08, 3	; 8
			cycle = 0;
 2ac:	10 92 05 01 	sts	0x0105, r1
 2b0:	10 92 04 01 	sts	0x0104, r1
			sending = 1;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	90 93 03 01 	sts	0x0103, r25
 2bc:	80 93 02 01 	sts	0x0102, r24
 2c0:	8e c0       	rjmp	.+284    	; 0x3de <__vector_11+0x168>
		}
		else { // sending = 1
			if (cycle==10) {
 2c2:	80 91 04 01 	lds	r24, 0x0104
 2c6:	90 91 05 01 	lds	r25, 0x0105
 2ca:	0a 97       	sbiw	r24, 0x0a	; 10
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <__vector_11+0x5a>
 2ce:	5e c0       	rjmp	.+188    	; 0x38c <__vector_11+0x116>

				if (bits_sent<8) { // first message
 2d0:	80 91 06 01 	lds	r24, 0x0106
 2d4:	90 91 07 01 	lds	r25, 0x0107
 2d8:	08 97       	sbiw	r24, 0x08	; 8
 2da:	5c f4       	brge	.+22     	; 0x2f2 <__vector_11+0x7c>
					next_bit = (toSend & (1<<(7-bits_sent))) >> (7-bits_sent);
 2dc:	80 91 06 01 	lds	r24, 0x0106
 2e0:	90 91 07 01 	lds	r25, 0x0107
 2e4:	60 91 06 01 	lds	r22, 0x0106
 2e8:	70 91 07 01 	lds	r23, 0x0107
 2ec:	27 e0       	ldi	r18, 0x07	; 7
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	10 c0       	rjmp	.+32     	; 0x312 <__vector_11+0x9c>
					if (next_bit==1) { PORTC |= (1<<PORTC3); } // if bit is 1, set C3
					else { PORTC &= ~(1<<PORTC3); } // if bit is 0, clear C3

					bits_sent += 1;

				} else if (bits_sent < 16) { // second message
 2f2:	80 91 06 01 	lds	r24, 0x0106
 2f6:	90 91 07 01 	lds	r25, 0x0107
 2fa:	40 97       	sbiw	r24, 0x10	; 16
 2fc:	a4 f5       	brge	.+104    	; 0x366 <__vector_11+0xf0>
					next_bit = (toSend & (1<<(15-bits_sent))) >> (15-bits_sent);
 2fe:	80 91 06 01 	lds	r24, 0x0106
 302:	90 91 07 01 	lds	r25, 0x0107
 306:	60 91 06 01 	lds	r22, 0x0106
 30a:	70 91 07 01 	lds	r23, 0x0107
 30e:	2f e0       	ldi	r18, 0x0F	; 15
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	a9 01       	movw	r20, r18
 314:	48 1b       	sub	r20, r24
 316:	59 0b       	sbc	r21, r25
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <__vector_11+0xac>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	4a 95       	dec	r20
 324:	e2 f7       	brpl	.-8      	; 0x31e <__vector_11+0xa8>
 326:	86 74       	andi	r24, 0x46	; 70
 328:	90 70       	andi	r25, 0x00	; 0
 32a:	26 1b       	sub	r18, r22
 32c:	37 0b       	sbc	r19, r23
 32e:	02 c0       	rjmp	.+4      	; 0x334 <__vector_11+0xbe>
 330:	95 95       	asr	r25
 332:	87 95       	ror	r24
 334:	2a 95       	dec	r18
 336:	e2 f7       	brpl	.-8      	; 0x330 <__vector_11+0xba>
 338:	90 93 09 01 	sts	0x0109, r25
 33c:	80 93 08 01 	sts	0x0108, r24

					if (next_bit==1) { PORTC |= (1<<PORTC3); } // if bit is 1, set C3
 340:	80 91 08 01 	lds	r24, 0x0108
 344:	90 91 09 01 	lds	r25, 0x0109
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	11 f4       	brne	.+4      	; 0x350 <__vector_11+0xda>
 34c:	43 9a       	sbi	0x08, 3	; 8
 34e:	01 c0       	rjmp	.+2      	; 0x352 <__vector_11+0xdc>
					else { PORTC &= ~(1<<PORTC3); } // if bit is 0, clear C3
 350:	43 98       	cbi	0x08, 3	; 8

					bits_sent += 1;
 352:	80 91 06 01 	lds	r24, 0x0106
 356:	90 91 07 01 	lds	r25, 0x0107
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	90 93 07 01 	sts	0x0107, r25
 360:	80 93 06 01 	sts	0x0106, r24
 364:	0e c0       	rjmp	.+28     	; 0x382 <__vector_11+0x10c>

				} else { // two messages have been sent, bits_sent=16
					sending = 0;
 366:	10 92 03 01 	sts	0x0103, r1
 36a:	10 92 02 01 	sts	0x0102, r1
					pausing = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	90 93 01 01 	sts	0x0101, r25
 376:	80 93 00 01 	sts	0x0100, r24
					bits_sent = 0;
 37a:	10 92 07 01 	sts	0x0107, r1
 37e:	10 92 06 01 	sts	0x0106, r1
				}
				cycle = 0;
 382:	10 92 05 01 	sts	0x0105, r1
 386:	10 92 04 01 	sts	0x0104, r1
 38a:	29 c0       	rjmp	.+82     	; 0x3de <__vector_11+0x168>

			} else if (cycle==2) {
 38c:	80 91 04 01 	lds	r24, 0x0104
 390:	90 91 05 01 	lds	r25, 0x0105
 394:	02 97       	sbiw	r24, 0x02	; 2
 396:	09 f4       	brne	.+2      	; 0x39a <__vector_11+0x124>
				PORTC &= ~(1<<PORTC3); // always clear bit after 2 cycles
 398:	43 98       	cbi	0x08, 3	; 8
				cycle += 1;
			} else { 
				cycle += 1; // increment cycle counter
 39a:	80 91 04 01 	lds	r24, 0x0104
 39e:	90 91 05 01 	lds	r25, 0x0105
 3a2:	01 96       	adiw	r24, 0x01	; 1
 3a4:	90 93 05 01 	sts	0x0105, r25
 3a8:	80 93 04 01 	sts	0x0104, r24
 3ac:	18 c0       	rjmp	.+48     	; 0x3de <__vector_11+0x168>
			}
		}	
	}
	else { // if pausing
		cycle +=1; 
 3ae:	80 91 04 01 	lds	r24, 0x0104
 3b2:	90 91 05 01 	lds	r25, 0x0105
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	90 93 05 01 	sts	0x0105, r25
 3bc:	80 93 04 01 	sts	0x0104, r24
		if (cycle==200) { // pause for 200us after sending message
 3c0:	80 91 04 01 	lds	r24, 0x0104
 3c4:	90 91 05 01 	lds	r25, 0x0105
 3c8:	88 3c       	cpi	r24, 0xC8	; 200
 3ca:	91 05       	cpc	r25, r1
 3cc:	41 f4       	brne	.+16     	; 0x3de <__vector_11+0x168>
			cycle=0;
 3ce:	10 92 05 01 	sts	0x0105, r1
 3d2:	10 92 04 01 	sts	0x0104, r1
			pausing=0;
 3d6:	10 92 01 01 	sts	0x0101, r1
 3da:	10 92 00 01 	sts	0x0100, r1
		}
	}
}
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	7f 91       	pop	r23
 3e4:	6f 91       	pop	r22
 3e6:	5f 91       	pop	r21
 3e8:	4f 91       	pop	r20
 3ea:	3f 91       	pop	r19
 3ec:	2f 91       	pop	r18
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
